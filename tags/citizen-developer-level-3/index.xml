<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agilebase docs – Citizen Developer level 3</title>
    <link>https://docs.agilebase.co.uk/tags/citizen-developer-level-3/</link>
    <description>Recent content in Citizen Developer level 3 on Agilebase docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 03 Oct 2023 13:00:00 +0100</lastBuildDate>
    
	  <atom:link href="https://docs.agilebase.co.uk/tags/citizen-developer-level-3/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Citizen Developer Level 3</title>
      <link>https://docs.agilebase.co.uk/docs/introduction/learner-progression-levels/citizen-developer-level-3/</link>
      <pubDate>Tue, 03 Oct 2023 13:00:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/introduction/learner-progression-levels/citizen-developer-level-3/</guid>
      <description>
        
        
        &lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;A Software Architect (see below) can, at their discretion, assign a citizen developer 3 &amp;lsquo;develop&amp;rsquo; privileges on a table (or tables).&lt;/p&gt;
&lt;p&gt;That allows them to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/&#34;&gt;fields&lt;/a&gt; to those table, excluding referenced fields&lt;/li&gt;
&lt;li&gt;remove fields that they themselves have added (not others)&lt;/li&gt;
&lt;li&gt;edit the basic properties of any field in those tables, e.g. the list of options in a dropdown box&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, actions not related to having develop privileges on a particular table are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit the basic properties of any regular view. However, workflow, API and some other types of system view will be read-only&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;useful-links&#34;&gt;Useful Links&lt;/h2&gt;
&lt;p&gt;COMING SOON - Video about hot to control the UI&lt;/p&gt;
&lt;p&gt;For more information about:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.agilebase.co.uk/docs/tiles/&#34;&gt;Setting up Tiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/calculations/&#34;&gt;Using Calculations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Guides: 4. Calculated Datafields</title>
      <link>https://docs.agilebase.co.uk/guides/guide1-crm/calculated-datafields/</link>
      <pubDate>Wed, 16 Aug 2023 13:00:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/guides/guide1-crm/calculated-datafields/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Learning Aim:&lt;/strong&gt;   Introduce calculations and basic SQL&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; User to have understanding of relational data&lt;/p&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;The ability to use your existing data to calculate new information will dramatically enhance the user interface, and lead your users to create new data!&lt;/p&gt;
&lt;p&gt;In this step fo the guide we&amp;rsquo;ll start with something simple, expanding the data we know about Organisations.&lt;/p&gt;
&lt;h2 id=&#34;calculating-the-number-of-contacts-belonging-to-an-organisation&#34;&gt;Calculating the number of contacts belonging to an Organisation&lt;/h2&gt;
&lt;p&gt;Using the All Organisations view as a starting point, clone it and rename it &amp;ldquo;Organisation - Calculations.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We will need to join down to the Contacts table, before we create our calculation field.&lt;/li&gt;
&lt;li&gt;Go to “fields”, highlight the add a calculation section&lt;/li&gt;
&lt;li&gt;Add a calculation called “Number of Contacts”, of type ‘Whole number’.&lt;/li&gt;
&lt;li&gt;Press Add&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The important area is the ‘Calculation Definition’. In this example we want to count the number of contacts each organisation has. We can do this by using a SQL statement called Count.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;count()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Between the brackets we choose which field we want to count. In this case the contact record&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;count({contacts.id:contacts})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We now need to press update to tell agileBase we have finished editing our calculation. Press Update.&lt;/p&gt;
&lt;p&gt;As you can see the system has correctly identified that count is something known as an aggregate field and ticked the box for us.&lt;/p&gt;
&lt;p&gt;If you click back on Fields you should see the list and how calculations are highlighted in purple to distinguish from regular fields taken from a table definition. Lets drag our calculation near the front”&lt;/p&gt;
&lt;p&gt;Move the calc.&lt;/p&gt;
&lt;p&gt;Closing the edit allows us to see our results.&lt;/p&gt;
&lt;p&gt;This is a very simple example of an SQL calculation. For more examples as well as a link to the underlying Postgres documentation visit - &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/calculations/examples/&#34;&gt;docs- calculation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[guide 1.4 - video 1]
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/kxsIr6yHlNg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;calculating-the-date-of-our-latest-sale-to-create-a-our-customers-list&#34;&gt;Calculating the Date of our Latest Sale to create a &amp;ldquo;Our Customers&amp;rdquo; list&lt;/h2&gt;
&lt;p&gt;A further useful example is to show how we can use the results of a calculation to create a Live view, for example &amp;ldquo;Our Customers&amp;rdquo;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start by adding a join down to Sales opportunities&lt;/li&gt;
&lt;li&gt;Instead of adding an existing Sales opportunity field let’s add a calculation&lt;/li&gt;
&lt;li&gt;Go to list of fields and add a calculation called “Latest Sale”, which of course will be a ‘Date’ field.&lt;/li&gt;
&lt;li&gt;Press Add&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This time our SQL looks like&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; max({sales opportunities.date won})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same aggregate field option should be ticked for us.&lt;/p&gt;
&lt;p&gt;We can add a filter based on the values in the calculation e.g. where ‘Latest Sale’ is not blank!&lt;/p&gt;
&lt;p&gt;You should now see your list of Organisations has dramatically shrunk&lt;/p&gt;
&lt;p&gt;If you are following along, it makes sense for a Quick name change to make it “All customers”&lt;/p&gt;
&lt;p&gt;[guide 1.4 - video 2]
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/tGIsw4uhYZQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Common Options</title>
      <link>https://docs.agilebase.co.uk/docs/fields/field-options/common-options/</link>
      <pubDate>Fri, 24 Apr 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/fields/field-options/common-options/</guid>
      <description>
        
        
        &lt;h2 id=&#34;capitalise-field-name&#34;&gt;Capitalise field name&lt;/h2&gt;
&lt;p&gt;By default Agilebase displays field names in Title Case. Un-ticking this option disables that, which can be useful for special cases like e.g. &amp;lsquo;pH&amp;rsquo; or &amp;lsquo;Length (m)&amp;rsquo;, which would otherwise show as &amp;lsquo;PH&amp;rsquo; and &amp;lsquo;Length (M)&amp;rsquo;.&lt;/p&gt;
&lt;h2 id=&#34;icon&#34;&gt;Icon&lt;/h2&gt;
&lt;p&gt;Rather than displaying a field name, show an icon, chosen from &lt;a href=&#34;https://fontawesome.com/icons&#34;&gt;https://fontawesome.com/icons&lt;/a&gt;. For example, to show a phone icon for a phone number field, you could enter &lt;code&gt;phone&lt;/code&gt;, for an email field &lt;code&gt;envelope&lt;/code&gt; or a twitter handle &lt;code&gt;twitter&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;field-visibility&#34;&gt;Field visibility&lt;/h2&gt;
&lt;p&gt;Allow a field to be hidden or shown based on conditions.&lt;/p&gt;
&lt;p&gt;You can either select a view containing the conditions to use or just create conditions directly under the Field Visibility heading. In either case, the conditions in use will be shown.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/field-visibility.png&#34; alt=&#34;field visibility conditions&#34;&gt;&lt;/p&gt;
&lt;p&gt;Behind the scenes, the conditions are saved by creating a view (if none is selected already) and adding each condition as a filter. If a record appears in the view, the field will be visible, otherwise it won&amp;rsquo;t display to users.&lt;/p&gt;
&lt;p&gt;You can click the &amp;lsquo;visibility view&amp;rsquo; link to go to that view and edit it to add more complex conditions if you wish.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As the conditions are created in a view, this mechanism is really powerful. You can create simple or very complex critera, including all of the filter options in a view, for example basing a filter on a calculation and combining multiple filters.&lt;/p&gt;
&lt;p&gt;So you could make a field appear only when a particular point is reached in a process, or a status is changed elsewhere in a form, or perhaps it should only be visible to people who are &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/roles/&#34;&gt;members of a certain role&lt;/a&gt;. See &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/filters/&#34;&gt;view filters&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Two special options are available&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;show always - the default state&lt;/li&gt;
&lt;li&gt;show never - useful for hiding fields used for internal purposes, e.g. which help the internal workings of a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/workflows/&#34;&gt;workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If this option is used on a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-types/special-field-types/separators/&#34;&gt;separator&lt;/a&gt; field, then the visibility rule will apply to the entire block of fields under that separator.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;lock-when-value-set&#34;&gt;Lock when value set&lt;/h2&gt;
&lt;p&gt;If the field is blank, allow a value to be entered, however as soon as it has a value, lock to prevent further editing. The user can manually unlock, but will be prompted for a reason for doing so, which will be logged against the field as a comment.&lt;/p&gt;
&lt;p&gt;This can be used to prevent accidental editing of important fields which should not usually be changed, for example a product&amp;rsquo;s stock code.&lt;/p&gt;
&lt;h2 id=&#34;unlock-if-record-in-view&#34;&gt;Unlock if record in view&lt;/h2&gt;
&lt;p&gt;If &lt;strong&gt;Lock when value set&lt;/strong&gt; is ticked, unlock on certain criteria. Works the same way as &lt;a href=&#34;#show-if-record-in-view&#34;&gt;Show if record in view&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;required&#34;&gt;Required&lt;/h2&gt;
&lt;p&gt;If ticked, prompt the user for a value when they try to leave a record without one. Note we can&amp;rsquo;t force the value, as the user could refresh the browser as a workaround.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For dropdown fields with the value(s) set to &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/text-field-options/#lists-of-users&#34;&gt;Lists of users&lt;/a&gt;, this has the special effect of defaulting the field to the ID of the currently logged in user.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;prominent&#34;&gt;Prominent&lt;/h2&gt;
&lt;p&gt;Prominently highlight the field on the screen, e.g. if it&amp;rsquo;s one that is important to fill out, without actually requiring a value to be supplied.&lt;/p&gt;
&lt;h2 id=&#34;set-from-previous-referenced-field&#34;&gt;Set from previous referenced field&lt;/h2&gt;
&lt;p&gt;Provides a way to calculate a default option for a field. Tick this option and place a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-types/special-field-types/referenced-data/&#34;&gt;referenced field&lt;/a&gt; just before this field. The value of this field will be set from whatever value the referenced field outputs.&lt;/p&gt;
&lt;p&gt;If the referenced field&amp;rsquo;s view has more than one field, the last one will be used, or if any have the same name as this field then that one will be.&lt;/p&gt;
&lt;p&gt;To have a value set only at a certain point in a process, this option can be combined with the &lt;a href=&#34;#show-if-record-in-view&#34;&gt;Show if record in view&lt;/a&gt; option. When the field becomes visible, the value will be set.&lt;/p&gt;
&lt;p&gt;Setting the value of a relation field is a special case because you need to set both the actual relation value, which is the numeric ID of the record you wish to relate to, and the display value i.e. what the user should see. The way to do this is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a field or calculation with the same name as the display field for the relation. For example in a contact record, if you have a relation field &amp;lsquo;Company&amp;rsquo; with its display field set to &amp;lsquo;Company Name&amp;rsquo;, then you could create a calculation called Company Name and set it to output the name of the relevant company.&lt;/li&gt;
&lt;li&gt;Add the internal row ID for the company to the referenced field&amp;rsquo;s view. This should be the &lt;strong&gt;last&lt;/strong&gt; field in the view&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that another way of setting a value on record creation is to use a workflow set to &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/options/#when-a-records-created-run-this-workflow &#34;&gt;run on record creation&lt;/a&gt;. If you need to set the value on record creation, using a workflow is the best way - it will seem slightly quicker to the user. However if you need to be able to wait a while before automatically setting the value of a field, perhaps until another field has been filled in, then using this referenced field option is the way to go.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;unique&#34;&gt;Unique&lt;/h2&gt;
&lt;p&gt;Disallow any duplicate values from being entered. No records in the table can have the same value as each other.&lt;/p&gt;
&lt;h2 id=&#34;change-causes-record-refresh&#34;&gt;Change causes record refresh&lt;/h2&gt;
&lt;p&gt;Through the use of some field options like &lt;a href=&#34;#show-if-record-in-view&#34;&gt;Show if record in view&lt;/a&gt; above, the screen can change based on what&amp;rsquo;s entered into a form. This option can work as a switch to refresh the configuration of the screen if it does change as someone enters new data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, if there is a table to store sales opportunities, one field may be the status. If the status changes to &lt;code&gt;won&lt;/code&gt; or &lt;code&gt;lost&lt;/code&gt;, then you may wish to show some extra fields like &amp;lsquo;date won&amp;rsquo; or &amp;lsquo;reason why lost&amp;rsquo; for example. To allow this, tick the &amp;lsquo;change causes record refresh&amp;rsquo; option on the status field. Then whenever the status changes, these fields will automatically appear if relevant.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Guides: 5. Cross References and Automations</title>
      <link>https://docs.agilebase.co.uk/guides/guide1-crm/cross-reference-and-automations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.agilebase.co.uk/guides/guide1-crm/cross-reference-and-automations/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Learning Aim:&lt;/strong&gt;   Using Cross Reference (Xref) fields in a table definition to display related info. Introduce WorkFlows (Buttons, sending emails, document generation). Being organised by using a naming convention!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; User to have watched “Add a Sales Pipeline” and “Introducing calculated” video. Understand how to create calculations in views.&lt;/p&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;This part of the guide starts to introduce some more powerful and advanced features of the agileBase system. It looks at how we can give users of our basic CRM some power ups that make it a better user experience. Let’s continue with our Sales Opportunities and introduce the concept of cross referencing data before adding an automated email ‘reminder’ and a button to the user interface…&lt;/p&gt;
&lt;p&gt;[guide 1.5 - video 1]
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/2fCRaTfsE60&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;getting-things-ready&#34;&gt;Getting things ready&lt;/h2&gt;
&lt;p&gt;As a system starts to get bigger it helps to organise the &amp;ldquo;behind the scenes&amp;rdquo; views as much as the tiles and views that out users interact with. It is good practice to create a collection of System Tiles where you can file the &amp;ldquo;behind the scenes&amp;rdquo; work.&lt;/p&gt;
&lt;p&gt;We would suggest the following tiles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;System - Cross Reference&amp;rdquo; for the lookup style views that will add data to our forms&lt;/li&gt;
&lt;li&gt;&amp;ldquo;System - Workflow&amp;rdquo; for the automations&lt;/li&gt;
&lt;li&gt;&amp;ldquo;System - Visibility&amp;rdquo; for the rules that control the visibility of specific User Interface items&lt;/li&gt;
&lt;li&gt;&amp;ldquo;System - Tabs&amp;rdquo; for the views that control the list of child items seen on a forms tab&lt;/li&gt;
&lt;li&gt;&amp;ldquo;System - General&amp;rdquo; for everything else&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;adding-look-up-data-to-a-form&#34;&gt;Adding Look Up data to a Form&lt;/h2&gt;
&lt;p&gt;In this first example we want to show the user who the owner of the company is rather than letting the user set it.&lt;/p&gt;
&lt;p&gt;Start from the Tiles interface, and enter the build interface.&lt;/p&gt;
&lt;p&gt;We first need to build a view that will look up the data for us.&lt;/p&gt;
&lt;p&gt;Find the Sales Opportunity table, click to Edit, navigate to Names and Views, and Create a new view (with out all fields) in the Tile called ‘System - Cross Referenced’&amp;hellip; Try using the name “xref - Sales Opportunity Organisation Owner”&lt;/p&gt;
&lt;p&gt;To find out who the company owner is we need to navigate the relational database. In this case, UP to the organisation, then DOWN to contacts.&lt;/p&gt;
&lt;p&gt;Add the joins!!!&lt;/p&gt;
&lt;p&gt;Typically, Cross reference views only have a few key fields of information&amp;hellip;&lt;/p&gt;
&lt;p&gt;Add Name, tel and email&lt;/p&gt;
&lt;p&gt;However, we only want contacts that we know are the Owners, so add a filter on the contact role where Role contains &amp;ldquo;Owner&amp;rdquo;&lt;/p&gt;
&lt;p&gt;At this point it&amp;rsquo;s useful to look at the data and judge whether it seems about right&lt;/p&gt;
&lt;p&gt;Now we need to add this data to the Sales Opportunity.&lt;/p&gt;
&lt;p&gt;Go back and Edit the Sales Opportunity table and show the list of fields.&lt;/p&gt;
&lt;p&gt;Add a Cross reference field. This is just a special type of field that needs a little bit more setting up than a regular field.&lt;/p&gt;
&lt;p&gt;Add the new field, name “Company Owner(s)”,  set the type to &amp;lsquo;cross referenced data&amp;rsquo;&lt;/p&gt;
&lt;p&gt;Table to Use: Sales Opportunities&lt;/p&gt;
&lt;p&gt;View to use:  ‘xref - Sales Opportunity Organisation Owner’&lt;/p&gt;
&lt;p&gt;Move it to right place (probably near the top)&lt;/p&gt;
&lt;p&gt;Close the edit, navigate to a Sales opportunity record and see how it looks&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You have a little bit of control how it appears on the form, by choosing ‘Tabular display’ and or the drop down ‘display of fields’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;automations---sending-an-email&#34;&gt;Automations - sending an email&lt;/h2&gt;
&lt;p&gt;Our second example is going to demonstrate the power of Workflows. We can configure the system to be working when we’re not! We will now add an internal ‘Reminder’ email that will prompt the owner of our Sales opportunities to update their progress.
You can read about this facility at &lt;a href=&#34;https://docs.agilebase.co.uk/docs/workflows/send-email/&#34;&gt;docs workflows - sending an email&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IMPORTANT NOTE - Whilst Agilebase can be used to send emails, it should NOT be used for marketing purposes. Rather it should be used as a method to notify people about data associated to the system. In this instance we are going to remind people that they have ‘Sales opportunities requiring updates’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[guide 1.5 - video 2]
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/CG4y7jclRK8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h3 id=&#34;1-starting-from-the-view-of-tiles-enter-the-build-interface&#34;&gt;1. Starting from the view of Tiles, enter the build interface.&lt;/h3&gt;
&lt;p&gt;We first need to create the Workflow that will do all the work for us.&lt;/p&gt;
&lt;p&gt;Find the Sales Opportunity table, click to Edit, navigate to Names and Views, and Create a new view (without all fields) in the Tile called ‘System - Workflows’. We suggest a name like “WF email - Sales opportunities requiring updates”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Prefixing with WF, along with some text, makes it clear to future developers what action the Workflow performs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2-our-intial-task-is-to-add-all-the-fields-we-wish-to-use-in-the-email&#34;&gt;2. Our intial task is to add all the fields we wish to use in the email&lt;/h3&gt;
&lt;p&gt;Add the join to get the Main contact’s full name&lt;/p&gt;
&lt;p&gt;Add Title, Date of Enquiry, Main Contact, Owner, Last updated&lt;/p&gt;
&lt;h3 id=&#34;3-now-add-the-filters-so-we-only-get-the-records-that-need-chasing&#34;&gt;3. Now Add the filters so we only get the records that need chasing.&lt;/h3&gt;
&lt;p&gt;Obviously we only want to chase Opportunities that have not been updated recently&lt;/p&gt;
&lt;p&gt;Add a filter for Last Updated that is older than 1 week&lt;/p&gt;
&lt;p&gt;We also only want to chase Opportunities that are ‘In Progress’. Our Status field uses a number prefix to make this easy&amp;hellip; Opportunities that still need to be progressed have a prefix number lower than 4, therefore add a second filter for Status Less Than 4&lt;/p&gt;
&lt;h3 id=&#34;4-setup-the-email&#34;&gt;4. Setup the email&lt;/h3&gt;
&lt;p&gt;Click on the &amp;ldquo;Workflow - send emails&amp;rdquo; option on the Left hand Side of the Edit pop-up.&lt;/p&gt;
&lt;p&gt;We are sending an internal ‘email notification’, so click the right hand option&lt;/p&gt;
&lt;p&gt;Set the options much like you would a mailmerge in Word. In agileBase you use the Curly brackets to let the system know where to insert the data (notice the list of fields available to you above the To input field.&lt;/p&gt;
&lt;p&gt;For example we want the &amp;ldquo;To&amp;rdquo; field to be set to {owner}&lt;/p&gt;
&lt;p&gt;Subject can be set to ‘Sales Opp Update needed for {title}‘&lt;/p&gt;
&lt;p&gt;And the Body of the email can be set to&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;Hi {owner}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You have a Sales opportunity called &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; {Title} &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; {Date of Enquiry} that has &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; been updated since {Last updated}&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Please contact {full name} &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; do what a good salesperson does &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; close the deal&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!!!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Regards
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Agilebase&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The system will colour the text red if you get any of the merge fields incorrect&lt;/p&gt;
&lt;h3 id=&#34;5-setting-up-the-workflow&#34;&gt;5. Setting up the workflow&lt;/h3&gt;
&lt;p&gt;Set the Workflow to run everyday&lt;/p&gt;
&lt;p&gt;Set the Log send time and choose every 24 hours. Once set to 24hours you can specify a time the workflow should run. Dont forget to log when it sends to a new field called ‘wf_SalesOpDateChaseSent’&lt;/p&gt;
&lt;p&gt;Behind the scenes agileBase has automatically added a filter that means this Workflow will only ever chase once. Whilst this is probably the case in 90% of cases when we chase things by email, in this example we want to chase every 7 days. So we can alter the Filter.&lt;/p&gt;
&lt;p&gt;Navigate to the filters option&lt;/p&gt;
&lt;p&gt;Remove the automatically created filter on ‘wf_SalesOpDateChaseSent’.&lt;/p&gt;
&lt;p&gt;Now, add one back in with ‘wf_SalesOpDateChaseSent’ must be older than a week, and then click the ‘or blank’.&lt;/p&gt;
&lt;p&gt;Finally, if you click on the view title, the display will load in the list of records that the system will email next time the Workflow runs - which should be tomorrow at your specified time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TIPS&lt;/strong&gt;
Go to ‘Properties and options’, and set the ‘Row limit’ to 1&lt;/p&gt;
&lt;p&gt;You’ll see the view only has one item in it.&lt;/p&gt;
&lt;p&gt;If we now go to ‘workflow - edit records’, we can press ‘Run Workflow Now’, and it will only send the one email!&lt;/p&gt;
&lt;p&gt;We can also see evidence of the email being sent in the Logs, recent messages section.&lt;/p&gt;
&lt;p&gt;Now don&amp;rsquo;t forget to go back and remove the Row limit!”&lt;/p&gt;
&lt;h2 id=&#34;a-look-at-the-chaser&#34;&gt;A look at the &amp;ldquo;Chaser&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;The email notification option usually sends a single email per record. The Chaser is a built in feature that is preconfigured to send repeat emails. This is a bigger, more feature rich version of what we just setup. Again, it’s something that runs in the background.&lt;/p&gt;
&lt;p&gt;It’s specifically aimed at automating those emails you send to 3rd parties chasing for specific information. But can also be used for internal chasers&amp;hellip; which is what we are going to demonstrate with a chaser for Outstanding Tasks”&lt;/p&gt;
&lt;p&gt;[guide 1.5 - video 2a]
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/bAF7T_Ip2eA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h3 id=&#34;setting-up-a-chaser&#34;&gt;Setting Up a chaser&lt;/h3&gt;
&lt;p&gt;Go in to development mode and find the Tasks table.&lt;/p&gt;
&lt;p&gt;As we’ve done before add a new view to the workflow tile and call it ‘wf chaser - outstanding tasks’.&lt;/p&gt;
&lt;p&gt;Go to the send emails option and choose the chaser option.&lt;/p&gt;
&lt;p&gt;Click the first tickbox and enable the chaser.&lt;/p&gt;
&lt;p&gt;The system does a lot of the heavy lifting for you, adding fields, and creating the calcs and views needed for it to work, but dont forget to check what time of day you wish the chaser to run.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/workflow_chaser.png&#34; alt=&#34;List of fields created and added by the chaser&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can see in the screeshot above how the system has created several calculations setting things like ‘Chase every’ and ‘escalate after’ and ‘escalate to’ which the system references to control the way the chaser works.&lt;/p&gt;
&lt;p&gt;For more information please visit &lt;a href=&#34;https://docs.agilebase.co.uk/docs/workflows/send-chaser/&#34;&gt;docs sending a chaser&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At a bare minimum you will need to change who we are sending the email to.&lt;/p&gt;
&lt;p&gt;Edit the “To” calculation and change it to be the “assigned to” user.&lt;/p&gt;
&lt;p&gt;And add the appropriate filters which in this case are when the “Due” date has passed (older than 1 day). And the status is not equal to completed.&lt;/p&gt;
&lt;p&gt;Sepping back and looking at the data returned by the view we can see in its current form the chaser will send an email every 8 days, and after 5 attempts will stop but as we have NOT set the escalate to field no one will be notified that this task has failed to be completed!!!&lt;/p&gt;
&lt;h2 id=&#34;adding-a-button-to-a-form&#34;&gt;Adding a button to a form&lt;/h2&gt;
&lt;p&gt;In this third example we want to add a button to the user interface so that when the Sales Opportunity is won, we want that button to set the status AND log who did it AND when!&lt;/p&gt;
&lt;p&gt;Start from the Tiles interface, and enter the build interface.&lt;/p&gt;
&lt;p&gt;We first need to build a Workflow that will do the actual work of setting the data for us.&lt;/p&gt;
&lt;p&gt;Find the Sales Opportunity table, click to Edit, navigate to Names and Views, and Create a new view (without all fields) in the Tile called ‘System - Workflows’. We suggest a name like “Sales opportunity WON”&lt;/p&gt;
&lt;p&gt;N.b. We have NOT prefixed this workflow and the name of the view will be what the user sees on the form&amp;rsquo;s interface&lt;/p&gt;
&lt;p&gt;[guide 1.5 - video 3]
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/QkkFtW2CpuU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h3 id=&#34;1-setting-data&#34;&gt;1. Setting DATA&lt;/h3&gt;
&lt;p&gt;For our workflow to set data we need to create a calculation.&lt;/p&gt;
&lt;p&gt;We learnt how to create calculations in a previous video&lt;/p&gt;
&lt;p&gt;In this case we want a ‘text’ calculation.&lt;/p&gt;
&lt;p&gt;It is essential that we use the same name as the field we wish to set. In this case ‘Status’.&lt;/p&gt;
&lt;p&gt;The correct way to write SQL for Text fields involves using single quotes to hold our value. It is also important that we set the field to be the right option in our Status drop down -  in this case it must include the number prefix. Set the calculation value to be&amp;hellip;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;‘4) Won’ 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We also want to set WHO closed the Sales Op. This is another text field but this time the destination field is called ‘closed by’.”&lt;/p&gt;
&lt;p&gt;We can use a special bit of SQL called a variable to find out who is logged in.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/calculation_variables.png&#34; alt=&#34;List of variables avaialble to a calculation&#34;&gt;&lt;/p&gt;
&lt;p&gt;From the list above we can see we need our calculation text to be&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ab_userid()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-setting-up-the-workflow&#34;&gt;3. Setting up the WORKFLOW&lt;/h3&gt;
&lt;p&gt;Finally we need to turn this view into a Workflow that does something!&lt;/p&gt;
&lt;p&gt;If we choose the workflow - edit records section we can change the Action to ‘Update the Matching Sales Opportunity’&lt;/p&gt;
&lt;p&gt;We can use the fact that the system needs to store the date it perfomed the action by setting &amp;ldquo;log update to&amp;rdquo; to the exisitng &amp;ldquo;Closed date” field&lt;/p&gt;
&lt;p&gt;We will leave Frequency as ‘Manual’ as we want the user to use a button to fire this workflow&lt;/p&gt;
&lt;h3 id=&#34;adding-the-button-to-the-ui&#34;&gt;Adding the Button to the UI&lt;/h3&gt;
&lt;p&gt;At last we are ready to add the button to the user interface&lt;/p&gt;
&lt;p&gt;Go back to Edit Sales opportunity table and show the list of fields&lt;/p&gt;
&lt;p&gt;Buttons are just Cross reference Fields that are setup to be workflows&lt;/p&gt;
&lt;p&gt;Add the new field to the table&amp;hellip; name “BTN - Sales Op WON”,  type cross referenced data&lt;/p&gt;
&lt;p&gt;Table to Use: Sales Opportunities&lt;/p&gt;
&lt;p&gt;View to use:  ‘Sales Op WON’&lt;/p&gt;
&lt;p&gt;Move it to right place, probably near the bottom, and see how it looks&lt;/p&gt;
&lt;h3 id=&#34;hiding-the-button-when-we-dont-want-it&#34;&gt;Hiding the button when we dont want it!!!&lt;/h3&gt;
&lt;p&gt;First of all try pressing the button&lt;/p&gt;
&lt;p&gt;You can see that the status is now Won&lt;/p&gt;
&lt;p&gt;However, at the moment, even though the button has been pressed and we’ve set the status to Won we can still press the button again!!!&lt;/p&gt;
&lt;p&gt;To stop this we need to apply a visibility rule to that button to hide it. In this case we want the button to be hidden if the sales opportunity is already marked as Won.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/button_visibility_rule.png&#34; alt=&#34;Visibility rule added to the field&#34;&gt;&lt;/p&gt;
&lt;p&gt;Go back to Edit Sales opportunity table, show the list of fields and click to edit the BTN field&lt;/p&gt;
&lt;p&gt;Scroll down a little and you can see the section about Field Visibility.&lt;/p&gt;
&lt;p&gt;Simply set the filter required - In our case this means the status value is less than 4 as seen in the screenshot above.&lt;/p&gt;
&lt;h2 id=&#34;other-types-of-automations&#34;&gt;Other types of Automations&lt;/h2&gt;
&lt;p&gt;There are several other types of automations&amp;hellip; we’ve already seen sending emails in this guide, but you can also create new records and generate PDFs. If you are interested please take a look at our other guides linked below and the associated documentation&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.agilebase.co.uk/docs/workflows/send-chaser/&#34;&gt;List of different types of workflows&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Relation Field Options</title>
      <link>https://docs.agilebase.co.uk/docs/fields/field-options/relation-field-options/</link>
      <pubDate>Tue, 12 May 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/fields/field-options/relation-field-options/</guid>
      <description>
        
        
        &lt;p&gt;Relations between tables are the &amp;lsquo;glue&amp;rsquo; that holds together an application built using Agilebase. If you&amp;rsquo;d like to learn more about this fundamental concept, please check out the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/relational-database-concepts/&#34;&gt;relational database concepts&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Some of the options for a relation field determine the nature of the links between tables, which can have a great effect on how an app works, so it&amp;rsquo;s very useful to know about them.&lt;/p&gt;
&lt;h2 id=&#34;one-to-one-only&#34;&gt;One to one only&lt;/h2&gt;
&lt;p&gt;By default, a relation is a &amp;lsquo;many to one&amp;rsquo;. For example if a relation field in a contacts table links to an organisation, that organisation can have many contacts linked. If an ingredient links to a recipe, that recipe can have many ingredients. One customer can have many orders - examples are numerous.&lt;/p&gt;
&lt;p&gt;If a relation is marked as &amp;lsquo;one to one only&amp;rsquo;, then that behaviour is changed so that only one &amp;lsquo;child&amp;rsquo; record of this type is allowed for a particular &amp;lsquo;parent&amp;rsquo; record.&lt;/p&gt;
&lt;p&gt;When is this useful?&lt;/p&gt;
&lt;p&gt;Take the case of an ingredient record. You may want to record nutritional information, chemical composition and allergens for example. With each type of date stored in a separate table, linked by a one-to-one relation, these can be separated out on the screen into &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/tabs/&#34;&gt;tabs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The advantages of doing that, as opposed to just adding all the fields into different blocks in a single table are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The user interface becomes clearer to navigate, especially if you have dozens of fields in each section&lt;/li&gt;
&lt;li&gt;Different privileges can easily be assigned to different tables. For example, you may want only certain people to be able to update allergen information, with others able to view but not edit the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;do-not-auto-populate&#34;&gt;Do not auto-populate&lt;/h2&gt;
&lt;p&gt;This is ticked by default. When un-ticked, this means that when you add a new record, the relation field will automatically be populated with a link to the last &amp;lsquo;parent&amp;rsquo; item you were looking at. For example, if you edit an organisation, then move away somewhere else in the system, finally load a contacts screen and create a new contact, that contact will link to the organisation you were editing (assuming there&amp;rsquo;s a relation field linking contacts and organisations).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/sequence-field-options/&#34;&gt;similarly named option&lt;/a&gt; exists for sequence fields, to prevent auto-population of sequence numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;on-parent-delete&#34;&gt;On parent delete&lt;/h2&gt;
&lt;p&gt;This is an important option for controlling what happens when a parent record is deleted.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume we have a table of customers and one of invoices, each invoice linked to a customer by a relation field in the invoices table, so the invoice is a &amp;lsquo;child record&amp;rsquo; of the customer. What would happen if a customer is deleted? This setting controls that and there are three options.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;disallow deletion (the default)
&lt;ul&gt;
&lt;li&gt;the user is prevented from deleting the parent record. They have to manually delete the child record before being allowed to delete the parent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the safest option and the default&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;cascade delete
&lt;ul&gt;
&lt;li&gt;the user is allowed to delete the parent and when the parent is deleted, &lt;strong&gt;child records are deleted as well&lt;/strong&gt;. The user is still shown a prompt asking if they&amp;rsquo;re sure they want to do this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;make orphan
&lt;ul&gt;
&lt;li&gt;when the parent is deleted, the child record is retained, but un-linked from the parent. In our invoice/customer example, we would be left with an invoice not linked to any particular customer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that this option is set on the &lt;em&gt;child&lt;/em&gt; relation field, not on the parent side. Therefore you can have different rules for different child tables. A good practice is to set this to &lt;em&gt;disallow deletion&lt;/em&gt; for any important information in the system, that you wouldn&amp;rsquo;t want to be lost (like invoices) and for other tables choose one of the other options appropriately.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;value-to-display&#34;&gt;Value to display&lt;/h2&gt;
&lt;p&gt;The field from the parent table that easily identified the record, to show in the child editing form. For example, for the &amp;lsquo;company&amp;rsquo; relation field in a contacts table, you might select &amp;lsquo;company name&amp;rsquo;.&lt;/p&gt;
&lt;h2 id=&#34;secondary-value-to-display&#34;&gt;Secondary value to display&lt;/h2&gt;
&lt;p&gt;For additional context, a secondary identifying field from the parent record can be chosen. For example, as well as the name of a company, you may want to show the city or country they&amp;rsquo;re in.&lt;/p&gt;
&lt;p&gt;This field doesn&amp;rsquo;t have to be directly from the parent table, it can also be any field in the &lt;strong&gt;view to use&lt;/strong&gt; selected (the below option), including a calculation, which opens up more display possibilities, e.g. concatenating the values from multiple fields together.&lt;/p&gt;
&lt;h2 id=&#34;view-to-use&#34;&gt;View to use&lt;/h2&gt;
&lt;p&gt;When the user is selecting a parent record to link to a particular child, they will be able to use this view to show a list of parent records to choose from. Therefore the view must be created from the parent table.&lt;/p&gt;
&lt;p&gt;They will be able to filter on any field in the view to search for a record.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using pre-set &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/filters/&#34;&gt;view filters&lt;/a&gt; to narrow down the list of relevant records can be helpful, e.g. if only records of a certain category are required.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;use-only-given-values&#34;&gt;Use only given values&lt;/h2&gt;
&lt;p&gt;When this is un-ticked, allow the user to create a new parent record directly from the child record&amp;rsquo;s editing screen. Relation fields allow you to type the name of a parent record to find and select one. If no matches are found, a prompt will appear allowing the user to create one.&lt;/p&gt;
&lt;h2 id=&#34;show-navigation-link&#34;&gt;Show navigation link&lt;/h2&gt;
&lt;p&gt;When this is ticked (as it is by default), allow the user to navigate from a record containing this field to the one that the relation links to. For example, if a contacts table contains a relation to the organisations table, then when a user views a contact, allow them to navigate to the related organisation by clicking a navigation icon next to the field.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Calculations</title>
      <link>https://docs.agilebase.co.uk/docs/views/calculations/</link>
      <pubDate>Wed, 13 May 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/views/calculations/</guid>
      <description>
        
        
        &lt;p&gt;The ability to add calculations to a view opens up a world of possibilities. Within the confines of the SQL language, there&amp;rsquo;s no limit to what you can do, and those confines contain a pretty large space.&lt;/p&gt;
&lt;p&gt;This is the only area of Agilebase which requires some &amp;lsquo;semi-programming&amp;rsquo; to use - using snippets of SQL. SQL is a standard, widely popular and easy to learn language and there are lots of resources available on the internet.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll start with some simple examples, then move on to some more advanced ones, but even then we won&amp;rsquo;t cover every capability so will point you to specific further resources and references.&lt;/p&gt;
&lt;p&gt;But first, what are the mechanics of creating a calculation and adding it to a view?&lt;/p&gt;
&lt;h2 id=&#34;adding-a-calculation&#34;&gt;Adding a calculation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open the view you want to edit&lt;/li&gt;
&lt;li&gt;Toggle development mode on and click the big pencil at the top left of the screen&lt;/li&gt;
&lt;li&gt;Under &lt;em&gt;fields&lt;/em&gt;, from &lt;em&gt;Add Calculation&lt;/em&gt; choose a type (text, number etc.), give it a name and press &lt;em&gt;Add&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The calculation editing screen panel now open to the right and you can type in your calculation.&lt;/p&gt;
&lt;p&gt;Before doing that, we&amp;rsquo;ll quickly review the main areas of the calculation editing panel. There are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt; - you can rename the calculation at any time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt; - as opposed to a standard field, you can change the type of a calculation at any time, e.g. from text to numeric or vice versa&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Calculation definition (SQL)&lt;/strong&gt; - the actual contents of the calculation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comments or description&lt;/strong&gt; - a place for you to enter your own notes about the calculation, maybe as an explanation of how a particularly complex calculation works for example&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The other options available we will cover below.&lt;/p&gt;
&lt;p&gt;Now we can get to the fun stuff and think of a calculation.&lt;/p&gt;
&lt;h2 id=&#34;basic-examples&#34;&gt;Basic examples&lt;/h2&gt;
&lt;p&gt;Firstly, we can of course do maths. So in the calculation definition, you can enter things like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 + 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 * 3&lt;/code&gt; (multiplication)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10 / 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5 ^ 3&lt;/code&gt; (five to the power 3)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;referencing-fields&#34;&gt;Referencing fields&lt;/h2&gt;
&lt;p&gt;Calculations normally need to act on existing data. We can included references to other fields, including other calculations, in the view by writing out the field name surrounded by curly brackets.&lt;/p&gt;
&lt;p&gt;Some examples might be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{net price} * 0.2&lt;/code&gt; (calculate VAT amount)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(({sale price} - {cost}) / {cost}) * 100&lt;/code&gt; (calculate the profit of an item as a percentage)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can reference not only other fields and calculations in the view, but also fields and calculations from any view or table joined to the view. The syntax for that is &lt;code&gt;{source name.field name}&lt;/code&gt;. Underneath the calculation editing space is a list of all fields that are available to be added, for reference. You can just copy and paste them into your calculation.&lt;/p&gt;
&lt;h2 id=&#34;special-functions&#34;&gt;Special functions&lt;/h2&gt;
&lt;p&gt;In the same way that you reference fields, you can also reference some special functions that output other information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ab_tile()&lt;/code&gt; - the name of the tile the user has open (not necessarily the same as the tile the workflow view is in)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ab_view()&lt;/code&gt; - the name of the view the user has open (again, not the name of the workflow view that is running)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ab_userid()&lt;/code&gt; - the currently logged in user, in the format &amp;lsquo;Forename Surname (username)&amp;rsquo; i.e. the same format used for logging record creation metadata etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ab_userroles()&lt;/code&gt; - a comma separated list of rolenames the logged in user belongs to&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;colouring&#34;&gt;Colouring&lt;/h2&gt;
&lt;p&gt;Text calculations can be coloured in the same way as text fields. Underneath the calculation definition and words, tick &lt;em&gt;colour words&lt;/em&gt;. If a calculation outputs one of the following words, they cell in the view be coloured.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/word-colours.png&#34; alt=&#34;Word Colours&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;best-practices&#34;&gt;Best practices&lt;/h2&gt;
&lt;p&gt;A few tips for working with calculations.&lt;/p&gt;
&lt;h3 id=&#34;centralise-calculations&#34;&gt;Centralise calculations&lt;/h3&gt;
&lt;p&gt;If a particular calculation is used in a number of different views, then it&amp;rsquo;s a good idea to create it once in a &amp;lsquo;utility&amp;rsquo; view, then &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/joins/#joining-to-a-view&#34;&gt;join to that view&lt;/a&gt; from any others that want to include it.&lt;/p&gt;
&lt;p&gt;To take a simple example, a VAT calculation &lt;code&gt;{net price} * 0.2&lt;/code&gt; may be created in a &amp;lsquo;vat calculation&amp;rsquo; view. Then any view wanting to display the VAT can just join to it and include the field. If any changes to the calculation need to be made in future, they then only need to be done in one place. The benefits of this increase as calculations become more complex.&lt;/p&gt;
&lt;h3 id=&#34;avoid-mixing-aggregates-and-non-aggregates&#34;&gt;Avoid mixing aggregates and non-aggregates&lt;/h3&gt;
&lt;p&gt;Avoid mixing an &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/calculations/examples/#aggregate-calculations&#34;&gt;aggregate&lt;/a&gt; and non-aggrete parts in a single calculation. E.g. calculations of the form &lt;code&gt;sum({field 1}) + {field 2}&lt;/code&gt; should be avoided. You may find they cause errors.&lt;/p&gt;
&lt;p&gt;The recommended way to create a calculation like this is to make the aggregate part in a separate view, then join to it, as described under &lt;a href=&#34;#centralise-calculations&#34;&gt;centralise calculations&lt;/a&gt; above.&lt;/p&gt;
&lt;h3 id=&#34;splitting-complex-calculations-into-parts&#34;&gt;Splitting complex calculations into parts&lt;/h3&gt;
&lt;p&gt;If a calculation is particularly complex, you can if you like split apart into multiple calculations, to improve readability. A final calculation can then reference the parts, like e.g.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;({really complex calculation 1} + {really complex calculation 2}) / {really complex calculation 3}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The rule not to mix aggregate parts and non-aggregate parts, as above, still holds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just be aware that if you update one of the composite parts, you then need to update any calculations that depend on it. The system won&amp;rsquo;t automatically update them to reference the new version. This is due to the way the database works under the hood - it doesn&amp;rsquo;t natively support referencing one calculation from another, so we add that layer in Agilebase functionality.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;troubleshooting-errors&#34;&gt;Troubleshooting errors&lt;/h3&gt;
&lt;p&gt;If there is an error in a view, it&amp;rsquo;s more than likely the culprit is a calculation, as they are one of the more complex facilities of Agilebase and the only one where SQL can be entered by the user, as opposed to be automatically generated. You may see messages like &lt;strong&gt;view broken&lt;/strong&gt; or errors when you try to change a view e.g. move a field.&lt;/p&gt;
&lt;p&gt;Errors can occur due to data changing. Division by zero errors are automatically handled by Agilebase (null is returned), but other types of calculation can also cause errors in certain circumstances. For example if a calculation squares a field, if someone enters a really large number into that field in a particular record, then an overflow error may occur.&lt;/p&gt;
&lt;p&gt;This can be resolved by temporarily filtering out the problem data, then the view can be edited to handle the issue, or perhaps a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/data-integrity-checks/&#34;&gt;data integrity check&lt;/a&gt; can be added to disallow problem data in future.&lt;/p&gt;
&lt;p&gt;If there is a persistent issue, one way of dealing with it is to temporarily delete all the calculation definitions - you can copy and paste them somewhere else for record-keeping, perhaps into each calculation&amp;rsquo;s notes entry. Then once the view is working again, add the calculation definitions back one by one until you find the problem.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Sequence Field Options</title>
      <link>https://docs.agilebase.co.uk/docs/fields/field-options/sequence-field-options/</link>
      <pubDate>Tue, 29 Mar 2022 10:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/fields/field-options/sequence-field-options/</guid>
      <description>
        
        
        &lt;h2 id=&#34;do-not-auto-populate&#34;&gt;Do not auto-populate&lt;/h2&gt;
&lt;p&gt;When this is un-ticked, the next number in the sequence will always be generated and saved for this field, whenever a new record is created.&lt;/p&gt;
&lt;p&gt;When the option is ticked, the field value will be left blank when a new record is created. A button will appear in place of the value, which on pressed will create and save the next sequence value.&lt;/p&gt;
&lt;p&gt;One benefit of this is to allow &amp;lsquo;accidental&amp;rsquo; creation of records without using up the next value in the sequence. So for example, if an &amp;lsquo;invoice number&amp;rsquo; field has this option ticked, creating an invoice and then immediately deleting it won&amp;rsquo;t use up a sequence value, leaving a gap.&lt;/p&gt;
&lt;p&gt;Note that if records are created by a background workflow, this option will be overriden and sequence values will always be generated and saved. The assumption is that automated workflows will always create the correct records.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Options</title>
      <link>https://docs.agilebase.co.uk/docs/views/options/</link>
      <pubDate>Sun, 22 May 2022 16:00:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/views/options/</guid>
      <description>
        
        
        &lt;p&gt;Some options control the interface that a user sees (whether it&amp;rsquo;s displayed in rows and columns, with headings, or as cards in columns for example) and others affect the contents of the view, i.e. which data records it contains.&lt;/p&gt;
&lt;p&gt;Both types of option are accessed from the view as follows, we&amp;rsquo;ve just split them into the two types in this documentation for easy understanding.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In development mode, open a view (or open a view then toggle development mode on with the toggle switch at the top right of the screen)&lt;/li&gt;
&lt;li&gt;Click the big pencil icon at the top left and select &lt;em&gt;properties and options&lt;/em&gt; from the menu&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Display Options</title>
      <link>https://docs.agilebase.co.uk/docs/views/options/display-options/</link>
      <pubDate>Sun, 22 May 2022 16:00:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/views/options/display-options/</guid>
      <description>
        
        
        &lt;h2 id=&#34;show-charts-by-default&#34;&gt;Show charts by default&lt;/h2&gt;
&lt;p&gt;When a user opens this view, immediately show charts rather than data rows&lt;/p&gt;
&lt;h2 id=&#34;interface---inline-editing&#34;&gt;Interface -&amp;gt; inline editing&lt;/h2&gt;
&lt;p&gt;The goal of this feature is to allow rapid and efficient editing of data when in the list view so there’s no need to drill down into a record to edit and back to the list again after each.&lt;/p&gt;
&lt;p&gt;Some examples of where this might be useful would be when working through a list of milestones to update statuses, or when in a list of stock items to update quantities.&lt;/p&gt;
&lt;p&gt;In inline editing mode, the list view changes from something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/inline-editing-off-new.png&#34; alt=&#34;inline editing off&#34;&gt;&lt;/p&gt;
&lt;p&gt;into this editable version:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/inline-editing-on-new.png&#34; alt=&#34;inline editing on&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Certain fields will be editable&lt;/strong&gt;, but others will be read-only.&lt;/p&gt;
&lt;p&gt;Fields that can be editable are all those which are from the view’s parent table as well as the display fields of relations in that table.&lt;/p&gt;
&lt;p&gt;For example, if editing a list of contacts, then the contact name, email, phone number etc. would be editable as well as the organisation name, if the contacts table had a relation field linking to the organisations table, which had &lt;em&gt;organisation name&lt;/em&gt; as its display field.&lt;/p&gt;
&lt;p&gt;Fields that will not be editable are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;calculations&lt;/li&gt;
&lt;li&gt;fields from other tables joined to the view, except relation display fields as above&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The inline editing option has three states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disallow: the view can’t be inline edited&lt;/li&gt;
&lt;li&gt;Allow but turn off by default&lt;/li&gt;
&lt;li&gt;On by default&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;interface---cards-in-columns&#34;&gt;Interface -&amp;gt; cards in columns&lt;/h2&gt;
&lt;p&gt;When &lt;em&gt;cards in columns&lt;/em&gt; is selected, the display switches from showing each record as a row, to showing each as a card in a column.&lt;/p&gt;
&lt;p&gt;The column names are generated from the first dropdown field in the view (there must be at least one dropdown field in the view for this to work).&lt;/p&gt;
&lt;p&gt;Each available option in the dropdown becomes a column. Each record is placed, as a card, in the column which matches the dropdown value for that record.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/cards.png&#34; alt=&#34;the cards interface&#34;&gt;&lt;/p&gt;
&lt;p&gt;Dragging a card from one column to another updates that record, changing the value of the dropdown field to match the column.&lt;/p&gt;
&lt;h3 id=&#34;vertical-grouping-within-a-column&#34;&gt;Vertical grouping within a column&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s also possible to sub-divide each column into groups. To achieve that, simply set up the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/text-field-options/#specifying-dropdown-lists-and-tags-fields&#34;&gt;available options&lt;/a&gt; in the dropdown to have prefixes separated by a dot.&lt;/p&gt;
&lt;p&gt;E.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.1) column one, group 1&lt;/li&gt;
&lt;li&gt;1.2) column one, group 2&lt;/li&gt;
&lt;li&gt;2.1) column two, group 1&lt;/li&gt;
&lt;li&gt;2.2) column two, group 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, cards can be dragged to different groups, not just different columns.&lt;/p&gt;
&lt;h2 id=&#34;style-layout-options&#34;&gt;Style (layout options)&lt;/h2&gt;
&lt;p&gt;The visual style affects whether a list of rows is shown with headings or not. This is not used when the cards option above is active.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spreadsheet format - standard output in rows (no headings, the default option)&lt;/li&gt;
&lt;li&gt;headings and rows&lt;/li&gt;
&lt;li&gt;long headings and rows&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When &lt;strong&gt;headings and rows&lt;/strong&gt; is selected, the first field in the view will be used as a heading for the rows below. A new heading appears every time the field value changes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/headings-new.png&#34; alt=&#34;headings and rows&#34;&gt;&lt;/p&gt;
&lt;p&gt;When &lt;strong&gt;long headings and rows&lt;/strong&gt; is selected, an amalgamation of content from the first fields in the view that all belong to the view&amp;rsquo;s parent table will be used as a heading. As soon as a field is encountered that is from a different table, heading text generation stops. Calculations that are added to the view can also form part of a heading, as long as they are placed next to (before, after or within) that first set of fields from the view&amp;rsquo;s parent table.&lt;/p&gt;
&lt;p&gt;For example, if the fields in a view of organisations and contacts are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Organisation name (from the organisations table)&lt;/li&gt;
&lt;li&gt;Website address (from the organisations table)&lt;/li&gt;
&lt;li&gt;Contact Name (from the contacts table)&lt;/li&gt;
&lt;li&gt;Email address (from the contacts table)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;then a heading would be generated consisting of organisation and website address. Each time a row where one of these is different is encountered, a new heading row will be shown.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Behaviour Options</title>
      <link>https://docs.agilebase.co.uk/docs/views/options/behaviour-options/</link>
      <pubDate>Sun, 22 May 2022 16:00:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/views/options/behaviour-options/</guid>
      <description>
        
        
        &lt;h2 id=&#34;group-by-all-non-aggregate-fields&#34;&gt;Group by all non-aggregate fields&lt;/h2&gt;
&lt;p&gt;Affects how some calculation aggregates worked - documented in &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/calculations/examples/#aggregates-of-child-rows&#34;&gt;calculations -&amp;gt; aggregates of child rows&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;allow-exports&#34;&gt;Allow exports&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/exporting/&#34;&gt;Security And Compliance -&amp;gt; Exporting&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;record-limit&#34;&gt;Record limit&lt;/h2&gt;
&lt;p&gt;Only return the top N rows of data from the view, even if there are more available. This is equivalent to adding a &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-select.html#SQL-LIMIT&#34;&gt;LIMIT clause&lt;/a&gt; in SQL.&lt;/p&gt;
&lt;h2 id=&#34;distinct-fields&#34;&gt;Distinct fields&lt;/h2&gt;
&lt;p&gt;If many rows in the view have the same values for a particular field, then reduce the number shown to only one row for every distinct (unique) value of that field. The top row is returned.&lt;/p&gt;
&lt;p&gt;Multiple distinct fields can be added, in which case the rows reduce based on their values unique in combination.&lt;/p&gt;
&lt;p&gt;For example, imagine you have a view showing countries, cities and populations, sorted by population descending, with data like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Japan, Tokyo, 13,515,271&lt;/li&gt;
&lt;li&gt;Japan, Nagoya, 2,283,289&lt;/li&gt;
&lt;li&gt;UK, London, 8,908,081&lt;/li&gt;
&lt;li&gt;UK, Bristol, 463,400&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adding a distinct field on the country would reduce this to the most populated city in each country, i.e.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Japan, Tokyo, 13,515,271&lt;/li&gt;
&lt;li&gt;UK, London, 8,908,081&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DISTINCT is an &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-select.html#SQL-DISTINCT&#34;&gt;SQL feature&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;amalgamate-with&#34;&gt;Amalgamate with&lt;/h2&gt;
&lt;p&gt;If you have two views with fields of the same type in the same order, then you can merge them together into one. The field names don&amp;rsquo;t necessarily need to be the same.&lt;/p&gt;
&lt;p&gt;This is done using an &lt;a href=&#34;https://www.sqltutorial.org/sql-union/&#34;&gt;SQL UNION&lt;/a&gt; clause.&lt;/p&gt;
&lt;h2 id=&#34;cache-view-rows&#34;&gt;Cache view rows&lt;/h2&gt;
&lt;p&gt;Caching can speed up views. It doesn&amp;rsquo;t need to be used often as the underlying database PostgreSQL is great at dealing with large data problems, but when it is necessary it can significantly speed up access, allowing faster loading and searching. Caching works well when&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a view is complex and slow to load&lt;/li&gt;
&lt;li&gt;it doesn&amp;rsquo;t contain a massive number of rows - in this case the issue is likely to be the raw volume of data, rather than the complexity of calculations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If both those criteria are met, then turning on caching can significantly speed a view up, allowing faster loading and searching. There are three options&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no caching (the default)&lt;/li&gt;
&lt;li&gt;cache view, update on record save
&lt;ul&gt;
&lt;li&gt;this means when a view is opened or searched, if there have been changes to data in any tables used by the view since it was last opened, then the cache will be updated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cache view, update once a day
&lt;ul&gt;
&lt;li&gt;useful for views that don&amp;rsquo;t need to be updated often, e.g. monthly reporting figures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If a view is cached and other views reference it, those other views will also speed up too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Caching is implemented using &lt;a href=&#34;https://en.wikipedia.org/wiki/Materialized_view&#34;&gt;materialized views&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you find a view is slow, feel free to &lt;a href=&#34;https://agilechilli.com/contact-us/&#34;&gt;contact us&lt;/a&gt; for support before trying options like caching, there are many other targeted options we can look at first, such as adding indexes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;query-plan&#34;&gt;Query Plan&lt;/h2&gt;
&lt;p&gt;The majority of the time you will not need to change this setting. However here&amp;rsquo;s what it does in case you do:&lt;/p&gt;
&lt;p&gt;When getting data from a view (the list of rows), the database internally uses a &lt;a href=&#34;https://www.postgresql.org/docs/current/planner-optimizer.html&#34;&gt;query planner&lt;/a&gt;. The planner works out the quickest way to return the results, as for complex queries there may be many possible ways.&lt;/p&gt;
&lt;p&gt;Most of the time that works very well, in fact increasingly well with each new release of the PostgreSQL database. However sometimes a sub-optimal plan can be used, resulting in a slow view. Agilebase then automatically tries out an alternative (specifically, disabling the use of &amp;lsquo;&lt;a href=&#34;https://www.postgresql.org/docs/14/runtime-config-query.html&#39;&#34;&gt;nested loops&lt;/a&gt; to see if that&amp;rsquo;s faster and sets this option if so.&lt;/p&gt;
&lt;p&gt;This option only needs to be changed if the Agilebase detection fails (which is possible, query timing can depend on many factors, such as how many other queries the database is running at the time), resulting in a slower view rather than a faster one.&lt;/p&gt;
&lt;p&gt;In that case, you can experiment by changing the setting from &amp;lsquo;default&amp;rsquo; to &amp;lsquo;alternative&amp;rsquo; or vice versa.&lt;/p&gt;
&lt;p&gt;As above, feel free to &lt;a href=&#34;https://agilechilli.com/contact-us/&#34;&gt;contact us&lt;/a&gt; if you have any questions about improving database performance.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Tabs</title>
      <link>https://docs.agilebase.co.uk/docs/views/special-uses/tabs/</link>
      <pubDate>Wed, 13 May 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/views/special-uses/tabs/</guid>
      <description>
        
        
        &lt;p&gt;Where there is &amp;lsquo;child&amp;rsquo; data related to a parent table, e.g. a contact belonging to an organisation, a list of child records can be shown in a tab in the parent record.&lt;/p&gt;
&lt;p&gt;A view can specify which records are shown. Perhaps some should be filtered out, like e.g. contacts who no longer work at the organisation - &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/filters/&#34;&gt;view filters&lt;/a&gt; can accomplish that.&lt;/p&gt;
&lt;p&gt;The fields of the view are what&amp;rsquo;s shown in data rows in the tab.&lt;/p&gt;
&lt;p&gt;Additionally, a separate view can be set in the tab options, to allow for creating records to populate the tab with an initial set of data.&lt;/p&gt;
&lt;p&gt;For more information on setting this all up, see &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/tabs/&#34;&gt;table tabs&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Importing from spreadsheet</title>
      <link>https://docs.agilebase.co.uk/docs/integrations/importing/</link>
      <pubDate>Wed, 03 Jun 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/integrations/importing/</guid>
      <description>
        
        
        &lt;p&gt;Agilebase allows data to be imported from CSV (Comma Separated Variable) files. All popular spreadsheet software can save data in this format.&lt;/p&gt;
&lt;p&gt;Anyone with &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/privileges/&#34;&gt;&lt;strong&gt;develop&lt;/strong&gt; privileges&lt;/a&gt; on a table can import data into it.&lt;/p&gt;
&lt;p&gt;In the tiles interface, load any view created from the table to import into. Scroll to the bottom of the rows and press the cloud import icon, then follow through the prompts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/import-link.png&#34; alt=&#34;import link&#34;&gt;&lt;/p&gt;
&lt;p&gt;Data can be imported in two ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert all new records&lt;/li&gt;
&lt;li&gt;update existing records&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inserting new records will create a new record in the database for every line in the CSV file. Updating existing records will attempt to match each line in the file with an existing record and update all field values from the CSV. This can be useful when merging in data from an external source, or exporting, altering with a third party system and re-importing. Another use can be updating one field based on another - you can &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/exporting/&#34;&gt;export&lt;/a&gt;, update the fields as necessary and re-import.&lt;/p&gt;
&lt;p&gt;In either case, the CSV file must contain fields in the same order as they are in the table being imported into. The column titles don’t need to be the same though, it’s the order which is important. The import screen will show you the column order which is necessary.&lt;/p&gt;
&lt;h2 id=&#34;updating-existing-records&#34;&gt;Updating existing records&lt;/h2&gt;
&lt;p&gt;When updating records, a key field must be selected to match records up. This can be any field that has the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/common-options/#unique&#34;&gt;unique&lt;/a&gt; property set. Alternatively the internal Agilebase rowID can be used. This field is included as the first field in any data export.&lt;/p&gt;
&lt;p&gt;Sometimes, admins will want to do an export -&amp;gt; modify spreadsheet -&amp;gt; re-import workflow. This is straightforward:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Export from the admin interface by clicking the table containing the data you want to modify and clicking the &lt;em&gt;export&lt;/em&gt; button in the top toolbar.&lt;/li&gt;
&lt;li&gt;Open the spreadsheet, making any modifications you need. The first column will be the internal ID for each record, keep this, it will be needed when re-importing.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Note it will be hidden - you can un-hide it in the spreadsheet for clarity&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Blank out (remove content from) any columns which you haven’t updated. Otherwise if people have updated them since your export, you will overwrite their changes.&lt;/li&gt;
&lt;li&gt;Re-import using an ‘update’ type import as above. Select &lt;em&gt;use internal Agilebase row IDs to identify records&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;notes-on-special-fields&#34;&gt;Notes on special fields&lt;/h2&gt;
&lt;p&gt;For a file field, please leave an empty column in the spreadsheet in that position. If you wish to do a bulk upload of many images or documents, please contact &lt;a href=&#34;https://agilechilli.com/contact-us/&#34;&gt;support&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Columns for &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-types/special-field-types/separators/&#34;&gt;separator&lt;/a&gt; and &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-types/special-field-types/referenced-data/&#34;&gt;referenced data&lt;/a&gt; fields should not be included in the import spreadsheet as these field types don&amp;rsquo;t store data.&lt;/p&gt;
&lt;p&gt;Data can be imported into &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-types/special-field-types/comment-feeds/&#34;&gt;comment fields&lt;/a&gt; as per any other field.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
