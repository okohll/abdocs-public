<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>agileBase docs â€“ Principal Architect</title>
    <link>https://docs.agilebase.co.uk/tags/principal-architect/</link>
    <description>Recent content in Principal Architect on agileBase docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 20 Jun 2021 09:20:00 +0100</lastBuildDate>
    
	  <atom:link href="https://docs.agilebase.co.uk/tags/principal-architect/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Logging in from an app</title>
      <link>https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/app_login/</link>
      <pubDate>Sun, 20 Jun 2021 09:20:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/app_login/</guid>
      <description>
        
        
        &lt;p&gt;It&amp;rsquo;s possible for a developer to create a third party application, for example a phone or tablet app, that communicates with agileBase via the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/integrations&#34;&gt;API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now to use the API, you don&amp;rsquo;t need to authenticate as a user, as long as the app has the correct Authorization key(s), it can read and write data to agileBase.&lt;/p&gt;
&lt;p&gt;However, in some cases the app may need to confirm that someone has a valid agileBase account before allowing them to use the app. This may or may not be necessary depending on the use case, for example depending on whether the app is free to use for anyone, or must be limited to paying customers.&lt;/p&gt;
&lt;p&gt;To validate a user, the app must redirect them to the agileBase login page, let them log in and confirm that was successful. Therefore, a HTTP client is necessary - this can be a &amp;lsquo;web view component&amp;rsquo; or a programmatic client such as the &lt;a href=&#34;https://hc.apache.org/&#34;&gt;Apache HTTP Client&lt;/a&gt; for &lt;a href=&#34;https://en.wikipedia.org/wiki/Java_%28programming_language%29&#34;&gt;Java&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this example, we&amp;rsquo;ll use the &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/react-native-webview&#34;&gt;Native Web View&lt;/a&gt; but the principle is the same for any programming language or library.&lt;/p&gt;
&lt;h2 id=&#34;general-principle&#34;&gt;General Principle&lt;/h2&gt;
&lt;p&gt;The application must reproduce the same login process as a human would, using a HTTP client. Importantly, the HTTP client must support cookies, as the login process depends on them, in particular setting a &lt;code&gt;JSESSIONID&lt;/code&gt; cookie.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make a request to load the page &lt;a href=&#34;https://appserver.gtportalbase.com/agileBase/AppController.servlet?return=user_details&#34;&gt;https://appserver.gtportalbase.com/agileBase/AppController.servlet?return=user_details&lt;/a&gt;. This will return the login page and set the cookie value.&lt;/li&gt;
&lt;li&gt;Submit the login form using the user&amp;rsquo;s username and password. If using a programattic process i.e. making the calls from code rather than using a web view, this means making a form POST to &lt;code&gt;/agileBase/j_security_check&lt;/code&gt; with the parameters &lt;code&gt;j_username&lt;/code&gt; and &lt;code&gt;j_password&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Detect whether the login&amp;rsquo;s successful. If not, the standard agileBase login failure page will be returned&lt;/li&gt;
&lt;li&gt;If successful, a HTML page will be returned containing three hidden input fields, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;forename&lt;/code&gt;, &lt;code&gt;surname&lt;/code&gt; containing relevant details for the logged in user. If being called from a React Native Web View, the page will also post back messages to React using this JavaScript:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;if (window.ReactNativeWebView) {
    window.ReactNativeWebView.postMessage(&amp;quot;username:&amp;quot; + username);
    window.ReactNativeWebView.postMessage(&amp;quot;forename:&amp;quot; + forename);
    window.ReactNativeWebView.postMessage(&amp;quot;surname:&amp;quot; + surname);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s a full example of a login.js page using the React Native Web View. NB this is an example taken from a full application, so you will need to modify it / strip it back to suit your needs, before it can be run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//Node imports
import React, {useEffect, useRef, useState} from &#39;react&#39;;
import {View, StatusBar, Image, ImageBackground, ScrollView} from &#39;react-native&#39;;

//Local imports
import {styles} from &#39;../../../styles/loginStyles&#39;;
import {Images, Colors, Constants, Language} from &#39;../../../common&#39;;
import {useNetInfo} from &amp;quot;@react-native-community/netinfo&amp;quot;;
import { WebView } from &#39;react-native-webview&#39;;
import {useDispatch, useSelector} from &#39;react-redux&#39;;
import {updateUserData} from &#39;../../../redux/actions/commonAction&#39;;
import commonFunctions from &#39;../../../common/commonFunctions&#39;;
import SplashScreen from &#39;react-native-splash-screen&#39;
const {fontSize, fontFamily, Window} = Constants;

const LoginScreen = (props) =&amp;gt; {
    const dispatch = useDispatch();
    const {user_data} = useSelector(state =&amp;gt; state);
    const netInfo = useNetInfo();

    useEffect(function () {
        SplashScreen.hide();
        console.log(&#39;netInfo==============&#39;, netInfo)
        if(netInfo?.isInternetReachable || netInfo?.details != null){
            checkUser();
        }
    }, [netInfo, user_data]);

    const checkUser = () =&amp;gt; {
        if(user_data &amp;amp;&amp;amp; user_data?.forename &amp;amp;&amp;amp; user_data?.surname &amp;amp;&amp;amp; user_data?.username){
            goToNextPage();
        }
        console.log(&#39;user_data&#39;, user_data)
    }

    const goToNextPage = async () =&amp;gt; {
        await commonFunctions.removeTimeStamp();
        navigateToNextPage();
    }

    const onResponseFromWebView = (event) =&amp;gt; {
        const eventData = event.nativeEvent.data;
        console.log(&#39;eventData&#39;, eventData);
        if (eventData.includes(&#39;username&#39;)) {
            dispatch(updateUserData({username: eventData.split(&#39;username:&#39;)[1]}));
        } else if (eventData.includes(&#39;forename&#39;)) {
            dispatch(updateUserData({forename: eventData.split(&#39;forename:&#39;)[1]}));
        } else if (eventData.includes(&#39;surname&#39;)) {
            dispatch(updateUserData({surname: eventData.split(&#39;surname:&#39;)[1]}));
        }
    }

    const navigateToNextPage = () =&amp;gt; {
        if (netInfo?.isInternetReachable) {
            return props.navigation.navigate(&#39;Loading&#39;);
        }
        return props.navigation.navigate(&#39;MyApplicationPage&#39;);
    }

    return (
        &amp;lt;View style={styles.container}&amp;gt;
            &amp;lt;StatusBar backgroundColor={Colors.black} barStyle={&#39;dark-content&#39;}/&amp;gt;
            {(netInfo?.isInternetReachable &amp;amp;&amp;amp; !user_data?.surname) ?
                &amp;lt;WebView
                    source={{uri: &#39;https://appserver.gtportalbase.com/agileBase/AppController.servlet?return=user_details&#39;}}
                    onMessage={onResponseFromWebView}
                    textZoom={100}
                    sharedCookiesEnabled={true}
                /&amp;gt; :
                &amp;lt;View style={styles.loadingImage}&amp;gt;
                    &amp;lt;Image source={Images.logo}/&amp;gt;
                &amp;lt;/View&amp;gt;
            }
        &amp;lt;/View&amp;gt;
    );
};

export default LoginScreen;
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Changing Field Types</title>
      <link>https://docs.agilebase.co.uk/docs/fields/field-types/changing-field-types/</link>
      <pubDate>Fri, 24 Apr 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/fields/field-types/changing-field-types/</guid>
      <description>
        
        
        &lt;p&gt;Once a field has been created, the type can&amp;rsquo;t be changed with the flick of a switch. However there is an easy to follow process to accomplish this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rename the field to &lt;code&gt;[fieldname] old&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a new field &lt;code&gt;[fieldname]&lt;/code&gt;. This means that any calculations that reference the field won&amp;rsquo;t have to be changed and won&amp;rsquo;t break due to mis-matching field names&lt;/li&gt;
&lt;li&gt;Copy all values from one field to another. The easiest way is to use a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/workflows/&#34;&gt;workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Try to delete the old field. If any views reference it, the delete will fail and a list of them will be shown&lt;/li&gt;
&lt;li&gt;Edit all those views
&lt;ul&gt;
&lt;li&gt;remove the old field and add the new, to all fields, filters etc.&lt;/li&gt;
&lt;li&gt;update all calculations that reference the field e.g. add a space to the end of all of them. That will refresh them to reference the new field rather than the old&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Finally, delete the old field&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Before starting, it will be worth ensuring that data won&amp;rsquo;t change during the process, for example by making the data read-only to all users, or requesting they don&amp;rsquo;t edit field values until finished.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Send Data to a third party via API</title>
      <link>https://docs.agilebase.co.uk/docs/workflows/send-data-to-a-third-party-via-api/</link>
      <pubDate>Fri, 29 May 2020 12:35:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/workflows/send-data-to-a-third-party-via-api/</guid>
      <description>
        
        
        &lt;p&gt;When integrating agileBase with third party systems, the API is really useful. Programmers can use it to send data to websites, to other software such as PowerBI, a  Business Intelligence tool, or to external systems such as label/barcode printers for example. The opportunities are endless.&lt;/p&gt;
&lt;p&gt;agileBase can either â€˜pushâ€™ data to a third party system, or have the third party system â€˜pullâ€™ it out.&lt;/p&gt;
&lt;p&gt;Whatâ€™s the difference? Simply put, if pulling, a third party system has to regularly ask, or &amp;lsquo;poll&amp;rsquo;, agileBase whether thereâ€™s any new data. It may do this once an hour, once every few minutes or however often it needs. That means extra work for both systems. New data may be reasonably infrequent but when it is there you want it to be transferred quickly, which means polling often even when thereâ€™s nothing to send.&lt;/p&gt;
&lt;p&gt;Conversely, with â€˜pushâ€™, agileBase sends a message to the third party system &lt;strong&gt;only when thereâ€™s relevant data to send&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;push&#34;&gt;PUSH&lt;/h2&gt;
&lt;p&gt;When using push, calls are made only when necessary. Further, you can specify in the settings the maximum number of calls to make per day, so you can control the maximum possible cost. You can set it to anything from once every 5 minutes to once a day. Different integrations may require more or less timely data. For example invoice totals may be ok to push to an accounting system once a day but individual customer orders may be best sent as soon as theyâ€™re received.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.agilebase.co.uk/docs/integrations/setting-up-the-push-api/&#34;&gt;More detail about setting up a PUSH API can be found here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pull&#34;&gt;Pull&lt;/h2&gt;
&lt;p&gt;Connections to agileBase are made using standard HTTP calls. This makes it easy for developers in any language, so PHP, Java, even JavaScript in a browser can be used.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.agilebase.co.uk/docs/integrations/setting-up-the-pull-api/&#34;&gt;More detail about setting up a PULL API can be found here&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Authenticating users via the API</title>
      <link>https://docs.agilebase.co.uk/docs/integrations/testing-a-login/</link>
      <pubDate>Tue, 19 Jan 2021 12:41:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/integrations/testing-a-login/</guid>
      <description>
        
        
        &lt;p&gt;Sometimes when developing an app that integrates with agileBase, you may want to allow it to query the system to check the login details a user provides. In other words, let a user &amp;lsquo;log in&amp;rsquo; via your app.&lt;/p&gt;
&lt;p&gt;The API mechanisms described in this section (push, pull etc.) don&amp;rsquo;t require a login to use, they work only via the API keys as described, however your app may still wish to test a users login to ensure they are a valid user.&lt;/p&gt;
&lt;p&gt;To do that, the third party app must act exactly as if it were a web browser allowing the user to log in. In other words it must follow this process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Visit &lt;a href=&#34;https://appserver.gtportalbase.com/agileBase/AppController.servlet?return=user_details&#34;&gt;https://appserver.gtportalbase.com/agileBase/AppController.servlet?return=user_details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The page will return a login form and a cookie JSESSIONID&lt;/li&gt;
&lt;li&gt;Post the form i.e. submit values j_username and j_password, along with the cookie&lt;/li&gt;
&lt;li&gt;If the username and password are correct, a JSON object will be returned in the response, containing the user&amp;rsquo;s details. If not, an error page will be returned&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;resources--examples&#34;&gt;Resources / Examples&lt;/h2&gt;
&lt;h3 id=&#34;java&#34;&gt;Java&lt;/h3&gt;
&lt;p&gt;See section &lt;strong&gt;Form Login with Cookies&lt;/strong&gt; of &lt;a href=&#34;https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_form_based_login.htm&#34;&gt;https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_form_based_login.htm&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;react&#34;&gt;React&lt;/h3&gt;
&lt;p&gt;Use the &amp;lsquo;react-cookie&amp;rsquo; package: &lt;a href=&#34;https://www.npmjs.com/package/react-cookies&#34;&gt;https://www.npmjs.com/package/react-cookies&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;Use the &amp;lsquo;urllib2&amp;rsquo; library: &lt;a href=&#34;https://stackoverflow.com/questions/301924/python-urllib-urllib2-httplib-confusion&#39;&#34;&gt;https://stackoverflow.com/questions/301924/python-urllib-urllib2-httplib-confusion&#39;&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Creating user accounts with the API</title>
      <link>https://docs.agilebase.co.uk/docs/integrations/creating-user-accounts/</link>
      <pubDate>Wed, 14 Apr 2021 10:41:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/integrations/creating-user-accounts/</guid>
      <description>
        
        
        &lt;p&gt;Normally, a user account can only be created by a system administrator - see &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/users/#adding-a-user&#34;&gt;adding a user&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However there&amp;rsquo;s one special case in which the organisation runs a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/roles/#multi-tenanting&#34;&gt;multi-tenanted&lt;/a&gt; agileBase account. In that case, you can use an API call to create a new tenant in the account and new user(s) for that tenant.&lt;/p&gt;
&lt;p&gt;For example, imagine your organisation is a body for football clubs around the country, where each club was a tenant, i.e. each club had users who could log in, but only see data from their own club. In that case, the user creation API could be called to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a new club&lt;/li&gt;
&lt;li&gt;create an initial user (or users) for that club&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;
&lt;p&gt;Before calling the API, you have to configure the system to allow it to be used. In the administrator user interface:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Expand the &lt;em&gt;Administration&lt;/em&gt; menu in the lefthand sidebar&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;company&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click your company name then the pencil icon in the toolbar to edit the details&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In &lt;em&gt;Multi-tenanting field name (optional)&lt;/em&gt;, type in the field name that your system uses to differentiate tenants, e.g. &amp;ldquo;account name&amp;rdquo;. See &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/roles/#multi-tenanting&#34;&gt;multi-tenanting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Refresh the page and an API key will appear. We will need this to call the API as below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To disable the API at any point, just delete the value you entered into &lt;em&gt;Multi-tenanting field name (optional)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;calling-the-api&#34;&gt;Calling the API&lt;/h2&gt;
&lt;p&gt;Use URL &lt;a href=&#34;https://ab.agilechilli.com/agileBase/Public.ab&#34;&gt;https://ab.agilechilli.com/agileBase/Public.ab&lt;/a&gt;. You should make a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&#34;&gt;POST&lt;/a&gt; request with encoding &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Authorization&lt;/code&gt; header needs to be set to the API key as above.&lt;/p&gt;
&lt;p&gt;The following paramaters are required&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;c: this identifies your company account and will always be the same. It will be shown in the company editing screen used in preparation, above&lt;/li&gt;
&lt;li&gt;create_tenant: true&lt;/li&gt;
&lt;li&gt;json&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The value of the json parameter is a JSON object, defined below.&lt;/p&gt;
&lt;p&gt;In the below format, &lt;code&gt;multi-tenanting fieldname&lt;/code&gt; is the name of the field used to differentiate tenants with spaces replaced with underscores, e.g. &amp;lsquo;account_name&amp;rsquo;. The &lt;code&gt;multi-tenanting value&lt;/code&gt; is the name of the tenant you wish to create with this particular API call. A multi-tenanting role will be created named &amp;lsquo;cust &lt;code&gt;multi-tenanting value&lt;/code&gt;&amp;rsquo;. E.g. if the value is &amp;lsquo;spurs&amp;rsquo;, the role will be named &amp;lsquo;cust spurs&amp;rsquo;. The value should be a lowercase string consisting only of letters from a through to z and numbers.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;users&lt;/code&gt; property is an array of users. Each user will be created and assigned to the above multi-tenanting role, so they can only see data belonging to them and other users of that role. The user will need a valid &lt;code&gt;email address&lt;/code&gt; in order to perform a password reset so they can log in.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;customui&lt;/code&gt; property refers to the option to &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/users/#use-the-custom-agilechilli-ui-rather-than-agilebases&#34;&gt;apply a custom logo and login screen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For each user, the &lt;code&gt;roles&lt;/code&gt; parameter is a comma separated list of internal role IDs, or role names. In addition to the multi-tenanting role, they will also be assigned these roles. They could be e.g. &amp;lsquo;manager&amp;rsquo;, &amp;lsquo;sales rep&amp;rsquo; or &amp;lsquo;accounts dept&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;For each user, &lt;code&gt;tiles&lt;/code&gt; is an array of the tiles the user should see on screen when they log in.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;[multi-tenanting fieldname]&amp;quot;: &amp;quot;[multi-tenanting value]&amp;quot;,
  &amp;quot;users&amp;quot;: [
    {
      &amp;quot;username&amp;quot;: &amp;quot;[username&amp;quot;,
      &amp;quot;forename&amp;quot;: &amp;quot;[forename]&amp;quot;,
      &amp;quot;surname&amp;quot;: &amp;quot;[surname]&amp;quot;,
      &amp;quot;email&amp;quot;: &amp;quot;[email address]&amp;quot;,
      &amp;quot;customui&amp;quot;: [true/false],
      &amp;quot;roles&amp;quot;: &amp;quot;[comma separated list of role names]&amp;quot;,
      &amp;quot;tiles&amp;quot;: [
        {
          &amp;quot;tiletype&amp;quot;: &amp;quot;comment_stream / calendar / data_link / files&amp;quot;,
          &amp;quot;colour&amp;quot;: &amp;quot;blue / yellow / green / purple / pink / turquoise / blue2 / yellow2 / green2 / purple2 / pink2 / turquoise2&amp;quot;,
          &amp;quot;internaltilename&amp;quot;: &amp;quot;[for data_link or files tiles, identifies the tile to add]&amp;quot;
        },
        { ... }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On a successful call, the JSON&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
&amp;quot;result&amp;quot;: &amp;quot;ok&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will be returned, with a 200 HTTP status code. If there is an error,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
&amp;quot;error&amp;quot;: true,
&amp;quot;type&amp;quot;: &amp;quot;[class of error]&amp;quot;,
&amp;quot;message&amp;quot;: &amp;quot;[error message]&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will be returned and the HTTP status code will reflect the error.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
