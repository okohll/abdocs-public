[{"body":"In these pages you can find details of how to set up users, roles, and privileges in Agilebase. Agilebase has an extensive role-based permissions system that enables fine-grained permissions and roles to be used.\nTables of data can also be marked as containing commercially sensitive or personal data, relevant to GDPR and affecting application behaviour.\n","categories":"","description":"Setting up users, roles, privileges and related considerations","excerpt":"Setting up users, roles, privileges and related considerations","ref":"/docs/security-and-compliance/security-features/","tags":["Software Architect","v6"],"title":"Security Features"},{"body":"The sections to the left cover the full range of functionality of Agilebase. Concepts are covered roughly in the order in which they are useful, from top to bottom, but if you want a guided tour to get started, then a quick start guides section is coming soon.\nWhen developing applications using Agilebase itself, you’ll frequently see question mark icons on screen. These directly link to the relevant pages of this documentation.\nFurther support If there’s an area you find the documentation doesn’t cover sufficiently, please let us know at support@agilechilli.com. We’ll try to improve it and answer your question.\nWe invite all users to join our community support forum. That is a space where customers and partners can share tips or request support. It’s a real-time chat facility and we’ll reply to any relevant queries.\nNote that access to the support forum is by invitation, to join please follow these steps and we’ll get you set up.\nCreate an account at https://app.element.io/ Contact us at support@agilechilli.com to let us know your username and we’ll invite you into the forum As well as support, the forum contains announcements of upcoming features, new releases etc.\n","categories":"","description":"Reference documentation for business software development using Agilebase","excerpt":"Reference documentation for business software development using …","ref":"/docs/","tags":"","title":"Docs"},{"body":"There’s lots to get your teeth into with Agilebase, but this guide will give you a quick start.\n","categories":"","description":"","excerpt":"There’s lots to get your teeth into with Agilebase, but this guide …","ref":"/guides/","tags":"","title":"Guides"},{"body":"Our ambition is to create a Low Code / No Code platform that can support truly ambitious organisations to build their back office across the three phases of their development; startup, scaleup and growth.\nAgilebase is our uniquely fast, friendly and flexible cloud-based platform, built to turn this into reality. It provides a massively scalable and secure foundation on which to build enterprise-class software, fast.\nWith over 30 person-years of development baked in, there’s not a lot it can’t do.\n","categories":"","description":"","excerpt":"Our ambition is to create a Low Code / No Code platform that can …","ref":"/introduction/","tags":"","title":"Introduction"},{"body":"These days, the majority of many people’s time at work consists of interacting with and through software. There’s really no need for the software itself to make this a frustrating or dull process, rather it should provide a helpful and friendly environment.\nOur team has used their expertise and research to develop interfaces that are not only effective and efficient but a joy to use.\nThis documentation site is about use Agilebase to build software as opposed to use it, but to give a flavour of how user interfaces feel to users, here are a couple of examples of built applications.\nVideo agile:NPDtech is a software application for food manufacturers built using the Agilebase platform. Here’s a quick video of some of the user interface.\nScreenshots Here are some example screenshots from a CRM system built with Agilebase\nManagement reporting A calendar, in year grid view Charting A document library Editing a record ","categories":"","description":"","excerpt":"These days, the majority of many people’s time at work consists of …","ref":"/the-user-experience/","tags":"","title":"The User Experience"},{"body":"People from many different backgrounds use Agilebase to create software that solves problems for them and their organisations. Some are seasoned IT professionals, who are able to code but are new to the no-code world. Some have used tools like Microsoft Access or newer no-code tools and many if not most are from outside of the IT world completely.\nThere’s a place for everyone - to encourage this diversity and ensure people can pick up Agilebase at whatever level is most appropriate, we’ve designed our unique five step Learner Progression route.\nLearner Progression starts at a level appropriate to someone who has no experience of software development at all. You can learn ‘on the job’, by following video guides and documentation and with support from partners, to become a fully fledged software architect, whatever your background.\nThe learner progression page below gives an outline of this route and the development mode page gives practical information on how to start using development features.\n","categories":"","description":"Introducing the Agilebase as a no-code software development platform","excerpt":"Introducing the Agilebase as a no-code software development platform","ref":"/docs/introduction/","tags":["Citizen Developer level 1","v6"],"title":"Introduction"},{"body":"Over the last two years low code / no code software has appeared to burst onto the scene from nowhere. The truth however is a bit less spectacular. Low code / no code platforms have been in development under the radar for at least a decade. What has changed now is the promise has become a reality.\nLow code / no code promised to give users the power to produce bespoke systems, rather than have to rely on developers. For the last forty years off the shelf software was the only real alternative to bespoke development but over that time it gained a reputation for being inflexible and bloated.\nLow code / no code has matured into a viable alternative. A few platforms have proved they are fast, robust and powerful.\nBusiness teams can build solutions that actually work, that are the right size for them, that reflect their language and that can be adapted in real time as the business evolves. Even on really small budgets.\nLow code / no code platforms come in many flavours and have been designed to tackle different problems.\nAgilebase has been specifically designed to build back offices for ambitious businesses.\nYou can start small with a quick prototype, build this over the years into a full blown ERP system and even use it to act as the hub for all your software via its built in API Creator.\n","categories":"","description":"What is a low code / no code software platform?","excerpt":"What is a low code / no code software platform?","ref":"/introduction/what-is-no-code/","tags":"","title":"What is low code / no code?"},{"body":"Agilebase’s learner progression pathway enables you to transform your career. You can go from a citizen developer to a no-code software architect.\nCitizen developers can create their own applications using no code. Software architects can build complex applications, including powerful workflow features and integrations with other applications.\nTo go on this journey requires no technical knowledge. Beginners - “citizen developers” - come from a diverse range of non-IT backgrounds. The only skills you need are the ability to think, be willing to learn, and be able to plan.\nAgilebase will help you every step of the way. And you can stop at the level that is useful to you.\nAgilebase enables citizen developers to pass through five stages on their way to becoming software architects:\nCitizen Developer Level 1 This is the start of the Agilebase journey. At this level you can create your own applications, using no coding.\nAn Agilebase citizen developer can create ‘personal copies’ of any view and edit those copies\nremove or add fields, excepting any that are marked ‘confidential’ (only higher level developers can access those fields) rearrange fields change field sorting add filters or remove filters (except on ‘confidential’ fields) add and remove charts A confidential field is one that has a visibility rule, or is used for multi-tenanting.\nThe personal copy of the view is seen only by them. For example, a citizen developer may create a list of records filtered to show ones assigned to them. Everyone else in the organisation sees only the original view.\nYou earn the Citizen Developer title once you have carried out standard functions. These include adding and editing records. The title is assigned to internal staff not to community users.\nCitizen Developer Level 2 This level is suggested or ‘unlocked’ once a citizen developer has carried out a certain number of citizen development functions and has therefore started to learn how no code development works in a safe environment.\nHowever to activate the level, it must be manually assigned by a Software Architect level user, as it allows changes to the system which can affect other users.\nA citizen developer level 2 can\ncreate new views that everyone can see, from any table edit them as per the citizen developer functionality above additionally they can add and remove simple joins, to include data from other tables in a view remove views that they themselves have created (not those that others have) create their own tables add, edit and remove fields and tabs from those tables edit basic properties of the fields assign privileges (up to edit) on those tables, using existing roles or direct user privileges create tiles and delete tiles they’ve added themselves Citizen Developer Level 3 A Software Architect (see below) can, at their discretion, assign a citizen developer 3 ‘develop’ privileges on a table (or tables).\nThat allows them to\nadd fields to those table, excluding referenced fields remove fields that they themselves have added (not others) edit the basic properties of any field in those tables, e.g. the list of options in a dropdown box Additionally, actions not related to having develop privileges on a particular table are\nedit the basic properties of any regular view. However, workflow, API and some other types of system view will be read-only Junior Software Architect A junior software architect can use practically all of the application building functionality of Agilebase. For example\nCreate workflows (including chasers, document generation) Set up APIs Add complex joins to views Create, edit and delete roles Assign privileges to roles or users up to the ’edit’ level Remove fields, views etc. created by anyone Edit the advanced properties of fields and views, including field visibility rules (confidentiality rules) for example Their only limitations are to do with managing the organisation as a whole, including other users.\nSoftware Architect As well as building and disassembling applications, software architects can set company-wide settings and manage the account as a whole. They have full discretionary spend and can\nAdd and remove users Edit company level settings (e.g. whether to enforce 2FA) Change table sensitive and personal data settings (GDPR) View and controls users’ learner progression levels and ‘budget’ limits Assign any privileges up to the highest ‘develop’ level ","categories":"","description":"The journey from citizen developer to software architect","excerpt":"The journey from citizen developer to software architect","ref":"/docs/introduction/learner-progression/","tags":["Citizen Developer level 1","v6"],"title":"Learner Progression"},{"body":"As a no-code platform, Agilebase allows you to easily construct (and later de-construct or ‘refactor’) and change your software.\nToggling development mode on and off To get started, you need to toggle from ’normal’ mode to ‘development’ mode. You can do this wherever you are in the system and you will switch to building or developing the item you’re looking at. The three main areas this covers are:\nThe homepage. Toggling to development mode on the homepage shows an overview of everything in the system - tables, views, tiles, roles and users can all be listed and edited. Furthermore, the connections between different objects can be shown. More advanced users will typically use this area, when working on larger systems. In a view. When a view is open, toggling development on will let you edit that view - to add or remove fields and calculations for example. When viewing a record from a table, toggling development on will let you edit that table, e.g. to add/remove fields. When development mode is on, pencil icons will appear next to every object which can be edited: for example, next to every field and tab in a table record.\nWhen editing views and tables, the large pencil at the top left lets you edit the object as a whole, as opposed to a field or a tab in it.\nDevelopment mode can easily be toggled off again when you’re done and the user interface will switch back to ’normal’ mode.\nUsing editing panels When development mode is on, clicking any of the pencil icons on screen will open a panel allowing you to edit the item it’s next to. The panel can be dragged to move it around the screen if you want to see what’s underneath. Whenever you make a change using the panel, the display underneath will update, allowing you to see the effect your changes have in real time.\nHere’s an example of editing a table and view:\nand here’s what the development mode looks like on the homepage:\nThe development homepage When development mode is toggled on from the homepage, the development homepage will show. There are three main areas:\nThe lefthand sidebar: this shows any objects (tables, views etc.) you’ve been working on recently, for quick access, or any that you have ‘pinned’ (see below) The map: clicking this diagram shows the connections between tables in the system, i.e. the relations between them. Clicking a table opens it for editing. Lists: to the right of the map, at the top, is a set of boxes which each load a different type of object, i.e. tables, tiles, roles, users and different categories of view. Clicking on each will load a list of objects, so you can see full details, edit and delete them. Pinning objects When you have an editing panel open, e.g. by clicking on an object from a list (see above), you can ‘pin’ it by clicking the pushpin icon at the top left of the panel.\nPinned objects remain on screen for quick access at the top of the lefthand sidebar. They will also be remembered if you log out, for the next time you log in.\nPinned objects can also be quickly accessed at any time, even if the development homepage is not open, using the history menu in Agilebase’s top toolbar which is always present. The history icon is just to the right of the ‘back (\u003c)’ button.\nAccessing additional debugging information Later on down the route of creating applications, you may wish the user interface to show additional information, specifically in views, to show the primary key values for each record - the internal row identifiers - which are normally hidden.\nThis can be useful when testing and debugging APIs for example.\nTo enable this, add \u0026set_context=systadmin to the URL in the browser. To revert to normal mode, replace it with \u0026set_context=business.\n","categories":"","description":"How to toggle between development and standard user modes","excerpt":"How to toggle between development and standard user modes","ref":"/docs/introduction/development-mode/","tags":["Citizen Developer level 2","v6"],"title":"Development Mode"},{"body":"Agilebase’s learner progression pathway enables you to transform your career. You can go from a citizen developer to a no-code software architect.\n","categories":"","description":"Information about citizen developer and architect leaner progression levels","excerpt":"Information about citizen developer and architect leaner progression …","ref":"/docs/introduction/learner-progression-levels/","tags":["Learner Progression","Citizen Developer","Architect"],"title":"Learner Progression Levels"},{"body":"","categories":"","description":"Building a number of applications to form a CRM system","excerpt":"Building a number of applications to form a CRM system","ref":"/guides/guide1-crm/","tags":["Junior Software Architect","Software Architect"],"title":"Guide 1 - Build a CRM"},{"body":"Back-office software solutions evolved with the emergence of cloud-based software as a service (SaaS) as a way of distinguishing them from front-office software, (which typically refers to software used for processes related to things like marketing, sales, interaction tracking, project management and other customer-facing activities).\nWhilst Agilebase is widely used as front-office platform our unique strength is in our ability to support not only this front end but also the back-office.\nBecause of the power and flexibility of Agilebase there are a really wide range of business processes that can be successfully managed with the platform across all sectors, manufacturing and service related items.\nFor example:\nSupplier Approval New Product Development (NPD) Project Management Customer Support Continuous Improvement Management HR Staff Training Project Portfolio Management Order Processing Billing Interaction Tracking etc. SaaS platforms give organisations a way to simplify and streamline back-office management functions, particularly for companies with multiple locations.\n","categories":"","description":"What is a back office system?","excerpt":"What is a back office system?","ref":"/introduction/what-is-a-back-office-system/","tags":"","title":"What is a back office system?"},{"body":"What is two factor authentication? Simply put, it helps to keep your company’s data more secure, to stop outsiders stealing it, editing or even deleting it.\nWhen someone logs in from a new device or location, the system will prompt them for a code sent to or generated by their phone, to prove their identity.\nIf you’d like to dive into more detail, check out this video from authy.com: https://www.youtube.com/watch?v=ds_TANz4n3U\u0026feature=youtu.be\nHow long does this take to set up? No more than a minute or two. It’s a really simple set up process. Here’s a 60 second video showing how to do it.\nThis example shows an iPhone but it’s the same process with an Android phone - just install the Authenticator app from the Google Play store.\nSetup only needs to be done once. From then on you don’t need to do anything apart from open the app when asked. The app will automatically generate and display a code without any need for you to do anything.\nTo kick off the process\nClick your user icon at the top right of the screen Select ’edit profile' Tick ’enable two factor authentication' What if I can’t use a smartphone? If you don’t use a smartphone at work, that’s no problem. You can use an app on your computer - in fact many people find that more convenient than using a phone. Please ask your system administrator how to set things up and they’ll give you a hand.\nWhen should I set this up? Now!\nIt’s never a bad time to upgrade your data security and privacy protection measures. If you’ve not already set up 2FA, Agilebase will prompt you to do so once a week.\nHowever, you can do so at any time: click your user icon at the top right of the screen, select ’edit profile’ and tick ’enable two factor authentication'.\n","categories":"","description":"Setting up two factor authentication - a guide for all users","excerpt":"Setting up two factor authentication - a guide for all users","ref":"/docs/security-and-compliance/security-features/users/2fa-setup/","tags":["Core User","v6"],"title":"2FA setup"},{"body":"Agilebase often works best when end users become part of the development process, so they’re able to give feedback as your software builds up, also gaining confidence in the end result. So it’s quite likely that you’ll be adding user accounts relatively early in the process.\nIt’s a good idea to adopt security best practices from the start rather than trying to retro-fit. This guide will take you through the mechanics of creating User Accounts but also explain the steps you can take to ensure data is suitably protected.\n","categories":"","description":"Security features - users, roles and privileges. Policies and procedures","excerpt":"Security features - users, roles and privileges. Policies and …","ref":"/docs/security-and-compliance/","tags":["Software Architect","v6"],"title":"Security and Compliance"},{"body":"Adding a user You can add a new user from scratch, or clone an existing one. To add:\nGo to the homepage and toggle development mode on Click the ‘+ USER’ button under Lists at the top of the screen To clone:\nGo to the homepage and toggle development mode on Click the Users box at the top right to load a list of existing users Click a user to clone to open up their editing panel At the bottom, press the Clone button If a cost is to be applied, this will be shown to you.\nYou should now see an editing screen with the details of the user you just created. ![Add user][/add-user.png] You can enter the user’s name and username. If the username isn’t their email address, enter their email address in the field provided too. This is useful\nto allow them to reset their own password by receiving a link by email to allow them to receive notifications when another user adds a comment against a record as various features allow a user to be assigned to a record. Workflows can be set up to email those users. E.g. if an account manager is assigned to a customer, you may want to email them when a complaint is received from that customer. Passwords The recommended way to set passwords is for the user to choose their own, which they can do once they have a username and email address filled in. They will need to visit the login page, click the ‘reset password’ link and type in their username. They will be emailed a link which will let them set a password.\nAs an administrator, you can also manually reset someone’s password by clicking ‘change password’ in their user details screen.\nWe recommend the adoption of a password wallet service like 1Password, LastPass or built-in browser features to generate and store passwords. That lets passwords become much more secure and harder to guess whilst not requiring users to remember them.\nNotes about password security Passwords must be a minimum of 8 characters.\nWhen someone sets or changes their password, it’s checked against https://haveibeenpwned.com/Passwords to ensure it’s not a common one and is suitable for ongoing use.\nPasswords are stored in our system salted and hashed using the bcrypt scheme, with 13 rounds. This means that we do not know what your passwords are and in the unfortunate event of our passwords database being hacked, the original passwords would still not be able to be retrieved.\nTwo factor authentication Users are strongly encouraged to set up two factor authentication (2FA) using an app. Unfortunately this is one step an administrator can’t do for them, but luckily it is quick and easy to do: here’s how.\nUsers without 2FA will be prompted to do so in the user interface and by email.\n2FA is mandatory for administrators and necessary for a user to have before develop privileges can be assigned to them. Users also need to have 2FA enabled in order to perform certain functions such as exporting to spreadsheet.\nWhen enabled, a user will be prompted for the 2FA code as well as their password when they log in from a device or location they haven’t used in the past 30 days.\nIf a user encounters any problems with 2FA, e.g. they lose the device for generating their codes, you can temporarily disable 2FA on their account by going to their user details screen and un-ticking ‘use 2FA’. Of course, you need to be aware of the risks, for example double checking that a user who contacts you is really who they say they are. Once they can log in, they’ll be able to enable 2FA themselves again.\nMandating 2FA for everyone This can be done in the company settings\nOther options Learner Progression Level When created, the level defaults to being a ‘core user’, i.e. a standard user who has no special development privileges.\nA software architect can change this to move any user up (or down) in learner development progress. Please see learner progression for more information on what abilities each level confers.\nUse the custom AgileChilli UI rather than Agilebase’s It’s possible for companies to apply their logo and custom login screen to the system. Please contact us if you’d like to set this up.\nLogout after Automatically end the user’s session after this many minutes of inactivity. The user themselves can also change this setting.\nRestrict data access Here, you can specify a field name, either an equals or a contains filter and a value. The button set to user ID will set the value to the user’s ID.\nThe purpose of this is to limit the data rows a particular user sees in a view. If a field with the name you specify appears in a view, a filter will be automatically applied so the user only sees rows which match the filter.\nFor example, if you set created by [auto] = Oliver Kohll (oliver@agilechilli.com), then (assuming Oliver Kohll (oliver@agilechilli.com) is their username), the user will only see records they created, as long as the ‘created by [auto]’ field appears in the view.\nA similar feature exists to add filters to roles - useful when you may want to apply the same filter to multiple users. See roles\nRoles Tick a role to assign the user to it. The primary purpose of roles is to apply privileges to groups of users, see roles for more information.\nThere’s one special role which can be assigned. It will be marked grants administrative privileges. Assigning that role will make a user an administrator, with full permissions over the complete system. They can create/remove users, roles, tables etc., as well as assign themselves privileges on any table.\nNext to each role listed is a list of tiles that will be added to their screen if that role is assigned to them. This is a convenience feature to speed up setting up their home screen. The tiles shown for a role are those which more than half of the members of that role have. Tiles can be manually added and removed by an [administrator] or the user themselves.\nIf any role is a filtering role, the filter applied is also displayed.\nPrivileges Assign individual table privileges to a user.\nWhen dealing with larger numbers of users it’s usually more manageable if you use roles to assign privileges.\nIf a user has a privilege due to being a member of a role, that privilege is shown with a shaded blue background. Any additional privileges individually assigned to them are shown in green.\nTiles Allows an admin to add/remove tiles for a user. By default users can add/remove tiles themselves too, although this can be disabled through the use of a custom UI.\nViewing users From the homepage, toggle development mode on and click the ‘users’ box at the top right. You’ll see a list of existing user accounts. Their details are listed including 2FA status (whether they’re using app-based 2FA or not) and when they last logged in.\nEach user’s roles are shown. Any multi-tenanting roles are also included.\nThe list of users can be exported to spreadsheet by clicking again on the ‘users’ box at the top right of the screen.\nNote that if you want to see a full audit trail of what each user has done (editing, searching, exporting etc.), then you can use the optional enhanced audit trail feature (only available on certain plans).\nRemoving users To remove a user, click one in the list (see above) to open the user editing panel. At the bottom, click the Remove button.\nA user removal will have no effect on any data stored in the system. The user’s previous comments will still be visible for example and their username will still be logged against any records they’re marked as owner of. Their changes will still be in the audit trail and they will be marked as the creator/last editor of records where relevant.\nYou may want to take some other actions after deletion e.g. to re-assign records they are assigned to.\nA deleted user’s profile image will be replaced with a standard icon representing a deleted user, when displayed in comment streams etc.\n","categories":"","description":"Adding, viewing and removing users","excerpt":"Adding, viewing and removing users","ref":"/docs/security-and-compliance/security-features/users/","tags":["Software Architect","v6"],"title":"Users"},{"body":"Agilebase is primarily a platform for building back office systems for employees (or members of the organisation) to use.\nHowever, it’s common to allow access to people outside the organisation to perform limited data entry tasks. For example, you may wish your suppliers to be able to upload certificates of conformances to items they sell you, or you may have a large workforce of contractors who you require to fill in timesheets.\nIt may be that you don’t wish to supply each person a full Agilebase license because\nthere will be a large number of them, so there’ll be management and cost issues you wish to restrict what they can do in the system further than can be accomplished with roles and privileges The Community Users mechanism allows this.\nCommunity Users have limited access (described below), with subscriptions which are significantly less costly and must be purchased in bulk. Once a block of community users is purchased, you can set up and remove as many as you need within the upper limit of that block.\nValidity For a Community User subscription to apply, a person must be one of\na supplier a contractor an app user i.e. someone who utilises Agilebase functions via the API, using a third party app or website or a member of the public Setup Configuring a community of users To set up a new community of a certain type, a role must be created for them. The role privileges will determine which tables they have access to.\nEach community user must be a member of that single role only - no additional roles or privileges can be applied.\nDifferent communities of users can be created by creating different roles. A separate block of subscriptions must be purchased for each role created. Therefore you can have multiple communities, for example one for members of the public and another for contractors, or two different types of contractor.\nWhen setting up the role, tick the ‘members are community users’ tickbox. Then create a user and assign them to that role.\nFunctional Restrictions The following restrictions appropriate to users of an outside community are applied.\na community users role can be set to allow VIEW access to up to 10 tables, plus EDIT privileges on up to 3 additional tables for the 3 tables which allow editing, community users can only see and edit records they themselves have created. All records from read-only tables can be seen. for example, a user may have read-only access to a list of companies. Against each company, they can add and edit timesheet records community users only see comments added by themselves or specifically sent to them (comments are commonly used for internal company discussions) a community user can have up to 6 tiles on their homepage the homepage is fixed for community users, they can’t add or remove tiles Further, community users are unable to\nexport data create charts unlock locked fields or records bulk edit Together, all of these measures will help protect data in the organisation whilst simplifying the user interface, allowing people from outside to be able to usefully carry out work, without having to go through the expense of creating or purchasing dedicated applications for them.\n","categories":"","description":"Allowing access to people outside the organisation","excerpt":"Allowing access to people outside the organisation","ref":"/docs/security-and-compliance/security-features/users/community-users/","tags":["Software Architect","v6"],"title":"Community Users"},{"body":"Learning Aim: Understand the easy ways to alter an existing view\nPrerequisites: To be a competent user of agilebase, with Citizen Developer level 1 (or higher) enabled\nIntroduction The guide is going to introduce to you some of the features that become available to you once you’ve been given the role of Citizen Developer. In essence, you now have the power to make small tweaks to the system that just affect yourself, helping you customise how it works and hopefully making it a more efficient and enjoyable process. A good example would be making your own view of a list of organisations that is focused on the ones where you are the owner\n[guide 2 - video 1] Introducing Devloper Mode Navigate to the view you wish to personalise Then simply toggle the development mode icon that you’ll find top left of the page. You can see some new icons on the user interface. Adding a field Look at the far right of the table headers, there should now be a plus button. If this is the first time you’ve tried to change the view then the system will tell you that it needs to make a copy just for you. Simply press the button to do this. The view will reload on screen and we can see the change in name indicating that it’s your version. You can now press the Plus button again… From this window you can add other fields that may be of interest. For example me, the date the record was created. This has the rather cumbersome name “Creation Time [Auto]”. Select it and press ‘Add’. You are prompted to change the name or simply press Add to keep the original.\nMoving Fields You change the order of the fields from the list of fields found under the Edit button. Pressing ‘Edit view’ at the top left to enter development mode. You should now see the list of all the fields and its as simple as dragging and dropping the fields in to the desired order.\nRemoving a Field To remove a field, you can either:\nclick the small “X” icon on the right hand side of the list of fields. edit the individual field and press the “Remore from view button Please be aware that some fields can NOT be removed. Don’t worry, you can’t cause any damage. The system simply alerts you that it can’t delete the field. In these cases you may want to simply move the field to the bottom of the list out of the way! Adding a filter A useful filter to add in this example would be to only show Organisations that belong to myself. Make sure you are in developer mode, oand start by clicking ‘Edit view’ at the top left Now click on the filters section. To add the filter choose the field you wish to filter by, in this case ‘Owner’. The type of filter depends on the situation, but in this case we’ll choose ‘contains’ And the value we need to enter is your name Then we simply press ‘Add’\nRenaming a view Again, make sure you are in developer mode, and start by clicking ‘Edit view’ at the top left Now click on “Properties and Options” Simply enter your new title in the “view name” input box. TIP You can use a \" - \" to help organise how the views are diaplyed in the menu. So it may make sense to rename this view to “Organisations - MY”, to have our view appear in the existing Organisations menu item.\nChanging the Default View of a tile Rather than having to swap to “my” view everytime I click in to the tile, it wuld be more efficient if changed the default to be My personal view. On the front screen, click your avatar and choose tile settings. Each of the tiles will now have a cog on it. On the CRM tile we can click it and change our default view to be my personalised one. From now on, when you click on the CRM tile it goes straight to the most useful view!\n","categories":"","description":"Introducing some of the features that become available to you once you’ve been given the role of Citizen Developer","excerpt":"Introducing some of the features that become available to you once …","ref":"/guides/guide2-personalisation/creating_personal_views/","tags":["Citizen Developer level 1","personal","views"],"title":"1. Personalising our CRM"},{"body":"","categories":"","description":"Coming Soon - Introducing some of the features that become available to you once you’ve been given the role of Citizen Developer","excerpt":"Coming Soon - Introducing some of the features that become available …","ref":"/guides/guide2-personalisation/","tags":["Citizen Developer level 1"],"title":"Guide 2 - Personalising our CRM"},{"body":"Introduction This is the start of the Agilebase journey. At this level you can create your own customisations, using no coding.\nAn Agilebase citizen developer can create ‘personal copies’ of any view and edit those copies\nremove or add fields, excepting any that are marked ‘confidential’ (only higher level developers can access those fields) rearrange fields change field sorting add filters or remove filters (except on ‘confidential’ fields) add and remove charts A confidential field is one that has a visibility rule, or is used for multi-tenanting.\nThe personal copy of the view is seen only by them. For example, a citizen developer may create a list of records filtered to show ones assigned to them. Everyone else in the organisation sees only the original view.\nYou earn the Citizen Developer title once you have carried out standard functions. These include adding and editing records. The title is assigned to internal staff not to community users.\nUseful Links Visit our helpful introductory guide to personalising your agileBase experience by visiting Guide 2 - Personalisation\nFor more information about:\nAccessing Developer mode Using the Built in Charting ","categories":"","description":"Start of the AgileBase Journey - Personalisation","excerpt":"Start of the AgileBase Journey - Personalisation","ref":"/docs/introduction/learner-progression-levels/citizen-developer-level-1/","tags":["Citizen Developer level 1"],"title":"Citizen Developer Level 1"},{"body":"Learning Aim: Create a Table and associated Views to use it!\nPrerequisites: User to have watched “How to use Agilebase”\nIntroduction This stage of the guide will introduce you to the basic activities required to build a simple application. We will start by creating a table with different types of fields in order to store a variety of data. We will then show you how to create and control tiles, views and forms which are the interfaces that your users will use to enter and consume this data. Let us start by building a simple task list.\nCreate a table called “Tasks” Our simple application will need to store information about the tasks our users create. This is done by creating a database table. In Agilebase this is achieved by navigating to the developer interface and pressing the “add new table button”. [guide 1.1 - video 1] Add fields to the “Tasks” table A table of data is nothing without its list of fields. Each field stores a single piece of information. It is simple to add fields to an existing table within agilebase. Edit the table, type in the name of the field and choose the appropriate type. On creation of the field you will be able to set further options. For more detail visit - https://docs.agilebase.co.uk/docs/fields/field-types/\nIn the following video we add the fields needed to for a simple Task [guide 1.1 - video 2] Make the form easier to understand. Break it into sections Now we have the data structure required to capture a simple task we can think about how it would be used. The user interface within Agilebase is controlled by the list of fields and their options. It is a simple task to reorder fields, just use the drag and drop facility when looking at the list of fields. Use a field of type separator to create sections within the user interface [guide 1.1 - video 3] We now need to provide the user with a way of accessing our “tasks” table and using it!!! This is achieved by a combination of Tiles and Views.\nFor more info on Tiles - https://docs.agilebase.co.uk/docs/tiles/\nFor more info on Views - https://docs.agilebase.co.uk/docs/views/\nIn summary: A view generally provides abbreviated data in the form of a list of records. It also provides the ability to drill through to see the full record details. Tiles are a way of grouping functionality together. Specifically, a data tile is a way of grouping a collection of views that all share some common theme.\nFor this guide, we need a tile and collection of views dedicated to helping us create and manage our “Tasks”\nMake the table available for use! Adding a tile to the homepage The homepage of agilebase is made up of data tiles. We need to create a new tile to hold all the views of our taks data [guide 1.1 - video 4] Adding views that show all the tasks that have been created To provide the user access to a list of Task records we need to create a View. To start with we will create a view that will list ALL the data. [guide 1.1 - video 5] A better way of looking at data Many users will be familiar with a card or kanban style interface (such as Trello). Agilebase has a similar style of view that can often be useful.\nWithin a views “options” tab you can set its interface stylle to be “Cards in Columns” [guide 1.1 - video 6] Making views for a specific job Whilst users can apply their own filters and re-order data in a view, it is often a better user experience if there are dedicated views setup that match a particular job. For this example we want to create a list of all the completed tasks with the most recent at the top of the list. For more information on applying filters - https://docs.agilebase.co.uk/docs/views/filters/ [guide 1.1 - video 7] Our simple application is complete! However, we can quickly see that we have missed implementing a key feature - collaboration. We should add another field to this table - a comments field!\nFor more information on the comments field and its associated comment feed - https://docs.agilebase.co.uk/docs/fields/field-types/special-field-types/comment-feeds/\nAdd a Comments field to a table! Adding new fields to an existing table is no different to when creating from scratch. Simply add via the table edit screen. Adding collaboration functionality to an agileB\\se application is as easy as adding any other field! Just add a field of type Comments as shown in the video below [guide 1.1 - video 8 *] For completeness the remainder of this stage of the guide covers removing items and functionality that are no longer needed.\nDeleting Views Eventually you will want to remove unused views in order to reduce clutter and streamline the user experience. To do this go to the Properties and Options tab when editing the view and press Delete view [guide 1.1 - video 9 *] Delete Fields and Tables Keeping the user interface streamlined and uncluttered also includes the removal of unwanted or old data fields. It is straightforward to delete a field from a table. Either clicking the X icon on the RHS of the list of fields, or use the Remove field button on the fields definition. However, extra care needs to be taken as the field may be in use as the following video demonstrates.\nN.b. to completely remove a table you are first required to delete ALL the fields it contains. [guide 1.1 - video 10 *] ","categories":"","description":"Demonstrates the basic processes of building a simple application, a good starting point","excerpt":"Demonstrates the basic processes of building a simple application, a …","ref":"/guides/guide1-crm/tasklist/","tags":["Citizen Developer level 2","v6"],"title":"1. Creating a basic task list"},{"body":"\nAgilebase has been created with some important aims in mind\nto create software that people find enjoyable to use, which manifests in many ways, most obviously the attractive and colourful user interface, but also because it can match user’s requirements exactly to support the full ambitions of business owners. It’s simple to get started but the platform has a very high technical ceiling - there’s not much you can’t accomplish to make the most out of an organisation workforce’s perhaps un-tapped skills and experience, allowing people to take full ownership of their own areas of their business ","categories":"","description":"Why use Agilebase as your no code development platform?","excerpt":"Why use Agilebase as your no code development platform?","ref":"/introduction/why-use-agilebase/","tags":"","title":"Why use Agilebase?"},{"body":"Backups Data backups are performed across the stack of technology, from server down to databases and file storage.\nDatabase backups are taken daily and hosted in the European Union by Amazon. Older backups transition to Amazon Glacier and are kept for 200 days - this allows a balance between the practical necessity of allowing rollbacks to a certain point in time, whilst not storing data for an unnecessarily long period, to comply with the GDPR. By policy, backups under 100 days old are read-only and un-deletable, so will always be available in the case of attacks like ransomware. These backups are also encrypted so that Amazon has no access to the data within then.\nContinuous archiving of the database is also enabled, to transfer data to a ‘hot standby’ server using streaming replication, allowing immediate failover should the primary database fail for any reason.\nAgilebase content (uploaded files, custom templates etc.) also have snapshots taken daily, kept for 200 days in a separate EU location.\nIn addition to these content-only backups, snapshots of the totality of each key server in the infrastructure (including configuration), are run daily using the Linode backup service https://www.linode.com/products/backups/\nThe backup and recovery process is monitored and tested regularly.\nRetrieval There may be a charge for retrieval of customer data from backup, to cover our costs. The data will be restored to a separate instance of Agilebase available at a different URL, which a customer can look at to compare data. If necessary, data can then be extracted from one and loaded into the other.\nPlease be aware that depending on needs, this may be a complex process due to the fact that other data in the live system may have changed since the backup. A simple overwrite of existing data may not be the best option.\nPrivacy policy Agilebase Ltd is funded directly by the customers we provide services to, we do not have any other business model, particularly we do not resell any data.\nOur privacy policy is available here: https://agilechilli.com/help-centre/agilebase/privacy-policy/\nGDPR Policy An overview of our GDPR policy is available here.\nData Protection and Disaster Recovery Full details of our processes and plans are available to customers and relevant parties on request.\n","categories":"","description":"Policies and further information","excerpt":"Policies and further information","ref":"/docs/security-and-compliance/policies/","tags":["Software Architect","v6"],"title":"Policies"},{"body":"Before diving into the details of building applications, starting with tables, let’s take a step back and learn some background information about databases, including what a table is. If you’re familiar with these concepts, feel free to skip this section.\nWhen building back office software with Agilebase, a large amount of what we’ll be doing is building database structures, to store user-entered data. Agilebase takes care of creating the user interface to allow users to use these structures automatically, e.g. to search for data, add and edit it.\nYou will find many articles explaining relational databases if you look for them on the internet. Most will introduce SQL, the language used to work with databases. It’s not necessary to learn that as Agilebase generates it automatically behind the scenes, but the higher level concepts are useful to grasp.\nHere’s a YouTube video with a good introduction.\nIf you prefer reading, here are a couple of examples.\nSimple example - what is a relation? Imagine we want a place to store records of suppliers to our business. This could be the start of a supplier management system to compare companies based on quality, accreditation levels and price for example, or to carry out supplier approval processes.\nTo do this we need just one table ‘suppliers’ which would have fields in such as\ncompany name a few address fields phone number website etc.\nThat’s just like creating a spreadsheet with column headings across the top for those fields. You can then add a row for each supplier you record.\nNow, if we communicate with our suppliers, we may want to store the contact details of a few key people at each supplier.\nTypically, a naive spreadsheet user would add a few more columns (fields in database parlance), things like Contact Name 1, Phone 1, Email 1, Contact Name 2, Phone 2, Email 2. As you can imagine if there are more than one or two contacts, it would become pretty cumbersome and difficult to maintain.\nWith our database we can easily do a lot better and create a separate table of contacts that links to the suppliers table - in fact it relates to it. That’s why relational databases are so called, just because they’re very good at dealing with relations between tables.\nSo we have our contact table, maybe with fields\nContact name Role Direct Line number Email address etc.\nTo connect them we add another field of a special type, called a relation. It can be called Company, but rather than storing the company name again (we already have stored the company name in the suppliers table), it will be a link to a particular company. Don’t worry about how that works behind the scenes, just know that the Company relation links to a supplier.\nSo now we have\nWe can now add as many contacts as we like to a supplier. And if we decide to store some more data about each contact, maybe a link to their LinkedIn profile for example, we can add that field to the contacts table and it will automatically be there for all contacts (as opposed to our naive spreadsheet example).\nA more complex example That’s a good start. Moving on, there’s one more type of relation it’s useful to understand - the ‘many to many’.\nOur link between contacts and suppliers above is called a ‘one to many’ (or sometimes many to one) relationship. The reason is simply that one supplier can have many contacts attached.\nWhat happens if we think about a more complex case? Suppose our suppliers supply us with raw materials, for example ingredients and packaging. We may want to record which materials each supplier supplies.\nWe could set it up as above, where we have a raw materials table. A raw material has a relation field linking it to a supplier, so one supplier can supply many materials.\nHowever, what happens if a particular raw material is supplied by more than one company? You may have a primary supplier, then various fallbacks for example.\nWe’d have to create a new raw material record for each supplier. That would be ok if our raw material record consisted of nothing more than a name and maybe a price, but there could be dozens or hundreds of fields added as we build up our system - to store nutritional information, chemical properties, allergens, etc. etc. That would mean lots of duplication to keep track of. And if we want to later build recipes which use our raw materials, we’d probably just want a recipe to refer to ‘flour’, not ‘flour from Supplier X’.\nThe solution is to create a many to many relation, where one supplier can provide many raw materials but also a single raw material can be linked to many different suppliers.\nThere’s no new field type to get to know, we just use the standard one to many relation we’ve already learned about in a clever new way - we use two of them, plus a join table. The structure looks like this:\nThe table in the middle, Links, is called a join table, or junction table.\nIt has a normal relation field linking it to suppliers, and also one linking to raw materials. By adding a record to the links table, we can join any raw material to any supplier. A supplier can then have lots of raw materials, but an raw material can also have lots of suppliers.\nThe video above also explains this type of relation if you’ve not already watched it.\nWhen to use the many to many You may have a niggling thought at the back of your mind: how do I know whether it’s best to use a simple one to many relation, or a more complex many to many setup? Surely I could use many to many for contacts and suppliers too? A single contact may be associated with more than one supplier, for example if they’re a contractor, or if they move jobs.\nThe answer to that just comes down to your judgement. Although Agilebase creates a friendly, easy to use interface on top of the data structure, the many to many does add complexity. So it’s a bit of a trade-off. However the advantage of a no-code system like Agilebase is that you can rapidly try out ideas and see which one works best. As time goes on you’ll get a sense of what works best in which situation.\nIf you do want to learn more about this topic, it’s called ‘database normalisation’ and there’s plenty written about it!\nSummary I hope that gives you a bit of background about what a table is, what a relation is and how they work together.\nA table is a store of data about a single concept e.g. a company or contact A relation field links tables together e.g. a contact belongs to a company Many to many relations (created with a join table) are sometimes useful. They allow us to link many records of one table to many of another. That’s pretty much all of the most important information you’ll need to know about data structures. The rest of the documentation will show you how to create applications practically. Have fun!\n","categories":"","description":"Useful concepts to understand prior to building applications","excerpt":"Useful concepts to understand prior to building applications","ref":"/docs/tables/relational-database-concepts/","tags":["Citizen Developer level 2","v6"],"title":"Relational Database Concepts"},{"body":"The primary purpose of roles is to apply privileges to groups of users, rather than applying them individually. That makes managing large numbers of users easier and also more secure as it’s easy to see which privileges each type of user has and which they don’t.\nRoles have some other important uses, such as multi-tenanting, described below.\nCreating a role Go to the homepage and toggle development mode on 42 Click the ‘+ ROLE’ button at the top right of the screen You should now see an editing screen with the details of the role you just created. You can give it a name and there are a few options: Allow Export\nReferrs to exporting to spreadsheet - see spreadsheet exports\nAllow global editing Users with edit privileges on a particular table, when added to this role, will be able to perform global edits on the data.\nTo perform a global edit, the user should\nfilter the view (by typing into the filter boxes at the top of each column) to narrow down the rows to those which should be edited double click on a column header in a view, to edit the data in that field. The field must be from the view’s parent table. click the ’edit filtered’ button which appears type in the value you want to apply and follow through the prompts User Visibility and Allow only multi-tenanting views to be seen Used to configure multi-tenanting\nMembers Tick each user to add them to the role. Users will gain all the privileges defined by the role.\nPrivileges Select the table privileges which will apply to members.\nPrivileges are additive - if a user is a member of multiple roles, they gain all the privileges from each of those roles added together.\nMulti-tenanting Multi-tenanting is the ability to separate users into groups who can’t see each other’s data. This can be used for example to allow different sets of companies, clubs, or membership groups (or whatever the organisational group is) to use the same system features whilst remaining separate from each other.\nMulti-tenanting is a powerful feature that can be used not just for customers to segragate data amongst their users.\nPartners can also use this facility if building software to widely market. In that case, each customer they sign up can very quickly be set up with their own private dataset, whilst the partner retains the ability to add features which will automatically apply to everyone.\nTo set up multi-tenanting:\nfirst add a text field to all tables in the system for which you want data to be segragated. The field must be named the same in every table, for example’s sake here let’s assume it’s called ‘account name’. Then create one role for each set of users who you want to segregate. We’ll assume there’s one called ‘Customer A’. In the role details screen for the Customer A role, tick user visibility. That means that users in this role won’t see users in other roles with the same option ticked. In other words, users from Customer A won’t be able to select Customer B or Customer C users when doing things like adding comments or assigning users to records. Under restrict data access in the role details, enter account name = Customer A, i.e. Filter Field Name = ‘account name’, Filter Value = ‘Customer A’ Finally, ensure the account name field is present in all views based on the table. When creating a view, any fields used for multi-tenanting will automatically be added but you may need to retro-fit any existing views. This has two effects -\nWhen a user assigned to the Customer A role creates a new record in one of the multi-tenanting tables, the account name field will automatically be populated with the value Customer A (as entered under restrict data access). The field will be invisible to them - they won’t be able to see or edit the value. When looking at records in a view, a filter will be automatically applied so the user only sees records where account name = Customer A. Users who aren’t a member of the role will see the account name field in the data editing form and in views. This can be useful for allowing e.g. group managers to see all data.\nIf any multi-tenanting roles are set up, then views which don’t contain a multi-tenanting field will be marked in red in the administration interface, as a warning. If a multi-tenanting user loads one of these views, they will see all records. Typically, practically all views will need the multi-tenanting field to be present.\nAllow only multi-tenanting views to be seen Optionally, this can be ticked. If ticked, user’s will only be shown views which contain the multi-tenanting field, ‘Account Name’ in the example above.\nThis is an added protection - if the multi-tenanting field is removed from a view, the user won’t see it any more. Otherwise they’d be able to see all data in the view, even that which they shouldn’t. This can also be useful to set when there is partial multi-tenanting set up, i.e. some views are multi-tenanted but others aren’t and you only want certain groups (e.g. people outside the organisation) to see the multi-tenanted parts, not everything.\nComplex multi-tenanting Multi-level Users may be a member of more than one multi-tenanting role. For example you may use two multi-tenanting fields/roles, one for a company and another for a division. Members of a company role will be able to see data from all divisions in their company and members of both a company and a division role will only be able to see data for a single division.\nMulti-account (via multiple roles) It’s also possible for a user to be a member of multiple roles, all of which are set to multi-tenant on the same field, with different values. E.g. if a user is a member of Company A and Company B roles as in our example above, they will see data from those two companies when viewing records, but not Company C.\nThis works best when the user has read-only privileges on the data, e.g. for a manager reporting on those two companies. They can view records but not add new records, as the system is unable to determine the value of the account name field to use.\nMulti-account (via contains filtering) It’s also possible to define a role filter under restrict data access with a ‘contains’ rather than an ‘=’ filter. You can then use a naming convension for your account name values to allow members of this role to see multiple accounts. As above, users of this role will need to be read-only on the data.\nAPI setup In a multi-tenanting account, it’s possible to create new tenants, with users, by API, as opposed to the manual actions of an administrator. See Creating user accounts with the API.\nRole properties Brand name and domain These two options allow system emails (password reset notification etc.) to come from a domain name of your choice and be branded with a particular ‘app’ name. This can be useful if you’re creating a public-facing app using Agilebase, rather than applications for your own staff.\nTo allow the domain name to work, you’ll need to contact us to set it up - our server will need to be authorised to send email from your domain.\nCustom menus It’s possible to add custom menu items into the user menu (the one at the top right that appears if you click your user icon). That means if your company has specific help pages or process documentation relevant to your organisation or application, you can make them available from within Agilebase.\nEach custom menu has a title, description and URL, which will be opened in a new tab when the menu item’s chosen.\nSimply add these into the menu title, menu description and menu URL properties of a role. Assigning that role to a user will add the menu item to their profile menu.\nTo add multiple menu items to a user or users, assign multiple roles, each with one menu item defined.\n","categories":"","description":"Organising users into groups for better management","excerpt":"Organising users into groups for better management","ref":"/docs/security-and-compliance/security-features/roles/","tags":["Software Architect","v6"],"title":"Roles"},{"body":"A tile on a user’s home screen represents an application or module of an application - a collection of data and functionality that forms a coherent whole.\nThere are five types of tile, each of which present data in a different way.\nData tile the most common tile type - from the administrator’s viewpoint this is a collection of views. The user can navigate the views, search for data, edit records etc. Image / document library a type of data tile. Views which contain a document field can be displayed in ‘card’ format to show large document previews, rather than the usual ‘rows’ format Calendar can display any views in the system containing date/time fields in calendar formats, such as a standard month layout, or gannt-like chart Visualisations rather than a collection of views, displays a collection of charts Comment stream brings together everyone’s comments (that a user has privileges to see) from everywhere in the system into one place. The newest comments are shown in the tile on the user’s homepage. Clicking on a comment loads the record it’s attached to Data tiles need to be created by an administrator. Once a data tile is created and filled with views, it can be added to a user’s screen either as a standard data tile or, if the views contain document fields, optionally as an image/document library tile.\nOther types of tile i.e. calendar, visualisation and comment stream tiles need not be created by an administrator, they are built-in facilities of the platform. Each of these tile offers different ways of seeing data collected from across the system. As such they are automatically available to add to a user’s screen.\nCreating a tile Go to the homepage and toggle development mode Click the ‘+ TILE’ near the top right of the screen You should now see an editing screen with the details of the tile you just created. The available options are\nName - the tile name Section - optional. If you have a large number of tiles, you can organise them into sections. This is an aid for administrators only, it doesn’t affect end users Index - affects the order of tiles on screen, lower numbered tiles appear before higher Purpose - can be used as help content to tell users about this tile Colour - the colour will be automatically chosen to avoid as much colour duplication as possible, however you can manually change the colour if you like, e.g. to organise similarly themed or related tiles together visually Icon - a tile icon can be chosen from the icon panel A multitude of icons are available, from Font Awesome. They are constantly adding more so if you see one that’s available on their website that’s not in our set yet then just let us know.\nAdding views to a data tile Data tiles need to contain one or more views to be useful. If you have no tables or views yet, you may want to check out the Quick Start Guides, or see Views for full details on view creation.\nWhen editing a view, in the properties panel, choose the tile which you want to place it in from the Tile dropdown.\nAdding and removing tiles from users Users can themselves add tiles to their own homepages (unless they have customised UI options to prevent this). However, administrators can also do this for them.\nTo add a tile to a user\nGo to the homepage and toggle development mode Click users. Select the user you wish to edit Open the Tiles panel Click the tile you want to add If it’s a data tile or document / image library tile, you’ll be prompted for the primary view, which is the view that will load when the user first opens the tile. The most commonly used view for the tile is the default. Auto-adding tiles Tiles can also be added automatically in bulk by assigning a user role.\nWhen editing a user, click the Roles button. Next to each role listed is a list of tiles that will be added to their screen if that role is assigned to them. This is a convenience feature to speed up setting up their home screen. The tiles shown for a role are those which more than half of the members of that role have (tiles which the user already has aren’t listed).\nAfter assigning a role, if any tiles aren’t needed for a particular user, they can be removed from the Tiles panel for that user.\nSystem tiles As an administrator, you will likely create a number of views which aren’t meant to be directly visible by users, but which are for the internal workings of your applications. For example, workflows, tab views etc. - see Views - Special Uses\nTo prevent users seeing these, you can put then in system tiles. A system tile is simply one which has a name starting with the word ‘System’. These will only be visible to administrators. You may find it a good idea to create a number of System tiles for organisation purposes.\n","categories":"","description":"Tiles on the homepage are the entry point for the user to Agilebase applications","excerpt":"Tiles on the homepage are the entry point for the user to Agilebase …","ref":"/docs/tiles/","tags":["Citizen Developer level 2","v6"],"title":"Tiles"},{"body":"Learning Aim: Introducing building new charts\nPrerequisites: To be a competent user of agilebase, with Citizen Developer level 1 (or higher) enabled\nIntroduction This short guide is going to introduce to you graphing features that becomes available to you once you’ve been given the role of Citizen Developer.\n[guide 2 - video 2] Adding a Chart Navigate to the view containing the data for your chart\nAs a Citizen Developer level 1 you are able to add charts to your own views.\nYou don’t need to be in developer mode, simply click the graph icon top right.\nSetting up the chart Press ‘add chart or map’ and work your way through the steps.\nAdd data for the x-axis For this example we can show the distribution in age of the Organisation records. We can therefore choose Incorporation Date for the X axis, specifically ‘by Year’. For the Y-axis we want to know how many, which is a ‘Count’ of each Organisation record. We can skip advanced settings and choose an appropriate Chart type. In this example ‘Packed Columns” Finally we can change the name of the chart, and press save. Hopefully a picture says a thousand words as we look at the graph!\nFor more information about graphs in agilebase please have a look at docs charting\n","categories":"","description":"Introducing the ability to create charts that become available to you once you’ve been given the role of Citizen Developer","excerpt":"Introducing the ability to create charts that become available to you …","ref":"/guides/guide2-personalisation/creating_personal_charts/","tags":["Citizen Developer level 1","personal","charts"],"title":"2. Personalising our CRM by adding charts"},{"body":"Learning Aim: Create related Tables to demonstrate the power of relational databases\nPrerequisites: User to have watched “Creating a basic task list” video\"\nIntroduction In this step of the guide we will build the engine of our CRM and in doing so start to introduce the concept of a relational database. We will do this as a practical example and you’ll see how agilebase makes this straight forward. We will be building a bigger system, but for the most part it’s simply reusing things we’ve already covered.. Let’s start with building a table called ‘Organisations’\nCreate a table called “Organisations” To get our CRM going we need somewhere to store information about the organisations we will interact with. This can easily be achieved by adding a new table, a tile and an initial view. If you need a quick refresher watch the video below, or if you need more detail go back to step 1\n[guide 1.2 - video 1] Create a table called “Sites” A company might have more than one location, so we will need a table to hold information about the various addresses they might have - ‘Sites’. This is the first example we have of adding a Relation field. If you want to learn more then please visit relational database concepts\n[guide 1.2 - video 2] Create a table called ‘Contacts’ Let’s add another table of data that is related to an Organisation, the people who work there - ‘Contacts’. We will link to two tables, the organisation they work for and the site they primarily work from.\n[guide 1.2 - video 3] Adding tabs Viewing and adding data in isolation doesn’t feel very natural. What we want to do is look at an organisation’s records and see its list of contacts there and then. One way Agilebase does this is through adding ‘Tabs’ to a record.\nIf you want to know more visit or documentation about tabs\n[guide 1.2 - video 4] OPTIONAL - Linking Tasks to Organisations At this point you may decide to upgrade the Task system we created previously. If you want to do this you will need to update the Tasks table to have a Parent Org, adding a Relation field (to organisation) and then adding the new Tab to the Organisation table just as we’ve done before.\nYou might also want to go back in to some of the views people use to access tasks and add a field so they know which organisation it’s for.\n","categories":"","description":"Introducing the power of Relational Databases... adding the ability to capture Company and Contact information to start building our CRM.","excerpt":"Introducing the power of Relational Databases... adding the ability to …","ref":"/guides/guide1-crm/adding_relational_data/","tags":["Citizen Developer level 2","v6","Relational Data","tabs"],"title":"2. Capturing Company and Contact data (Introducing Relational Databases)"},{"body":"","categories":"","description":"Starting to develop functionality","excerpt":"Starting to develop functionality","ref":"/docs/introduction/learner-progression-levels/citizen-developer-level-2/","tags":["Citizen Developer level 2"],"title":"Citizen Developer Level 2"},{"body":"In Agilebase, there are three privilege levels, as well as a special ‘develop’ privilege.\nThe three privileges take effect per table, i.e. a user/role can have certain privileges on one table and different ones on another.\nPrivileges are additive - if a user is a member of multiple roles, they gain all the privileges from each of those roles added together, plus any they may have individually assigned.\nPrivilege levels View: ability to see data in a table Edit: ability to create, edit and delete data in a table (create and delete subject to various table options) Develop: the privilege that allows you to use the ‘application building’ features of Agilebase, relating to a table. Namely the ability to modify the structure, i.e. create/delete fields, tabs, change options etc. create, edit and delete views from the table, including creating charts, maps and word clouds. upload or create printout templates for views view usage statistics about a table Develop also allows some extended user features delete any user’s comments from a table unlock locked records to allow editing (one at a time) override table options which would normally disallow adding/removing records from a table override options which would normally disallow exporting data to a spreadsheet import data from spreadsheet override options which would normally disallow global editing of data in the table Privilege levels work in conjunction with Learner Progression levels, for example, only someone at level Citizen Developer level 3 can have Develop privileges assigned to them.\nTwo Factor Authentication is required for any user with any Citizen Developer or Software Architect role.\nAssigning table privileges Table privileges can be assigned to one or more users or roles from that table’s editing screen. From a user or role editing screen, privileges on one or more tables can be assigned The two methods are equivalent, whichever is the most convenient for a given purpose can be used.\nManaging privileges by role rather than by individual user is recommended. That makes managing large numbers of users easier and also more secure as it’s easy to see which privileges each type of user has and which they don’t.\nTo assign one or more role or user privileges to a table:\nEdit a table Open the roles and privileges panel, then select or un-select any privileges required To assign one or more table privileges to a particular role or user:\nOn the homepage, toggle on development mode Click roles or users Select the role or user to assign privileges to, then select or un-select any privileges required Related to privileges Database systems often have the concept of row level privileges. The equivalent in Agilebase is the multi-tenanting system.\nIndividual fields in a table can be locked or hidden, see the field options\n","categories":"","description":"The different types of privilege and how they can be assigned","excerpt":"The different types of privilege and how they can be assigned","ref":"/docs/security-and-compliance/security-features/privileges/","tags":["Software Architect","requires update"],"title":"Privileges"},{"body":"These pages provide a guide to using tables, which are the backbone of data storage in Agilebase. Agilebase offers rich table functionality so that data can be processed in the optimal way for your application.\n","categories":"","description":"Tables are the building blocks of a data structure","excerpt":"Tables are the building blocks of a data structure","ref":"/docs/tables/","tags":["Citizen Developer level 2","v6"],"title":"Tables"},{"body":"Learning Aim: Introduce Kanban / Card view. Power of dropdowns on fields. Show how easy to add graphs. Show off the advanced UI elements of aB\nPrerequisites: User to have watched “Capturing Company and Contact details” video. Understand relational data\nIntroduction In this step of our guide we going to look at adding a dropdown field to “control” data input as we want to set up a Kanban board approach to managing Sales Opportunities. This video assumes you are happy creating tables so jumps to the point of adding the Dropdown field. If you are following along and want to build this table please copy the following table structure\nFields we will need: Organisation(relation to Organisation) Title (text), Detail (text large), Date of Enquiry (date), Source (text), Main Contact (relation to contact), Opp. Owner (text), Demo-Meeting (Separator), Date of Demo (date), Meeting Notes (text large), Quote (Separator), Quote Amount (number), Quote notes (text large), Outcome (Separator), Date Won (date), Date lost (date), Lost reason (text), closed by (text), closed date (date)\nAdding a dropdown field A dropdown field is as simple to add as any other field type. However there are some considerations about how it is configured to help the user experience.\nHaving an initial comma in the list means the default value will be blank. Adding an initial number to each option in the list is very useful to imply an order (an override the default alphabetical ordering). Autofilling with a list of users. Click here for more info In this stage of our guide we are going to add the stages a typical Sales opportunity will pass through. [Guide 1.3 - video 1] Creating a Kanban view We can now create a view to show all the Sales Opportunities we will be mansaging. This is the basically the same as we’ve done before Click here to see how add a view Before We set the interface option to be “Cards in Column” its important to move the controlling field to the top of the list. In this case we want ther Kanban board to be controlled by Status, therefore it should be the first DropDown field in the view.\n[Guide 1.3 - video 2] Adding Graphs! Sales teams love graphs. After all, a picture says a thousand words, and agileBase has an easy to use graphing facility to help you show off the insights your data contains. Creating graphs can be done by any user, but it usually helps if the developers take the lead and build the obvious ones.\nThis video demonstrates adding a pie chart to show the number of Sales Opportunites by Source, and also a column graph to show volume of sales enquires over time. It also shows the advanced option of using Stcaking to add more insights.\n[Guide 1.3 - video 3] ","categories":"","description":"Adding Sales Opportunity management to our CRM - using a Kanban board and DropDown fields.","excerpt":"Adding Sales Opportunity management to our CRM - using a Kanban board …","ref":"/guides/guide1-crm/sales_pipeline/","tags":["Citizen Developer level 2","v6","Kanban","DropDown","Sales"],"title":"3. Adding a Sales Pipeline - Kanban"},{"body":"Firstly, no formal programming experience is necessary.\nOften, people who are interested in building applications tend to be those who have created spreadsheets to run business processes but have become aware of the limitations and want to move to the next level.\nFollowing training, anyone with the requisite interest, ability and ambition can progress from making simple changes and additions to existing applications, to building complex applications\nCitizen Developers People working within an organisation at any level can be trained in the technology and thought patterns necessary to build useful applications. Companies can therefore make the most of the abilities of their staff, that may currently be un-tapped.\nPartners We are also building a network of partners who can act as consultants to organisations, kick-starting the application building process within an organisation and taking ownership of any large scale application(s).\nPartners can also use the platform to build their own multi-tenanted apps. These are applications which many different customers can log into and use. Each company’s data is of course separated from others, but the application itself is shared.\n","categories":"","description":"Who can build applications using Agilebase?","excerpt":"Who can build applications using Agilebase?","ref":"/introduction/who-can-use-it/","tags":"","title":"Who can use it?"},{"body":"A table is a store of data of a particular type e.g. a company, contact, product or invoice. Tables are the fundamental building blocks of an Agilebase application.\nAdding a table On the homepage, click the ’toggle’ button in the top-right of the screen to enable dev mode (if it is not enabled already) Click + Table, choosing a name for the new table TODO: images You can change the table’s name and add a longer description under Help. This description will be used as help text in the user interface.\nNaming tables When naming a table, it’s best to use a plural form. Also avoid filler endings like ‘info’ or ‘details’. So rather than ‘company info’, you might call a table ‘companies’.\nThe reason for this is that the user interface will automatically convert plural names into singular forms where appropriate. So for example if there’s a plus button on the screen to allow the user to add a new record in the table, it will automatically recognise the table and title the button Add Company.\nIf you build a large system with lots of tables, you may find it a good idea to prefix table names using a numbering/lettering system e.g. a) table 1 b) table 2\nIn the administrator interface, tables are listed alphabetically, so you can arrange the tables into a logical order with this method.\nThe user interface will strip out any prefixes when displaying names to users, if they end with a closing bracket ).\nEditing a table There are two ways to edit a table: from the homepage, or from editing a record.\nFrom the homepage When you toggle development mode with the toggle in the top right corner of the screen, you can see a Map and List items: the Map shows tables and relations between them, the List can show tables and also other entities, like views or users.\nFrom either display, you can click a table to edit it. Once open, you can also pin tables with the pin icon at the top left of the editing panel. The table will then appear ‘pinned’ to the lefthand side of the development homepage and will remain there until unpinned, or you log out. This can be useful when working with a number of different tables.\nFrom editing a record When build mode is enabled, if you are viewing an individual record then clicking the big pencil at the top left of the screen lets you edit the underlying table.\nRemoving a table Before removing a table, you first need to remove all views and fields.\nIt’s not necessary to remove actual data records from the table first.\nA list of existing views is visible in the name and views section of the panel sidebar. Visit each view and delete it.\nThen below to the table’s name and views section is the fields section. Delete all the existing fields from here.\nWhen you’re done, you can click the Remove table button in name and views.\nWhen deleting views and fields, you may find you have to first delete other views or fields they depend on. In complex systems there can be chains of objects that need to be deleted in order.\nDeleting is a destructive process so is not highly automated on purpose, to avoid accidental deletion. However at each stage you’ll be shown any dependencies which have to be removed first, so you can follow through the chain.\n","categories":"","description":"The basics of working with tables","excerpt":"The basics of working with tables","ref":"/docs/tables/adding-and-removing/","tags":["Citizen Developer level 2","v6"],"title":"Adding, editing and removing"},{"body":"Exporting to spreadsheet is only one way of getting data out of Agilebase, but it is the most commonly used amongst everyday users. For less ad-hoc data transfers, such as integrations with third party systems involving incoming and/or outgoing data, the API can be used.\nAllowing exports In order for a user to be allowed to export to spreadsheet, a number of critieria have to be matched, to suitably protect your organisation’s data.\nThe user must have Two Factor Authentication enabled The view to export from must have exporting enabled (it’s enabled by default). To do this edit the view under properties and options, tick allow exports The user must also be a member of a role that allows exporting (disabled by default). To allow exporting for a role, on the homepage, toggle development mode on click roles and select the role you want tick allow exports A user with develop privileges on the view’s parent table can bypass criteria 2 and 3. This privilege is not commonly applied to normal users.\nExporting A user with the ability to export can do so by opening the view, clicking the export icon near the top right and selecting export from the options in the menu.\nIf the user filters the data on screen before doing this, only the filtered data will be exported.\nThe resulting spreadsheet will be in Microsoft Excel format. The first sheet will be some metadata about the export, such as a timestamp, the name of the exporter and any filters applied. The second sheet will be the actual data.\nColumn A in the data sheet holds the internal row ID of each record. This is useful for matching purposes if you’re going to be modifying then re-importing the data.\nCharts If the view has charts attached, one sheet per chart will also be included in the spreadsheet. The contents will be the chart data, not the chart visualisation itself, but the visualisation can easily be re-created in the spreadsheet from the data if necessary.\nLimits and notifications An administrator can log whether each table contains commercially sensitive data (ticked by default) and/or personal data (see https://gdpr-info.eu/art-4-gdpr/). If either of these options is ticked for a view’s parent table, you’ll have additional options for\nnotifying all administrators if an export of more than a certain number of rows is done setting a hard limit to completely disallow exports of more than a certain number of rows To configure these options, see tables\nYou may also want to set an export prompt message to show people when they request an export, to remind people of their data protection obligations under the GDPR for example. This can be done in the company settings.\n","categories":"","description":"Allowing users to export data to spreadsheet","excerpt":"Allowing users to export data to spreadsheet","ref":"/docs/security-and-compliance/security-features/exporting/","tags":["Software Architect","v6"],"title":"Exporting"},{"body":"Adding fields to a table creates a form by which people (and other sources such as the API or workflows) can enter data.\nThere are various types of fields and field options which this section will cover.\nAdding a field Ensure development mode is toggled on Select the table to add a field to Click on the pencil icon above the record, if necessary, to edit the table From the controls at the top of the list of existing fields: Type in a field name, optional description, choose a type and press the Add button Optionally, drag and drop the field to a desired location relevant to other fields Field level help Any description added to the field will be used as inline help. URLs can be included and will be turned into clickable links. See help for more information.\nEditing a field Field name and description (help text) as well as field options can be altered at any time by clicking a field. Fields can be moved on screen by dragging.\nHowever, once set, the field type can’t be changed. A number field can’t be converted to a text field for example. In particular, a decimal number can’t be converted to a whole number field and vice versa, as integers and floating point numbers are different data types.\nThere is a process available for changing field types, please see changing field types if you need to do that.\nRemoving a field In the fields panel, click the x button to the right of a field.\nIf the field is used in any other locations in your application, such as a view, you’ll be alerted to the fact. You’ll need to first remove the field from those locations before being able to remove it.\nYou can also see where fields are used by scrolling to the bottom of the field editing panel and looking under ‘Field Uses’.\nAdding a field to multiple views First ‘pin’ all the views to which you want to add a field. You can pin a single view by clicking on the pushpin icon when editing it, or multiple ones at once from the ’name and views’ panel of a table when editing it.\nWhen editing a field, press ‘add to pinned views’. The field will then be added to all pinned views which don’t already contain it.\nThis can be particularly useful when introducing a multi-tenanting feature. Multi-tenanting means allowing different customers to access the same system, segregating their data so they each see only their own data. Part of the setup requires adding a new field to all (or most) of the views in the system.\n","categories":"","description":"Table fields","excerpt":"Table fields","ref":"/docs/fields/","tags":["Citizen Developer level 2","v6"],"title":"Fields"},{"body":"Learning Aim: Introduce calculations and basic SQL\nPrerequisites: User to have understanding of relational data\nIntroduction The ability to use your existing data to calculate new information will dramatically enhance the user interface, and lead your users to create new data!\nIn this step fo the guide we’ll start with something simple, expanding the data we know about Organisations.\nCalculating the number of contacts belonging to an Organisation Using the All Organisations view as a starting point, clone it and rename it “Organisation - Calculations.\nWe will need to join down to the Contacts table, before we create our calculation field. Go to “fields”, highlight the add a calculation section Add a calculation called “Number of Contacts”, of type ‘Whole number’. Press Add The important area is the ‘Calculation Definition’. In this example we want to count the number of contacts each organisation has. We can do this by using a SQL statement called Count.\ncount() Between the brackets we choose which field we want to count. In this case the contact record\ncount({contacts.id:contacts}) We now need to press update to tell agileBase we have finished editing our calculation. Press Update.\nAs you can see the system has correctly identified that count is something known as an aggregate field and ticked the box for us.\nIf you click back on Fields you should see the list and how calculations are highlighted in purple to distinguish from regular fields taken from a table definition. Lets drag our calculation near the front”\nMove the calc.\nClosing the edit allows us to see our results.\nThis is a very simple example of an SQL calculation. For more examples as well as a link to the underlying Postgres documentation visit - docs- calculation\n[guide 1.4 - video 1] Calculating the Date of our Latest Sale to create a “Our Customers” list A further useful example is to show how we can use the results of a calculation to create a Live view, for example “Our Customers”.\nStart by adding a join down to Sales opportunities Instead of adding an existing Sales opportunity field let’s add a calculation Go to list of fields and add a calculation called “Latest Sale”, which of course will be a ‘Date’ field. Press Add This time our SQL looks like\nmax({sales opportunities.date won}) The same aggregate field option should be ticked for us.\nWe can add a filter based on the values in the calculation e.g. where ‘Latest Sale’ is not blank!\nYou should now see your list of Organisations has dramatically shrunk\nIf you are following along, it makes sense for a Quick name change to make it “All customers”\n[guide 1.4 - video 2] ","categories":"","description":"Demonstrate how easy it is to use one of the most powerful features of agileBase… Calculations","excerpt":"Demonstrate how easy it is to use one of the most powerful features of …","ref":"/guides/guide1-crm/calculated_datafields/","tags":["Citizen Developer level 3","v6","Calculations"],"title":"4. Calculated Datafields"},{"body":"Using Agilebase you can start small (perhaps in one team or department) and build apps iteratively to encompass a constantly widening range of business requirements. Many back office and CRM systems don’t typically store high volumes of data, but as systems grow its not uncommon to add transactional apps such as customer order processing for example, which can experience high throughput.\nAgilebase supports all three stages of an organisation’s lifecycle - startup, scaling and growth. As a startup, development speed and flexibility are key, during scaling efficiency becomes important and as a large organisation, control, robustness and trust come to the fore. We’ll explain how each of these is covered.\nDatabase - PostgreSQL Firstly, at a technical level, Agilebase is well covered to support large volumes of data and numbers of transactions per second (TPS) whilst remaining highly responsive for users.\nThe underlying database used to store data is PostgreSQL, “the world’s most advanced open source database”. It has a strong reputation for reliability, feature robustness, and performance.\nOur monitoring systems ensure reliable performance under load. Customers routinely build apps which store and process tens of millions of data rows. Should there be a need to expand to larger amounts, there’s always the option to upgrade a customer database to larger servers or distributed ‘hyperscale’ systems, such as Citus Data, which works with PostgreSQL.\nEngine - API Creator Typically, higher data processing volumes occur not when users are entering data, but when third party systems are connected via the API, which can feed in or extract data from high-volume sources such as websites or financial systems. The API Creator allows this to be done easily.\nAdoption As Agilebase use migrates from one group of people to another throughout an organisation, a project manager or architect’s concern moves from the ‘is it technically possible?’ question, to ‘is it going to be successful?’\nOver and over again we find that successful software implementations occur when users are happy. Frequently, Agilebase users evangelise the system to their colleagues and help grow the internal user base. There are a couple of reasons for this. Firstly, the user interface is friendly - not only easy to use but attractive and colourful. It sounds simple but it makes a world of difference.\nThe user interface is also consistent from app to app - whatever the function of the app, the same look \u0026 feel \u0026 layouts are used, reducing training requirements and letting users support each other.\nSecondly, as Agilebase is a low code / no code platform, users can be involved from the very beginning. If a project is managed well, their input will be quickly actioned in a working prototype - people then feel they have a stake in the final application, resulting in engagement and buy-in.\nTo aid adoption by new users, Agilebase allows an administrator to enter help content and links into many different places of the user interface, down to the individual field level. We highly recommend some time is spent doing this as applications are built.\nPartners We have a growing network of partners, with lots of experience and skills in consultancy, project management and development using Agilebase. Larger projects and companies may well want to take advantage of this range of abilities, e.g. to run planning, development workshops and training events.\nSecurity, privacy and control As systems grow, it’s important that a level of control is exercised over who accesses which data, how and when, particularly when sensitive personal information is stored, or core data central to the running of a company.\nIn a low code / low code environment such as Agilebase’s, an additional factor is controlling the evolution of the system. Too centralised and innovation can slow, too relaxed and it can run out of control.\nAll of these factors are taken into consideration when we design the administrative features that help decision makers set the rules and monitoring for application development. The Security and Compliance section of the documentation covers many of these. This is also an area of ongoing research and development - our roadmap blog post details some of the current thinking.\nCost An easily understandable, fair and transparent pricing policy means that annual costs can be reliably estimated for any future growth scenario, in fact multiple scenarios can be planned - nothing is hidden! See the costing section for more details.\n","categories":"","description":"Scaling applications as an organisation grows","excerpt":"Scaling applications as an organisation grows","ref":"/introduction/scaling-potential/","tags":"","title":"Scaling potential"},{"body":"Capitalise field name By default Agilebase displays field names in Title Case. Un-ticking this option disables that, which can be useful for special cases like e.g. ‘pH’ or ‘Length (m)’, which would otherwise show as ‘PH’ and ‘Length (M)’.\nIcon Rather than displaying a field name, show an icon, chosen from https://fontawesome.com/icons. For example, to show a phone icon for a phone number field, you could enter phone, for an email field envelope or a twitter handle twitter.\nField visibility Allow a field to be hidden or shown based on conditions.\nYou can either select a view containing the conditions to use or just create conditions directly under the Field Visibility heading. In either case, the conditions in use will be shown.\nBehind the scenes, the conditions are saved by creating a view (if none is selected already) and adding each condition as a filter. If a record appears in the view, the field will be visible, otherwise it won’t display to users.\nYou can click the ‘visibility view’ link to go to that view and edit it to add more complex conditions if you wish.\nAs the conditions are created in a view, this mechanism is really powerful. You can create simple or very complex critera, including all of the filter options in a view, for example basing a filter on a calculation and combining multiple filters.\nSo you could make a field appear only when a particular point is reached in a process, or a status is changed elsewhere in a form, or perhaps it should only be visible to people who are members of a certain role. See view filters for more information.\nTwo special options are available\nshow always - the default state show never - useful for hiding fields used for internal purposes, e.g. which help the internal workings of a workflow If this option is used on a separator field, then the visibility rule will apply to the entire block of fields under that separator.\nLock when value set If the field is blank, allow a value to be entered, however as soon as it has a value, lock to prevent further editing. The user can manually unlock, but will be prompted for a reason for doing so, which will be logged against the field as a comment.\nThis can be used to prevent accidental editing of important fields which should not usually be changed, for example a product’s stock code.\nUnlock if record in view If Lock when value set is ticked, unlock on certain criteria. Works the same way as Show if record in view.\nRequired If ticked, prompt the user for a value when they try to leave a record without one. Note we can’t force the value, as the user could refresh the browser as a workaround.\nFor dropdown fields with the value(s) set to Lists of users, this has the special effect of defaulting the field to the ID of the currently logged in user.\nProminent Prominently highlight the field on the screen, e.g. if it’s one that is important to fill out, without actually requiring a value to be supplied.\nSet from previous referenced field Provides a way to calculate a default option for a field. Tick this option and place a referenced field just before this field. The value of this field will be set from whatever value the referenced field outputs.\nIf the referenced field’s view has more than one field, the last one will be used, or if any have the same name as this field then that one will be.\nTo have a value set only at a certain point in a process, this option can be combined with the Show if record in view option. When the field becomes visible, the value will be set.\nSetting the value of a relation field is a special case because you need to set both the actual relation value, which is the numeric ID of the record you wish to relate to, and the display value i.e. what the user should see. The way to do this is:\nAdd a field or calculation with the same name as the display field for the relation. For example in a contact record, if you have a relation field ‘Company’ with its display field set to ‘Company Name’, then you could create a calculation called Company Name and set it to output the name of the relevant company. Add the internal row ID for the company to the referenced field’s view. This should be the last field in the view Note that another way of setting a value on record creation is to use a workflow set to run on record creation. If you need to set the value on record creation, using a workflow is the best way - it will seem slightly quicker to the user. However if you need to be able to wait a while before automatically setting the value of a field, perhaps until another field has been filled in, then using this referenced field option is the way to go.\nUnique Disallow any duplicate values from being entered. No records in the table can have the same value as each other.\nChange causes record refresh Through the use of some field options like Show if record in view above, the screen can change based on what’s entered into a form. This option can work as a switch to refresh the configuration of the screen if it does change as someone enters new data.\nFor example, if there is a table to store sales opportunities, one field may be the status. If the status changes to won or lost, then you may wish to show some extra fields like ‘date won’ or ‘reason why lost’ for example. To allow this, tick the ‘change causes record refresh’ option on the status field. Then whenever the status changes, these fields will automatically appear if relevant.\n","categories":"","description":"Options common to all fields of any type","excerpt":"Options common to all fields of any type","ref":"/docs/fields/field-options/common-options/","tags":["Citizen Developer level 3","v6"],"title":"Common Options"},{"body":"These pages describe the various types of fields it is possible to have in an Agilebase application. It is recommended to begin with the basic field types before moving on to dealing with special field types.\n","categories":"","description":"A list of field types, the purposes and options of each","excerpt":"A list of field types, the purposes and options of each","ref":"/docs/fields/field-types/","tags":["Citizen Developer level 2","v6"],"title":"Field Types"},{"body":"Log data reporting provides a rich view of system usage.\nEnhanced audit trail For organisations who have activated the enhanced audit trail, all logs are stored in user-accessible tables which are just like any other tables in the system, the only difference being the data is read only. This means an administrator can use the full power of the built in Agilebase reporting features, to create views, add calculations, charts etc., even export via the API.\nSo for example, you could analyse how many changes were made per month by each user, count the volume of logins from various locations or see what the most common fields are to search on. All actions listed on the usage monitoring page are available to query.\nData is also retained for an extended period, see retention periods\nIf interested in activating this feature, please get in touch. There will be a small recurring charge added to your bill.\nData stored Logins Username Date and time IP Address Country Internet Service Provider organisation name and location Client web browser (both summary and exact version details) Client operating system Data changes (record creation / update / delete) Username (in the case of an API call, will be ‘Public API [IP address]’. In the case of a system workflow, ‘System’) Date and time Action (e.g. update or delete) Table Field (if a single field is updated) Row ID - internal identifier of the record updated Saved data View access This covers any time a view is opened or filtered, either by a user, or an API call\nUsername (in the case of an API call, will be ‘Public API [IP address]’) Date and time Tile and view name Details - any filters and row limit applied Rows - the number of records returned to the user or API Processing time - the total server-side processing time in milliseconds needed to retrieve the data, and if for an API, transform it into JSON format Of which Q time (API calls only) - to achieve a fair level of load balancing, Agilebase operates a separate API request queue for each customer. If a request arrives and the system is still busy processing a previous request, the new one gets held in a queue. This field shows how much of the total processing time, in ms was spent waiting for previous requests to complete Bytes (API calls only) - the number of bytes of JSON data returned via the API Count - if many similar requests or API calls (to a particular view) reach the server in quick succession, they will be amalgamated together into one log line. The count then shows the number of requests the log line refers to, otherwise it will be 1. If more than one, then the rows, processing time, of which q time and bytes will represent the totals for all requests Table schema changes These are changes made to a table structure by someone with develop privileges, such as adding or removing a field.\nDate and time Username Table name Action e.g. ‘add field’, ‘remove field’ Details - e.g. the name of the field View schema changes Changes made to a view structure, such as adding fields, filters, calculations or charts\nDate and time Username Tile and view name Action Details - additional data related to the action, e.g. if adding a field, the field name Authentication changes A log of administrative actions such as assigning a user to a role, assigning privileges, or user actions such as requesting a password reset\nDate and time Username (of the user making the change) Action - e.g. add privilege Table name - only if the action relates to a particular table, e.g. assigning a role to a table Details - additional data related to the action, e.g. if adding a role to the table, the role name Standard reporting Built in reports are available in a number of areas, whether using the enhanced audit trail or standard logging.\nThe dashboard From the tiles interface, click the bird icon at the top left, then select usage dashboard. The dashboard contains system reports including usage data.\nTrends An overall usage treemap is displayed at the top. Each view is a section of the screen. Large areas represent views that get a lot of use, smaller areas those that don’t. Colours give immediate feedback on whether usage has been increasing (blue) or decreasing (grey) this month. Hovering over an area shows more stats including the top users.\nUnderneath that a series of sparkline charts show long term trends, across selected operational, tactical and strategic metrics, all geared to showing utilisation over a 12 month period.\nRaw data can be downloaded to spreadsheet using the links beneath each sparkline. Note only the most recent 200,000 records can be downloaded in this way.\nCapacity As well as actual usage, the dashboard shows total capacity i.e. how many users, records, tables etc. are present in the system, along with purchased capacity (if relevant). These elements affect billing.\nWorkflows A convenience view of all workflows which carry out automated data modifications, see workflows\nDatabase graph Finally, for background on what the data structure looks like and how tables are connected, the database graph shows relations between tables is visual form. This can provide a fuller understaning of the system.\nTable and view usage A quick overview of who is viewing data is shown in the administration interface for both tables and views.\nFor a table\nEdit the table Open the Recent Changes panel The report shows the number of times each user has viewed data from the table, per view. All views which contain any data from the table are included.\nFor a view\nEdit the view Open to the Recent Changes panel Similar data is show as for tables, but limited to the selected view.\nIndividual record histories Any user can see the complete history of changes to an individual record, up to the retention period.\nWhen editing a record, scroll to the bottom of the screen and click history.\nTo view the precise time of a change, hover over a date.\n","categories":"","description":"Viewing, querying and reporting on log data","excerpt":"Viewing, querying and reporting on log data","ref":"/docs/security-and-compliance/security-features/usage-monitoring/usage-reporting/","tags":["Software Architect","v6"],"title":"Reporting"},{"body":"For each table, Agilebase will automatically build a data entry form for users to view, add and edit records with.\nThe layout of this form can be controlled by selecting a layout option and adding separators to create blocks i.e. groups of fields which go together. This will create a more pleasant and usable system.\nLayout The layout option is the main control. There are three options:\nsingle column - a simple vertical list of fields blocks in two columns - makes the best use of screen space for large forms. Also allows tabs All fields before the first separator are displayed in a section at the top of the screen, in two columns After that, each separator added creates a new block of fields. Blocks are arranged in two ’newspaper’ style columns which are displayed below the top section If the table has tabs, they are displayed below the top section process flow - blocks of fields are arranged vertically one after each other, works well when there the data entry form maps to a set process Here’s what the same data entry form looks like in each of the three configurations\n“single column”\n“two columns”\n“process flow”\nand here’s an example of 2. blocks in two columns with tabs.\nSeparators To form a block, click on the fields tab of a table and add a field of type ‘separator’ - see the fields reference. Move it to where the start of the block should be i.e. before the first field in the block.\nRecord titles In the screenshots above, you can see that each record has a heading, or title. drawn from the data.\nTo set one or more fields to include in the title, use the field option use as record title\nSee also When a relation field is near the top of the form, it’s also moved to the record title level to become a title link, allowing navigation upwards to the ‘parent’ record. See hierarchy navigation for info about upwards, and downwards, navigation.\n","categories":"","description":"Customise a table's form on-screen","excerpt":"Customise a table's form on-screen","ref":"/docs/tables/table-layouts/","tags":["Citizen Developer level 2","v6"],"title":"Table layouts"},{"body":"Agilebase comprehensively logs changes to data in the system as well as changes to the structure of the system. Powerful reporting facilities allow the generation of audit trails, trend monitoring, customer success monitoring etc.\nWhat is logged User actions The following actions are recorded\nlogins, including connection details record edits (create, update and delete) global edits comment additions and removals data imports and exports viewing and searching/filtering data in views password resets When logging a record deletion, the data values deleted are logged.\nFurther, for every record in a table, the following metadata is stored and can be included in views:\nThe creation time and time of last update The user who created the record and who last updated it The view count: how many times the record has been opened A visual activity histogram showing the number of edits per week over the past six months See automatically present fields for full details.\nAPI and workflow actions Data changes or outflows arising from API callsare logged to the same log store as user actions. Instead of logging the user taking the action, it’s logged as an API call with the IP address of the source of the request.\nAutomated workflow actions are also logged. Each is marked as a workflow actions with the name of the action (i.e. the view name) to identify it.\nAdministration and management actions All significant actions are recorded, in summary\nadding, updating or removing users, roles and privileges table additions and removals, field additions and removals, data constraint additions and removals view additions, updates and removals chart edits Viewing logs Changes to schemas (e.g. tables and views) can be seen in the editing panels for those objects. On the development homepage, a history of recent changes can be seen.\nChanges to an individual record can be seen from the ‘history’ link at the bottom left of any editing screen.\nIf the account has the enhanced audit trail then all data can be queried using Agilebase views.\nRetention periods Data is retained for 12 months as standard. The enhanced audit trail allows customers to define their own retention period, the maximum being unlimited.\n","categories":"","description":"Viewing usage statistics relating to users, tables and views","excerpt":"Viewing usage statistics relating to users, tables and views","ref":"/docs/security-and-compliance/security-features/usage-monitoring/","tags":["Software Architect","v6"],"title":"Usage Monitoring"},{"body":"Along with tables, views are one of the two foundational concepts used when building applications with Agilebase.\nWhat is a view? In fact, the concept of a view is not unique to Agilebase, it is a core part of any database system, including the PostgreSQL database that Agilebase uses to store, manipulate and report on data.\nHere are some of the advantages a view can offer, as explained by the Wikipedia Article on database views, slightly shortened.\nViews can represent a subset of the data contained in a table. Views can join and simplify multiple tables into a single virtual table. Views can act as aggregated tables, where the database engine aggregates data (sum, average, etc.) and presents the calculated results as part of the data. Views can hide the complexity of data In a nutshell, creating a view in Agilebase allows you to display information to the user in an easily searchable format. A single view of data can contain fields from many different places placed alongside each other. It can be filtered down to a subset, and/or contain summarising data like counts, totals or averages.\nViews can utilise the full power of the SQL language (mostly behind the scenes with complexity hidden from administrators) to create useful and advanced reports where necessary.\nOn the screen, a view is most usually output as a series of rows of data, with field names as column headings - like a spreadsheet.\nThere are also other ways of displaying the output, such as in a calendar or document library interface.\nViews are organised into tiles. Each tile contains a collection of views, organised into a menu system within it. Administrators can hence organise the display of data in a logical fashion.\nBehind the scenes uses As well as showing data to users, the power and flexibility of views allows them to be used in a multitude of different ways useful for administrators. For example, in workflow automations, to create APIs to allow third party systems to query the data, or to control hiding and showing fields.\nThere are many other uses we’ll come across throughout this documentation, in fact almost every major feature depends on views in some way.\nSo it’s a useful topic to understand.\n","categories":"","description":"Views allow the user to search and manipulate data","excerpt":"Views allow the user to search and manipulate data","ref":"/docs/views/","tags":["Citizen Developer level 2","v6"],"title":"Views"},{"body":"Choosing suitable options helps make the user experience friendly, and extends the capabilities of applications.\nSome options apply to all fields and others are specific to the type.\n","categories":"","description":"Customise the behaviour and display of fields","excerpt":"Customise the behaviour and display of fields","ref":"/docs/fields/field-options/","tags":["Citizen Developer level 2"],"title":"Field Options"},{"body":"It’s possible for a developer to create a third party application, for example a phone or tablet app, that communicates with Agilebase via the API.\nNow to use the API, you don’t need to authenticate as a user, as long as the app has the correct Authorization key(s), it can read and write data to Agilebase.\nHowever, in some cases the app may need to confirm that someone has a valid Agilebase account before allowing them to use the app. This may or may not be necessary depending on the use case, for example depending on whether the app is free to use for anyone, or must be limited to paying customers.\nTo validate a user, the app must redirect them to the Agilebase login page, let them log in and confirm that was successful. Therefore, a HTTP client is necessary - this can be a ‘web view component’ or a programmatic client such as the Apache HTTP Client for Java.\nIn this example, we’ll use the React Native Web View but the principle is the same for any programming language or library.\nGeneral Principle The application must reproduce the same login process as a human would, using a HTTP client. Importantly, the HTTP client must support cookies, as the login process depends on them, in particular setting a JSESSIONID cookie.\nMake a request to load the page https://appserver.gtportalbase.com/Agilebase/AppController.servlet?return=user_details. This will return the login page and set the cookie value. Submit the login form using the user’s username and password. If using a programattic process i.e. making the calls from code rather than using a web view, this means making a form POST to /Agilebase/j_security_check with the parameters j_username and j_password Detect whether the login’s successful. If not, the standard Agilebase login failure page will be returned If successful, a HTML page will be returned containing three hidden input fields, username, forename, surname containing relevant details for the logged in user. If being called from a React Native Web View, the page will also post back messages to React using this JavaScript: if (window.ReactNativeWebView) { window.ReactNativeWebView.postMessage(\"username:\" + username); window.ReactNativeWebView.postMessage(\"forename:\" + forename); window.ReactNativeWebView.postMessage(\"surname:\" + surname); } Example Here’s a full example of a login.js page using the React Native Web View. NB this is an example taken from a full application, so you will need to modify it / strip it back to suit your needs, before it can be run.\n//Node imports import React, {useEffect, useRef, useState} from 'react'; import {View, StatusBar, Image, ImageBackground, ScrollView} from 'react-native'; //Local imports import {styles} from '../../../styles/loginStyles'; import {Images, Colors, Constants, Language} from '../../../common'; import {useNetInfo} from \"@react-native-community/netinfo\"; import { WebView } from 'react-native-webview'; import {useDispatch, useSelector} from 'react-redux'; import {updateUserData} from '../../../redux/actions/commonAction'; import commonFunctions from '../../../common/commonFunctions'; import SplashScreen from 'react-native-splash-screen' const {fontSize, fontFamily, Window} = Constants; const LoginScreen = (props) =\u003e { const dispatch = useDispatch(); const {user_data} = useSelector(state =\u003e state); const netInfo = useNetInfo(); useEffect(function () { SplashScreen.hide(); console.log('netInfo==============', netInfo) if(netInfo?.isInternetReachable || netInfo?.details != null){ checkUser(); } }, [netInfo, user_data]); const checkUser = () =\u003e { if(user_data \u0026\u0026 user_data?.forename \u0026\u0026 user_data?.surname \u0026\u0026 user_data?.username){ goToNextPage(); } console.log('user_data', user_data) } const goToNextPage = async () =\u003e { await commonFunctions.removeTimeStamp(); navigateToNextPage(); } const onResponseFromWebView = (event) =\u003e { const eventData = event.nativeEvent.data; console.log('eventData', eventData); if (eventData.includes('username')) { dispatch(updateUserData({username: eventData.split('username:')[1]})); } else if (eventData.includes('forename')) { dispatch(updateUserData({forename: eventData.split('forename:')[1]})); } else if (eventData.includes('surname')) { dispatch(updateUserData({surname: eventData.split('surname:')[1]})); } } const navigateToNextPage = () =\u003e { if (netInfo?.isInternetReachable) { return props.navigation.navigate('Loading'); } return props.navigation.navigate('MyApplicationPage'); } return ( \u003cView style={styles.container}\u003e \u003cStatusBar backgroundColor={Colors.black} barStyle={'dark-content'}/\u003e {(netInfo?.isInternetReachable \u0026\u0026 !user_data?.surname) ? \u003cWebView source={{uri: 'https://appserver.gtportalbase.com/Agilebase/AppController.servlet?return=user_details'}} onMessage={onResponseFromWebView} textZoom={100} sharedCookiesEnabled={true} /\u003e : \u003cView style={styles.loadingImage}\u003e \u003cImage source={Images.logo}/\u003e \u003c/View\u003e } \u003c/View\u003e ); }; export default LoginScreen; ","categories":"","description":"Validating logins from a third party app","excerpt":"Validating logins from a third party app","ref":"/docs/security-and-compliance/security-features/app_login/","tags":["Software Architect","v6"],"title":"Logging in from an app"},{"body":"A large variety of applications can be built using the Agilebase platform. Customers can start small (perhaps in one team or department, or a new startup business) and build apps iteratively to encompass a constantly widening range of business requirements.\nOur costing structure has been developed to ensure fairness and affordability however far along an organisation is in their growth.\nCosting is controlled by five factors\nUsers - the number of people who can log in Tables - a measure of the size of an application - how many capabilities does it cover? Document storage - used if a company uploads or generates documents, images or videos Quantity of data - the number of records stored in a system Optional API charges - when integrating with third party software Each element has a sliding scale - the larger the number of units, the lower the per-unit cost, to allow large scale use while remaining affordable.\n","categories":"","description":"Costing structure","excerpt":"Costing structure","ref":"/introduction/costing-structure/","tags":"","title":"Costing structure"},{"body":"In Agilebase, a view ‘belongs to’ a table. We’ll see what that means in more detail below, but for now, just choose a table to show data from to users. In examples on this section of the documentation we’ll assume we pick a contacts table.\nWe’ll also assume we already have some tables and some tiles.\nTo create a view You can create a view from scratch, or clone an existing one then edit it.\nTo create from scratch\nSelect (or create a new) table. Click the table you want to create a view from Once the table has been selected, click name and views on the floating sidebar Click Add View You should now see your freshly created view There is an option Populate the view with fields from this table next to the Add View button. This is a convenience feature, which is ticked by default. When it’s ticked, the view created will contain the first 10 fields from the table - you can then remove any you don’t need or add more. When un-ticked, the view will start with no fields so you can add just those you wish.\nTo clone an existing view\nOpen a view Toggle on the development mode and click ’edit view’ at the top left Open the ‘properties and options’ Scroll down to the bottom of the panel and press the ‘clone view’ button [snippet video - cloning a view] Organising into a navigation structure On creating a view, its editing panel will open. One of the first things it’s useful to do is put the field in a tile - use the Tile dropdown option, under properties to do so.\nWithin a tile, the view can be added to a menu by editing the view name. Simply prefix the view name with a menu name and a dash. So for example, naming a view contacts - all contacts will create a ‘contacts’ menu containing the view ‘all contacts’ visible to users.\nEntering a view Help in the space underneath the name will provide help text for the view. This will be displayed in the menu underneath the view name. Here’s a screenshot of a sample menu, each with purpose completed.\nAdding and removing fields The core function of a view is usually to display a set of fields to people, as columns, so they can see data and search it.\nWhen you create a view, the first dozen or so fields in the table it was created from will be added automatically. You can hover over a field and click the cross icon to remove it from the view.\nTo add a new field, make sure you’re in the ‘fields’ panel (the default). An ‘Add Field’ section will be visible, with two selectors. The first on the left selects the source of data. This is typically a table, but can also be a view.\nThe default source is the view’s parent table. The system also intelligently presents any tables which are related - for example, when editing a view based on contacts, ‘organisations’ may be available if each contact belongs to an organisation. Finally, any tables or views which are joined to this view are available as sources.\nOnce you’ve selected a source (if not the default), you can choose a field to add.\nWhen you press the Add button you’ll be prompted to edit the field name if you like. You can just press OK to accept the name of the field as it is, but if you like you can edit it first. That doesn’t change the field name in its underlying table, but it does allow you to name the field something specific just for this view. For example, in your organisations table, you may have a field ‘Organisation Name’. In a view of invoices to customers, you may want to name this ‘Customer Name’, just for that view.\nApplying sorts When someone opens a view, they can sort it by any column they like by clicking the column header. However when building a view, you may want to set a default sort order.\nTo do that, when looking at the list of fields in a view, click the little up/down icon to the left of the fieldname. That will apply a sort to that field. Clicking it again will change the direction of the sort.\nYou can add sorts to multiple fields, they will take effect from the top down, i.e. the data will be sorted by the top field with a sort, then by the next one down etc.\nAdding sections If a view has many fields, it can be beneficial to organise them into sections, just like you organise table fields into sections using separators.\nTo create a section, edit the field or calculation which should form the start of a section and enter some text describing the section into the Section Name box.\nWhen a user hovers over a column name which is the start of a section (identified by the vertical bar on screen), the section name is displayed. Here’s an example where the field Distinct Wish Count is the start of an ‘Actions’ section.\nUsing a view Once the view is created, how can someone use it? We won’t work through every possibility here as this documentation is for administrators rather than users, but here are some of the most important points in brief you may like to be aware of in order to support apps you build.\nFinding data By default, a search box appears under each column heading (the system can also be configured in a simplified way with a single search box to cover all fields).\nThe help icon (?) to the left of the search boxes details the types of search that can be performed. There are many, allowing for e.g. date-based searches, and and or searching, finding empty values etc. Helper features pop up for some field types, like date range pickers for example.\nSeeing summary stats Hovering over a column shows summary statistics, like a total and average (of all filtered records) for numeric fields, or a breakdown of dropdown/tags fields.\nLoading a record Once a record has been found, click a row in the view to load that record for viewing or editing. The record loaded comes from the table that the view belongs to (as referenced at the start of this page), even though the view may contain fields from other tables as well.\nIt’s also possible to use inline editing to edit the contents of fields directly in the view.\nPressing the plus button to the left of the view contents will create a new record in the view’s parent table.\n","categories":"","description":"How to create a new view and place it in a navigation structure","excerpt":"How to create a new view and place it in a navigation structure","ref":"/docs/views/creating-a-view/","tags":["Citizen Developer level 2","v6"],"title":"Creating a view"},{"body":"Agilebase does its best with sensible defaults to create a friendly user interface.\nIt’s useful for a software architect to know how to configure and tweak the system to allow the to user navigate the structure of an application in the most intuitive way possible.\n","categories":"","description":"Customising how the user navigates an application","excerpt":"Customising how the user navigates an application","ref":"/docs/tables/hierarchy-navigation/","tags":["Software Architect","v6"],"title":"Hierarchy Navigation"},{"body":"These are the core types of fields by which data can be entered by users (or other sources such as the API or a workflow).\nText Text fields are the most commonly used. Depending on field options, text can be entered into a standard data entry control, a large box allowing rich formatting (bold, italic etc.), chosen from a dropdown of options or added as tags.\nNumber When adding a number field, select a precision from the dropdown. If 0 is chosen, then it will be a whole number (integer) field. If any other value is chosen, it will be a decimal field. The decimal precision can be changed at any time in the field options, but a whole number can’t be converted to a decimal or vice versa via field options.\nSee changing field types for more information.\nDate Represents a date or date/time, of any precision from year to second.\nAuto-generated number sequence The value of this field will be generated automatically, incremented by one each time a record is created.\nSequence numbers are never rolled back, even on the deletion of a record, so they can’t be used if a gapless assignment of numbers is required. To accomplish that, calculate a value with a cross-referenced field.\nRelation Adding a relation creates a link from one table to another. For example, a contacts table may contain a relation linking to an organisations table, to allow a person to belong to an organisation. See relational database concepts for further info.\nCheckbox Represents a boolean (true or false) value.\n","categories":"","description":"Text, number, date/time, auto-generated number sequence and checkbox fields","excerpt":"Text, number, date/time, auto-generated number sequence and checkbox …","ref":"/docs/fields/field-types/basic-field-types/","tags":["Citizen Developer level 2","v6"],"title":"Basic Field Types"},{"body":"Colour words When this field is included in a view, highlight it with a colour if the content is one of a number of words. The most up-to-date values to be highlighted are shown in the administrator interface, but as of the latest update of this page, they are\nText calculations can also be coloured based on the same words - see the calculation options\nWords will also automatically be coloured when a ‘radio button’ style is used for a field, i.e. when\n‘use dropdown’ is ticked ‘use only given values’ is ticked there are three or fewer values to choose from Swap colours When words are coloured (see above), ‘yes’ will usually be coloured green and ’no’ red etc. However depending on the field name or question being asked, you may want to swap the colours.\nFor example, for a field ‘Passport Checked’, you might want yes to be green, but for a field ‘Dangerous Substances Detected’, yes should be red and no should be green. In that case, use this option to swap the colours.\nThe words that will have colours swapped by this option are:\nyes / no true / false low / high Use dropdown Rather than a simple text entry field, display a dropdown of choices from which one can be selected. If there are only a few values, then the user interface may display options in radio button style, but the behaviour is exactly the same.\nOptions can be provided by entering a comma separated list into the value(s) setting as below. If no options are specified, then the list of options will be automatically generated from the set of unique values already entered into records. In this way, a set of values will gradually grow as people enter new data.\nSee also the Use only given values option below to enforce the use of provided values only.\nUse tags Similar to Use dropdown, but rather than only letting the user select one value, multiple values can be chosen at once.\nAn example use may be selecting countries of origin for an ingredient, where it may come from different countries (perhaps via different suppliers).\nThe list of available options is specified in exactly the same way as for dropdowns above.\nUse only given values If a dropdown or tags list is used as above, ticking this option enforces the use of one of the provided values.\nIf it’s un-ticked, then an ‘add new entry’ option will be available for users to manually add values which aren’t yet in the list. Added values will be visible to all.\nIn some circumstances, it can be useful to leave this un-ticked and let options grow organically, until a certain point. Administrators can then rationalise and ‘hard-code’ values from the most commonly entered. In other situations, it may be best to specify available options right from the start.\nValue(s) For basic text fields, i.e. not those which display as dropdowns or tag lists (see below), this simply provides a default value to set the field to when a new record’s created. If not provided, the field value will be blank on creation.\nField defaults can also be calculated, with a simple or arbitratily complex calculation. To do that, instead use the Set from previous referenced field option.\nSpecifying dropdown lists and tags fields If either Use dropdown or Use tags is selected, the value(s) option provides a list of options with which to populate the dropdown, or a set of tags to choose from. Enter each option here separated by commas.\nIf the list starts with a comma, that means the field should be blank by default when a record is created. If not, then the default will be the first value in the comma separated list.\nIn the dropdown/tags list, the options will be ordered alphabetically, not shown in the order they’re entered in. If you wish to give the values a particular order, you can prefix them with a number or letter followed by a closing bracket like so: 1) cold, 2) warm, 3) hot. The number prefixes won’t show to the user.\nCustomising the list of options per user As well as entering a default set of options for dropdowns and tags fields as above, it’s possible to add options which will only be visible to certain users, specifically those in a certain role.\nThe way to add an option which will only be visible to users of a role is to add |rolename after the option, that is a vertical bar followed by the name of the role.\nFor example, setting the list of options to\n1) not billed, 2) awaiting payment, 3) paid|finance\nwill mean that anyone will be able to set the field to 1) not billed or 2) awaiting payment but only members of the finance role will be able to see and set the 3) paid option (once it has been set, it will be visible to everyone).\nLists of users Also for dropdown lists and tags fields, Agilebase can generate dropdown contents based on a list of users and/or roles in the system. To do that, select users or users and roles from the ‘fill with’ selector just below the value(s) input. The standard user ID format throughout the system is used, ‘Forename Surname (username)’.\nOnly users/roles which have privileges to view the data in this particular table will be shown in the list. That can keep things manageable if a system has hundreds or more users.\nAn example use would be assigning an account manager to a customer, selecting from a list of staff members (who are users).\nWhen a user is selected in this way, more options for use are opened up, such as automatically emailing the selected person when there’s a status change or something is overdue for example. Agilebase can look up the user’s email address to accomplish this, See email workflows for details.\nWhen using ‘fill with users’, the list of users to appear in the dropdown can further be narrowed down by role if required. To do that, enter the text\n_users|role1,role2,role3\ni.e. _users followed by a vertical bar and then a comma separated list of role names. Only users which appear in one or more of the named roles will appear.\nIf you want a field to auto-populate with the ID of the currently logged in user, enable both this option and the required field option.\nText case Convert people’s input into the required case as it’s entered - choose from\nlowercase UPPERCASE Title Case Size If ‘short’ is chosen, a standard single line input box is displayed.\nIf ’large’ is chosen, a multi-line text entry box is shown. This option also lets people format the text entered, such as using bold, italics or bullet points. For data security reasons, only certain formatting is allowed.\nUse as record title The user interface has the ability to highlight the importance of certain fields by showing their contents in large font at the top of the record data. For example, a Company Name field may be the record title for an organisation record.\nThis option can be selected for multiple fields in a table. In that case, the first field will be the main title, others will appear as subtitles.\nPreventing duplicates Enabling the ‘use as record title’ option also has the effect of enabling duplicate detection. The system will detect when a value is entered that is close to an existing value in the system. Any ‘close’ values that are found are displayed as links to the relevant records.\nThis can be useful when e.g. entering company names. Although a field can be marked unique to prevent exact duplicates, that won’t pick up near matches, which this duplicate detection will. For example, ‘The Universoty Of Bristol’ and ‘University Of Bristol (UOB)’ will be detected as close matches, or ‘Agilebase’ and ‘Agilebase Ltd’.\nThe system uses trigram matching to detect similar values.\n","categories":"","description":"Options specific to text fields","excerpt":"Options specific to text fields","ref":"/docs/fields/field-options/text-field-options/","tags":["Citizen Developer level 2","v6"],"title":"Text Field Options"},{"body":"Learning Aim: Using Cross Reference (Xref) fields in a table definition to display related info. Introduce WorkFlows (Buttons, sending emails, document generation). Being organised by using a naming convention!\nPrerequisites: User to have watched “Add a Sales Pipeline” and “Introducing calculated” video. Understand how to create calculations in views.\nIntroduction This part of the guide starts to introduce some more powerful and advanced features of the agileBase system. It looks at how we can give users of our basic CRM some power ups that make it a better user experience. Let’s continue with our Sales Opportunities and introduce the concept of cross referencing data before adding an automated email ‘reminder’ and a button to the user interface…\n[guide 1.5 - video 1] Getting things ready As a system starts to get bigger it helps to organise the “behind the scenes” views as much as the tiles and views that out users interact with. It is good practice to create a collection of System Tiles where you can file the “behind the scenes” work.\nWe would suggest the following tiles:\n“System - Cross Reference” for the lookup style views that will add data to our forms “System - Workflow” for the automations “System - Visibility” for the rules that control the visibility of specific User Interface items “System - Tabs” for the views that control the list of child items seen on a forms tab “System - General” for everything else Adding Look Up data to a Form In this first example we want to show the user who the owner of the company is rather than letting the user set it.\nStart from the Tiles interface, and enter the build interface.\nWe first need to build a view that will look up the data for us.\nFind the Sales Opportunity table, click to Edit, navigate to Names and Views, and Create a new view (with out all fields) in the Tile called ‘System - Cross Referenced’… Try using the name “xref - Sales Opportunity Organisation Owner”\nTo find out who the company owner is we need to navigate the relational database. In this case, UP to the organisation, then DOWN to contacts.\nAdd the joins!!!\nTypically, Cross reference views only have a few key fields of information…\nAdd Name, tel and email\nHowever, we only want contacts that we know are the Owners, so add a filter on the contact role where Role contains “Owner”\nAt this point it’s useful to look at the data and judge whether it seems about right\nNow we need to add this data to the Sales Opportunity.\nGo back and Edit the Sales Opportunity table and show the list of fields.\nAdd a Cross reference field. This is just a special type of field that needs a little bit more setting up than a regular field.\nAdd the new field, name “Company Owner(s)”, set the type to ‘cross referenced data’\nTable to Use: Sales Opportunities\nView to use: ‘xref - Sales Opportunity Organisation Owner’\nMove it to right place (probably near the top)\nClose the edit, navigate to a Sales opportunity record and see how it looks\nYou have a little bit of control how it appears on the form, by choosing ‘Tabular display’ and or the drop down ‘display of fields’\nAutomations - sending an email Our second example is going to demonstrate the power of Workflows. We can configure the system to be working when we’re not! We will now add an internal ‘Reminder’ email that will prompt the owner of our Sales opportunities to update their progress. You can read about this facility at docs workflows - sending an email\nIMPORTANT NOTE - Whilst Agilebase can be used to send emails, it should NOT be used for marketing purposes. Rather it should be used as a method to notify people about data associated to the system. In this instance we are going to remind people that they have ‘Sales opportunities requiring updates’\n[guide 1.5 - video 2] 1. Starting from the view of Tiles, enter the build interface. We first need to create the Workflow that will do all the work for us.\nFind the Sales Opportunity table, click to Edit, navigate to Names and Views, and Create a new view (without all fields) in the Tile called ‘System - Workflows’. We suggest a name like “WF email - Sales opportunities requiring updates”\nPrefixing with WF, along with some text, makes it clear to future developers what action the Workflow performs.\n2. Our intial task is to add all the fields we wish to use in the email Add the join to get the Main contact’s full name\nAdd Title, Date of Enquiry, Main Contact, Owner, Last updated\n3. Now Add the filters so we only get the records that need chasing. Obviously we only want to chase Opportunities that have not been updated recently\nAdd a filter for Last Updated that is older than 1 week\nWe also only want to chase Opportunities that are ‘In Progress’. Our Status field uses a number prefix to make this easy… Opportunities that still need to be progressed have a prefix number lower than 4, therefore add a second filter for Status Less Than 4\n4. Setup the email Click on the “Workflow - send emails” option on the Left hand Side of the Edit pop-up.\nWe are sending an internal ‘email notification’, so click the right hand option\nSet the options much like you would a mailmerge in Word. In agileBase you use the Curly brackets to let the system know where to insert the data (notice the list of fields available to you above the To input field.\nFor example we want the “To” field to be set to {owner}\nSubject can be set to ‘Sales Opp Update needed for {title}‘\nAnd the Body of the email can be set to\n‘Hi {owner} You have a Sales opportunity called - {Title} from {Date of Enquiry} that has not been updated since {Last updated}. Please contact {full name} and do what a good salesperson does and close the deal!!! Regards Agilebase’ The system will colour the text red if you get any of the merge fields incorrect\n5. Setting up the workflow Set the Workflow to run everyday\nSet the Log send time and choose every 24 hours. Once set to 24hours you can specify a time the workflow should run. Dont forget to log when it sends to a new field called ‘wf_SalesOpDateChaseSent’\nBehind the scenes agileBase has automatically added a filter that means this Workflow will only ever chase once. Whilst this is probably the case in 90% of cases when we chase things by email, in this example we want to chase every 7 days. So we can alter the Filter.\nNavigate to the filters option\nRemove the automatically created filter on ‘wf_SalesOpDateChaseSent’.\nNow, add one back in with ‘wf_SalesOpDateChaseSent’ must be older than a week, and then click the ‘or blank’.\nFinally, if you click on the view title, the display will load in the list of records that the system will email next time the Workflow runs - which should be tomorrow at your specified time.\nTIPS Go to ‘Properties and options’, and set the ‘Row limit’ to 1\nYou’ll see the view only has one item in it.\nIf we now go to ‘workflow - edit records’, we can press ‘Run Workflow Now’, and it will only send the one email!\nWe can also see evidence of the email being sent in the Logs, recent messages section.\nNow don’t forget to go back and remove the Row limit!”\nA look at the “Chaser” The email notification option usually sends a single email per record. The Chaser is a built in feature that is preconfigured to send repeat emails. This is a bigger, more feature rich version of what we just setup. Again, it’s something that runs in the background.\nIt’s specifically aimed at automating those emails you send to 3rd parties chasing for specific information. But can also be used for internal chasers… which is what we are going to demonstrate with a chaser for Outstanding Tasks”\n[guide 1.5 - video 2a] Setting Up a chaser Go in to development mode and find the Tasks table.\nAs we’ve done before add a new view to the workflow tile and call it ‘wf chaser - outstanding tasks’.\nGo to the send emails option and choose the chaser option.\nClick the first tickbox and enable the chaser.\nThe system does a lot of the heavy lifting for you, adding fields, and creating the calcs and views needed for it to work, but dont forget to check what time of day you wish the chaser to run.\nYou can see in the screeshot above how the system has created several calculations setting things like ‘Chase every’ and ‘escalate after’ and ‘escalate to’ which the system references to control the way the chaser works.\nFor more information please visit docs sending a chaser\nAt a bare minimum you will need to change who we are sending the email to.\nEdit the “To” calculation and change it to be the “assigned to” user.\nAnd add the appropriate filters which in this case are when the “Due” date has passed (older than 1 day). And the status is not equal to completed.\nSepping back and looking at the data returned by the view we can see in its current form the chaser will send an email every 8 days, and after 5 attempts will stop but as we have NOT set the escalate to field no one will be notified that this task has failed to be completed!!!\nAdding a button to a form In this third example we want to add a button to the user interface so that when the Sales Opportunity is won, we want that button to set the status AND log who did it AND when!\nStart from the Tiles interface, and enter the build interface.\nWe first need to build a Workflow that will do the actual work of setting the data for us.\nFind the Sales Opportunity table, click to Edit, navigate to Names and Views, and Create a new view (without all fields) in the Tile called ‘System - Workflows’. We suggest a name like “Sales opportunity WON”\nN.b. We have NOT prefixed this workflow and the name of the view will be what the user sees on the form’s interface\n[guide 1.5 - video 3] 1. Setting DATA For our workflow to set data we need to create a calculation.\nWe learnt how to create calculations in a previous video\nIn this case we want a ‘text’ calculation.\nIt is essential that we use the same name as the field we wish to set. In this case ‘Status’.\nThe correct way to write SQL for Text fields involves using single quotes to hold our value. It is also important that we set the field to be the right option in our Status drop down - in this case it must include the number prefix. Set the calculation value to be…\n‘4) Won’ We also want to set WHO closed the Sales Op. This is another text field but this time the destination field is called ‘closed by’.”\nWe can use a special bit of SQL called a variable to find out who is logged in.\nFrom the list above we can see we need our calculation text to be\nab_userid() 3. Setting up the WORKFLOW Finally we need to turn this view into a Workflow that does something!\nIf we choose the workflow - edit records section we can change the Action to ‘Update the Matching Sales Opportunity’\nWe can use the fact that the system needs to store the date it perfomed the action by setting “log update to” to the exisitng “Closed date” field\nWe will leave Frequency as ‘Manual’ as we want the user to use a button to fire this workflow\nAdding the Button to the UI At last we are ready to add the button to the user interface\nGo back to Edit Sales opportunity table and show the list of fields\nButtons are just Cross reference Fields that are setup to be workflows\nAdd the new field to the table… name “BTN - Sales Op WON”, type cross referenced data\nTable to Use: Sales Opportunities\nView to use: ‘Sales Op WON’\nMove it to right place, probably near the bottom, and see how it looks\nHiding the button when we dont want it!!! First of all try pressing the button\nYou can see that the status is now Won\nHowever, at the moment, even though the button has been pressed and we’ve set the status to Won we can still press the button again!!!\nTo stop this we need to apply a visibility rule to that button to hide it. In this case we want the button to be hidden if the sales opportunity is already marked as Won.\nGo back to Edit Sales opportunity table, show the list of fields and click to edit the BTN field\nScroll down a little and you can see the section about Field Visibility.\nSimply set the filter required - In our case this means the status value is less than 4 as seen in the screenshot above.\nOther types of Automations There are several other types of automations… we’ve already seen sending emails in this guide, but you can also create new records and generate PDFs. If you are interested please take a look at our other guides linked below and the associated documentation\nList of different types of workflows\n","categories":"","description":"Introducing more advanced features such as cross referencing data and building a utomations","excerpt":"Introducing more advanced features such as cross referencing data and …","ref":"/guides/guide1-crm/cross_reference_and_automations/","tags":["Citizen Developer level 3","Junior Software Architect","Cross References","Automations","email","buttons","PDFS"],"title":"5. Cross References and Automations"},{"body":"Learning Aim: Understand basic database privileges… Roles and giving them to Users!\nPrerequisites: To have built a multi table system, to have more than themselves as users.\nIntroduction AgileBase uses the classic concept of Roles to help you control the access users have to the system you are building. A classic metaphor would be the manager of an office has the keys to the building, whilst the staff do not. The person acting as the manager may change overtime, but the permission and privileges (in this case having keys) does not!\n[guide 1.6 - video 1] Creating Roles For our scenario of a Basic CRM we will model the simple situation that all users will need to access contact information, but only some users will log tasks. Similarly, only some users will access sales opportunities. We can start by creating a Role called ‘Orgs and Contacts’ Press Add Role and name it ‘Orgs and Contacts’ Start by looking at the Privileges list. As you can see this shows you a list of ALL the tables in the system. We want users with this role to be able to read and importantly WRITE any organisation info. Set the radio button Edit on Organisations, Sites and Contacts Now look at the Members option. We can give this permission to all our users.\nFor our Basic CRM we will need to do the same for a role to use Tasks and another for Sales Opportunites\nUser Roles, Permissions and Tiles Now to take a look from a User’s perspective. Back to the starting page of Development mode and click Users to show ALL users Click on a user’s record If we click on the Roles option, we can see any roles the user may be missing. Simple click to add Sometimes it’s useful to see an individual’s permissions. This can be done by looking at the Privileges tab on their user record.\nPerhaps, more useful is ensuring they have the tile to access the functionality!!! Click on Tiles and you can see whether they have our Sales opportunity tile. When you add a tile you are prompted to choose the default view. It is an important consideration to choose the most appropriate view for your users. Advanced Access Control Sometimes we may find a situation where access control can not be broken down to complete tables, but instead we want to have control on a field by field basis. In this instance we can use field visibility rules combined with the roles system. In our example scenario we have a role called “HR” and we only want ONLY users with this role to see a Date of Birth field on the Contact record.\n[guide 1.6 - video 1] We need to create a view that will control the visibility of the field, so we create a view in the “System Visibility Tile”\nField Visibility and User Roles We have already had an exmaple of using a visibility rule to hide a button. In this case we are going a step further and controlling visibility based on the logged in User’s roles. To start we will need a view called ‘vis - Contact HR only’ built rom the Contacts table. Since Field Visibility rules work by only showing the field if the record exists in a specified view we don’t need loads of columns, we just need to concentrate on filtering. For this example we need to filter by the Role the user has, and we can do this by using a calculation. Add a Calculation field of type boolean called ‘is in HR’. The SQL you need is….\nab_userroles() ilike '%HR%' It is easy to follow if you have an understanding of SQL, if not there is plenty of help and tutorials on the internet. However, as a brief explanation, aB_userroles() is a variable that will return the list of roles that the logged in user is a member of. Ilike is a text match that looks for in this case the letters HR. In otherwords, this query will let us know is the user is a member of the HR role. Dont forget to apply the filter by going to the fiter option and adding where “is in HR” equals True\nAll that’s left to do is apply the visibilty rule to the chosen field. In this example, navigate to edit the Contacts table, Click on the DOB field. Scroll down to Field Visibility, show choosing the view ‘vis - Contact HR only’\nSUCCESS - A basic CRM If you have been following along and building your own system then congratulations you have a fledging CRM system for your business. You now have knowledge of the all the building blocks needed to extend this tool and turn it into a powerful back office system to help your colleagues manage their work.\n","categories":"","description":"A look at the inbuilt security model and how to use it to control access","excerpt":"A look at the inbuilt security model and how to use it to control …","ref":"/guides/guide1-crm/security-and-access-control/","tags":["Junior Software Architect","Security","Access control"],"title":"6. Security and Access Control"},{"body":"In Agilebase there are two mechanisms for charting and visualising data, each suited to a different purpose\nour built-in charting exporting data to third party business intelligence tools If you’re starting out, we recommend beginning by looking at built-in charting.\nFor more advanced users, here’s a description of when each of the two options may be appropriate, with reasons why.\nBuilt in charting This should be the default starting point. It’s great for ad-hoc charting, i.e. to get quick answers to questions you may have about the data in the view you’re looking at.\nCreating charts can be used in conjunction with building views, in an agile fashion. For example, if you’re looking at a view of invoice and want to see a breakdown of totals for the year by customer type, but the customer type field isn’t in the view, no problem. Just\nadd the customer type field to the invoices view create a chart to total up values by customer type Developers can also choose to have certain charts emailed to different groups of people on a regular basis. For example, [TODO]\nExporting to Business Intelligence Any tool you wish such as Power BI or Tableau for example can be connected.\nThis may be useful when\nYou want to report summary KPIs or trends upwards, to higher levels of management, so you need a dashboard to include charts from different views in Agilebase in one place to present them in particular formats suitable for reporting, e.g. in particular sizes/layouts or using company colours potentially to include data from additional sources in the one dashboard e.g. from accounting systems as well The source data views in Agilebase are mature and aren’t likely to change. Changes can break any integration set up You are happy with the privacy and data security implications - see below Privacy and data security When connecting a Business Intelligence tool, it’s important to realise that data leaves Agilebase and therefore is no longer protected by Agilebase’s roles and privileges system.\nYou may have data in Agilebase which is only accessible to certain members of staff, however when accessed outside of Agilebase, those rules no longer apply. That doesn’t necessarily mean the data is accessible publicly, but it does mean it’s controlled by whatever privilege system the third party tool uses, which will be different to Agilebase’s.\nTherefore, from Agilebase’s point of view, similar rules will apply when connecting a BI system as to when exporting data to spreadsheets. For example\nAny user connecting a BI tool will be shown a warning of these consequences, which they’ll need to accept prior to going ahead Agilebase system administrators will get email notifications every time data in a view is made available to BI tools, containing information on whether that data is marked as sensitive or private Only people with DEVELOP privileges on a table can connect BI tools. They also have to have two factor authentication enabled. ","categories":"","description":"Data visualisation options","excerpt":"Data visualisation options","ref":"/docs/charting/","tags":["Citizen Developer level 1","v6"],"title":"Charting"},{"body":"Without any joins, you can only add fields, filters and calculations (display data in other words), from a view’s parent table - the one it was created from. When joins are added to other tables or views, you can also bring in data from any table or view joined to.\nFor example, a view based on the contacts table could join to organisations (as long as there is a relation field from contacts to organisations). You could then add in organisation name to the view, as well as fields like contact name, phone number and email address.\nOr for a more complex example, if you start with a view from a recipes table, you could potentially join down to ingredients, then on again to allergens of those ingredients, allowing you to work out with a calculation the complete list of allergens in any recipe.\nAny number of joins to different tables or views can be added to a view.\nAdding a join Agilebase will automatically pick out the common tables you may wish to join to, by seeing which are related via relation fields. Once you get used to the concepts, you may also wish sometimes to add joins manually to tables or views not automatically suggested. That will be covered at the end of this page.\nTo add a join\nLoad the view you wish to add a join to and toggle on development mode Click the big pencil icon at the top left of the screen to bring up the ‘Edit view’ panel Click ‘joins’ A list of joins you can add will appear, each representing a link to a table with related data in it. Select one and the join will add The anatomy of a join The added join will appear graphically above the Add Join button. The lefthand ‘blob’ or part represents the table being joined from, on the right is the one joined to. In the middle is a selector for the join type, which we will come to.\nIn each part, left or right, the name of the table being joined from (on the left) or to (on the right) is shown in bold.\nUnderneath the table name, the name of the field used to match records is shown. When an ID field is shown, this just refers to the internal ID Agilebase uses automatically to make the match. It’s only of relevance if you’re creating advanced joins manually - see below, so can be ignored otherwise.\nIn this example, we have a join from the contacts table to companies, to allow us to add company information into our view. The link was made based on the organisation field in the contacts table, which lets a company be assigned to a contact.\nUpwards and downwards joins You may notice when clicking Add Join and looking at the list of potential joins available, that some of them show as joining up and others down.\nJoins up are from a ‘child’ to a ‘parent’, i.e. you can think of a contact as belonging to a organisation, so a join from contacts to organisations is an upwards join. The other way round, it would be a downwards join.\nWhat difference does this make? Well if you join down, then the view will contain one row for every child record, with repetitions in the parent data if the parent is the same. This is easier to see with a picture - here’s what a view from an organisations table looks like when it joins down to contacts - there are three contacts for the organisation TODO.\n** TODO: screenshot **\nHowever, joins down can be very useful when you want to aggregate child data, for example if you want to count the number of contacts each organisation has, you could add a join from organisations down to contacts, then add an aggregate calculation to count the contacts. The system would then condense everything into one row per organisation, like so:\n** TODO: screenshot **\nSo joins upwards are the more common case, but joins downward can be useful for particular purposes.\nComplex joins As above, Agilebase automatically suggests joins to data that’s related to the current view’s parent table as well as any of the tables already joined to. It uses relation fields to see what’s related.\nHowever, sometimes you may want to join to a table or view that’s not automatically suggested. These examples may become increasingly ’niche’ but they are a useful reference for similar situations you may come across.\nJoining to a view Joins to views aren’t automatically suggested, but you can still add them.\nWhen might this be useful? Well one example is if you have a view containing a complex calculation and you wish to include the results of that calculation in lots of other views in different places.\nSay you calculate various nutritional values of a recipe, such as the energy, salt and fats contents. You may wish to display that information in a few views for different people to query, as well as include them in product specification documents (which can be generated from a workflow view) and perhaps product labels as well, using a view to send data to third party labelling equipment using an API.\nTo add a join to a view:\nEdit the view and open the Joins panel as above Under Advanced Add Join, select the left source and field, the right source and field, then press Add The last step is the only one different to the normal join addition process, and the one that needs a little explanation\nThe left source is the table or view to join from. Often (and by default), this will be the view’s parent table The left field is the view from the lefthand table to match on. Often (and by default) this is the table’s ID field. If you’re joining on a relation, choose the relation field The right source is the table or view to join to The right field is the field to match. This will usually be a table ID field. If you chose an ID field for the left field, then choose the same ID field in the target view. If the left field is a relation, choose the ID of the table it relates to on the right Example To take the example above of the nutritional calculations, assume we have a view called ’nutritional values’, built from a ‘recipes’ table. To include nutritional data in another view ‘recipe details’, also built from the recipes table, we would edit recipe details and add a join as follows:\nLeft source: the recipes table Left field: the ID:recipes field Right source: the nutritional values view Right field: the ID:recipes field Joining on a field other than the ID On occasion, you may wish to join to another table on data that is present in this and the other.\nFor an example, imagine our business opens a series of restaurants - we have a table ‘restaurants’ listing them. We may have a table of people who’ve signed up to our newsletter, called ’newsletter signups’. Some of them may have provided a postcode.\nTo find a list of people in the same postcode areas as each restaurant (the first half of a postcode, e.g. BS1):\nin a view ‘restaurant locations’, built from the restaurants table, create a calculation ‘postcode area’, which picks out the first part of the restaurant’s postcode (see calculations for how to create a calculation) in a view ‘all newsletter signups’, from the table newsletter signups, create a similar calculation, called ‘signup postcode area’ from the view ‘all newsletter signups’, create a join with left source: the all newsletter signups view left field: signup postcode area right source: the restaurant locations view right field: postcode area You’ll then be able to add the name of the restaurant(s) in each signup’s area to the view. This could be to send them a special offer for their local restaurant for example.\nAs you can see, this also demonstrates creating a join on a calculation.\nWhen you make a join on a field or calculation that isn’t an ID, be careful to ensure that the data is exactly the same on both sides. In this example, the postcode fields on both sides must be the same case (e.g. uppercase). Otherwise they won’t be picked up in the match.\nJoining on multiple fields Extending ‘creating a join on a calculation’ from the above example, here we can use a calculation to create a composite field to join on. This can be used when you want to join on a number of fields at once, not just one.\nThis can sometimes be useful in financial reporting. Our example here is creating a report totalling up sales by product by month. The twist is we also want to include product/month combinations in which there were no sales of a particular product for the month.\nWe’d start by creating a view of all product/month combinations over the past 12 months. See the series generation example in the calculations section for how to do this.\nWe’d then create a calculation ‘product month’ which would merge the product code and the month name. A similar calculation would be created in a ‘sales’ view, which shows individual sale lines, each with a product and month.\nFinally, we’d join the two views together, the product/month combinations on the left, the sales view on the right, choosing the ‘product month’ calculations from each as the fields to match on.\nThat would enable us to create a calculation totalling sales for each product/month, including zeros where there were no sales.\nRemoving joins Before removing a join, you first need to remove any uses of the joined object (table or view) from the view. To do that\nIn the ‘fields’ panel of the view, remove any fields which are from the joined object. The source of each field is shown to the right of the field name. That includes any dimmed ‘Link to…’ fields, which are primary keys. Still in the ‘field’ panel, check if any fields from the joined object are referenced from any calculations (shown in purple in the fields list). If so, remove those calculations or edit them to remove the reference Check the filters panel to see if any joined objects are used in a filter. If so, remove that filter It’s also possible a join may be there as an intermediate to another join. In that case, you need to work backwards removing any dependent joins first. If you still can’t remove a join, it may be that a field from the joined object is referenced elsewhere in the view setup - you can check other view panels like ‘properties and options’ or the ‘workflow’ panels.\n","categories":"","description":"Using joins to merge data from multiple sources into one view","excerpt":"Using joins to merge data from multiple sources into one view","ref":"/docs/views/joins/","tags":["Citizen Developer level 2"],"title":"Joins"},{"body":"Relations between tables are the ‘glue’ that holds together an application built using Agilebase. If you’d like to learn more about this fundamental concept, please check out the relational database concepts page.\nSome of the options for a relation field determine the nature of the links between tables, which can have a great effect on how an app works, so it’s very useful to know about them.\nOne to one only By default, a relation is a ‘many to one’. For example if a relation field in a contacts table links to an organisation, that organisation can have many contacts linked. If an ingredient links to a recipe, that recipe can have many ingredients. One customer can have many orders - examples are numerous.\nIf a relation is marked as ‘one to one only’, then that behaviour is changed so that only one ‘child’ record of this type is allowed for a particular ‘parent’ record.\nWhen is this useful?\nTake the case of an ingredient record. You may want to record nutritional information, chemical composition and allergens for example. With each type of date stored in a separate table, linked by a one-to-one relation, these can be separated out on the screen into tabs.\nThe advantages of doing that, as opposed to just adding all the fields into different blocks in a single table are\nThe user interface becomes clearer to navigate, especially if you have dozens of fields in each section Different privileges can easily be assigned to different tables. For example, you may want only certain people to be able to update allergen information, with others able to view but not edit the data. Do not auto-populate This is ticked by default. When un-ticked, this means that when you add a new record, the relation field will automatically be populated with a link to the last ‘parent’ item you were looking at. For example, if you edit an organisation, then move away somewhere else in the system, finally load a contacts screen and create a new contact, that contact will link to the organisation you were editing (assuming there’s a relation field linking contacts and organisations).\nA similarly named option exists for sequence fields, to prevent auto-population of sequence numbers\nOn parent delete This is an important option for controlling what happens when a parent record is deleted.\nLet’s assume we have a table of customers and one of invoices, each invoice linked to a customer by a relation field in the invoices table, so the invoice is a ‘child record’ of the customer. What would happen if a customer is deleted? This setting controls that and there are three options.\ndisallow deletion (the default) the user is prevented from deleting the parent record. They have to manually delete the child record before being allowed to delete the parent. This is the safest option and the default\ncascade delete the user is allowed to delete the parent and when the parent is deleted, child records are deleted as well. The user is still shown a prompt asking if they’re sure they want to do this. make orphan when the parent is deleted, the child record is retained, but un-linked from the parent. In our invoice/customer example, we would be left with an invoice not linked to any particular customer Note that this option is set on the child relation field, not on the parent side. Therefore you can have different rules for different child tables. A good practice is to set this to disallow deletion for any important information in the system, that you wouldn’t want to be lost (like invoices) and for other tables choose one of the other options appropriately.\nValue to display The field from the parent table that easily identified the record, to show in the child editing form. For example, for the ‘company’ relation field in a contacts table, you might select ‘company name’.\nSecondary value to display For additional context, a secondary identifying field from the parent record can be chosen. For example, as well as the name of a company, you may want to show the city or country they’re in.\nThis field doesn’t have to be directly from the parent table, it can also be any field in the view to use selected (the below option), including a calculation, which opens up more display possibilities, e.g. concatenating the values from multiple fields together.\nView to use When the user is selecting a parent record to link to a particular child, they will be able to use this view to show a list of parent records to choose from. Therefore the view must be created from the parent table.\nThey will be able to filter on any field in the view to search for a record.\nUsing pre-set view filters to narrow down the list of relevant records can be helpful, e.g. if only records of a certain category are required.\nUse only given values When this is un-ticked, allow the user to create a new parent record directly from the child record’s editing screen. Relation fields allow you to type the name of a parent record to find and select one. If no matches are found, a prompt will appear allowing the user to create one.\nShow navigation link When this is ticked (as it is by default), allow the user to navigate from a record containing this field to the one that the relation links to. For example, if a contacts table contains a relation to the organisations table, then when a user views a contact, allow them to navigate to the related organisation by clicking a navigation icon next to the field.\n","categories":"","description":"Options specific to relation fields, which determine how tables link together","excerpt":"Options specific to relation fields, which determine how tables link …","ref":"/docs/fields/field-options/relation-field-options/","tags":["Citizen Developer level 3","v6"],"title":"Relation Field Options"},{"body":"Tabs are one way of exposing relationships between tables, to allow the user to navigate the structure of an application. For example, in a companies table, a contacts tab may show all the people employed at that particular company.\nThe user interface can display more than two levels of structure on screen in other ways (e.g. showing a menu in a tab) and wherever the user is, they can navigate up or down the hierarchy of data.\nAdding a tab Edit the table you wish to add a tab to In the ’tabs’ panel, select a ‘child table’ in the Add a tab dropdown Tab types There are two types of tab, those which show a single record and those which show multiple records.\nThe type used depends on the relation field in the child table used in the tab, which links to the main table. If it is one-to-one, then a single record is shown in the tab. If it’s one to many, then a view appears embedded in the tab, with which the user can choose a record to edit.\nA one to one example may be showing a tab of specification information against an ingredient for example.\nA one to many may be a list of suppliers who supply that ingredient.\nTab options Typically, these options are only needed to finnesse an application. They can be useful to look at once the core of the structure is built.\nTab view For one to many tabs, which view to use to show items. By creating a specific view to use for the tab, you can control which fields are displayed in which order, add calculations, filter those which are shown etc.\nTo use a view as a tab view, it must contain the row ID field of the parent table i.e. the table the tab is present in.\nIf the view contains one or more charts, those charts will also be shown when opening the tab, filtered to show only data for the parent record containing the tab (in the same way that the records to display in the tab are filtered).\nPopulate from template Under a tab, a button allows the user to add records. For example in the contacts tab of an organisation, they would be able to add a new contact.\nHowever, in some situations you want to pre-populate the tab with records, rather than make the user create each one manually. An example might be order lines for a customer order in a telesales system. The order lines could be initially pre-populated with regular items the customer orders.\nOne way of doing that is to use the ‘Populate from template’ view, first creating a new view to use for this purpose. The view must contain the record ID field of the parent table (e.g. customer orders in our example). When the user clicks on the tab, if there are no records present yet, it will prompt to populate the tab. Each row from the view where the record ID matches that of the parent record (cutomer order) will be used to create a record in the tab.\nAny calculations in the view with the same name as a field in the tab table will be used to populate values in the records.\nAnother way of auto-populating data is to use a workflow which runs on record creation or in the background. You can choose whichever method works best for a particular purpose.\nShow only if in view This option allows you to control tab visibility - whether the tab is visible on screen or not at any time depends on whether the main record appears in the view chosen. This works exactly the same way as field visibility\nColour from view The colour of each tab can be chosen. For example, different steps of a process may each be represented by a tab. Once a step is complete, the tab may be coloured green.\nTo set this up, create a view from the main (parent) table. It should contain a text calculation called ‘colour’ which outputs the name of a colour e.g. green, or a blank value for no colour. The colour names are the same as those for record flagging.\nName By default the tab is named the same as the table used. However, you can override that here.\nUse inline editing Speed up intensive data entry by allowing each field in the tab view to be edited inline. Here’s an example using an order processing system.\nShow relation fields If this is un-ticked (which it is by default), any relation fields in the tab table will be hidden. This can be useful if you want to reduce the complexity exposed to the user. They can load all data including relations by navigating to the full record.\nChoose a record when a new item is added Used when a tab shows a join (also called a junction) table. To continue the example from that page, when adding a link between supplier and raw materials, if the raw materials table had a tab showing links, this option would cause the user to be immediately prompted for a supplier when adding a link.\nAccept emails from parent table Redirect any incoming emails to the parent table to be stored in this tab. See table options for details of receiving emails.\nMultiple tabs for the same table A final note about tabs. In a small number of cases, one table A may have two relations to the same table B. For example, a record of a contract between two parties may have a relation to the customer and supplier, both of which are records in an organisations table.\nIn this case, you may want to add two tabs to the organisations table, one to show contracts for which a particular organisation is a customer, another for which they are a supplier.\nYou can do that - just add two tabs for the same table. The system will use the first relation it finds for the first tab, the second for the next.\nAnother example is a recursive Bill Of Materials (BOM) system where a join table may link to a parent item and a child item.\n","categories":"","description":"Tabs allow navigation from a parent record to a related child record","excerpt":"Tabs allow navigation from a parent record to a related child record","ref":"/docs/tables/hierarchy-navigation/tabs/","tags":["Citizen Developer level 2","v6"],"title":"Tabs"},{"body":"Tabs allow navigation from a parent record to a child, e.g. an organisation to a contact, order to order line, recipe to ingredient etc.\nOf course, that child record may itself have subsidiary records of its own, e.g. a contact may have a tab for their training records.\nWhen that’s the case, Agilebase exposes both tiers of data on screen so the user can jump from the top level, in this example the organisation, directly to a contact’s training records.\nThis type of navigation manifests in different ways according to the setup.\nIf a child links to the parent with a one-to-one relation then links to ‘grandchildren’ are displayed by a menu in a tab. Here’s a menu showing the various grandchild items under a product’s specification.\nIf it’s a many-to-one, then grandchildren are represented by blocks at the end of the record.\nFinally, in the special case when a grandchild tab’s tab view contains the ID of both its immediate parent and the parent above that, then the grandchild contents are shown directly, underneath the child record. Here’s an example where there’s a three tier structure of\nsupplier approval -\u003e risk assessment -\u003e risk assessment scores. When the user looks at a supplier approval record, the risk assessment summary and scores can both be seen at the same time.\n","categories":"","description":"Agilebase automatically exposes three-tier navigation structures","excerpt":"Agilebase automatically exposes three-tier navigation structures","ref":"/docs/tables/hierarchy-navigation/to-grandchild-records/","tags":["Citizen Developer level 2","v6"],"title":"To grandchild records"},{"body":"In a table’s privacy and security panel, there are two options which are worth considering if the data is storing commercially sensitive information (plenty of information in most customer systems falls under this category!) or personal information as defined by EU General Data Protection Regulations (GDPR).\nWhen either option is ticked, two controls appear.\nNotify administrators on export Here you can enter a number. When a user exports more than that number of records at once to spreadsheet, all administrators (users with the administrator privilege) are notified by email.\nDisallow exports This is also a number, representing a hard limit on the number of records which can be exported from this table at any one time.\nSee also exporting for how to set up export privileges. Exports are disallowed by default.\nWhen This table contains personal data, sensitive data or data about children is ticked, a number of additional data entry boxes appear, to let you record the GDPR-relevant considerations.\nNote: This is for informational purposes only and doesn’t by itself ensure compliance with the GDPR!. We recommend looking at the ICO website.\nPotential exfiltration information When either option is ticked, some additional information is shown that can highlight opportunities for data to be exported.\nAny API views which send data to third party systems Any roles which are set up to allow exporting and which have users with privileges to see the table data ","categories":"","description":"Options relevant to storing commerically sensitive or personal data","excerpt":"Options relevant to storing commerically sensitive or personal data","ref":"/docs/tables/sensitive-data/","tags":["Software Architect","v6"],"title":"Sensitive data"},{"body":"These special types of fields are useful beyond basic data entry, for creating rich application functionality and user experiences.\n","categories":"","description":"Separators, comment feeds, referenced data, file uploads, automatic fields","excerpt":"Separators, comment feeds, referenced data, file uploads, automatic …","ref":"/docs/fields/field-types/special-field-types/","tags":["Junior Software Architect","v6"],"title":"Special Field Types"},{"body":"The ability to add calculations to a view opens up a world of possibilities. Within the confines of the SQL language, there’s no limit to what you can do, and those confines contain a pretty large space.\nThis is the only area of Agilebase which requires some ‘semi-programming’ to use - using snippets of SQL. SQL is a standard, widely popular and easy to learn language and there are lots of resources available on the internet.\nWe’ll start with some simple examples, then move on to some more advanced ones, but even then we won’t cover every capability so will point you to specific further resources and references.\nBut first, what are the mechanics of creating a calculation and adding it to a view?\nAdding a calculation Open the view you want to edit Toggle development mode on and click the big pencil at the top left of the screen Under fields, from Add Calculation choose a type (text, number etc.), give it a name and press Add The calculation editing screen panel now open to the right and you can type in your calculation.\nBefore doing that, we’ll quickly review the main areas of the calculation editing panel. There are\nName - you can rename the calculation at any time Type - as opposed to a standard field, you can change the type of a calculation at any time, e.g. from text to numeric or vice versa Calculation definition (SQL) - the actual contents of the calculation Comments or description - a place for you to enter your own notes about the calculation, maybe as an explanation of how a particularly complex calculation works for example The other options available we will cover below.\nNow we can get to the fun stuff and think of a calculation.\nBasic examples Firstly, we can of course do maths. So in the calculation definition, you can enter things like\n1 + 2 2 * 3 (multiplication) 10 / 2 5 ^ 3 (five to the power 3) Referencing fields Calculations normally need to act on existing data. We can included references to other fields, including other calculations, in the view by writing out the field name surrounded by curly brackets.\nSome examples might be\n{net price} * 0.2 (calculate VAT amount) (({sale price} - {cost}) / {cost}) * 100 (calculate the profit of an item as a percentage) You can reference not only other fields and calculations in the view, but also fields and calculations from any view or table joined to the view. The syntax for that is {source name.field name}. Underneath the calculation editing space is a list of all fields that are available to be added, for reference. You can just copy and paste them into your calculation.\nSpecial functions In the same way that you reference fields, you can also reference some special functions that output other information:\nab_tile() - the name of the tile the user has open (not necessarily the same as the tile the workflow view is in) ab_view() - the name of the view the user has open (again, not the name of the workflow view that is running) ab_userid() - the currently logged in user, in the format ‘Forename Surname (username)’ i.e. the same format used for logging record creation metadata etc. ab_userroles() - a comma separated list of rolenames the logged in user belongs to Colouring Text calculations can be coloured in the same way as text fields. Underneath the calculation definition and words, tick colour words. If a calculation outputs one of the following words, they cell in the view be coloured.\nBest practices A few tips for working with calculations.\nCentralise calculations If a particular calculation is used in a number of different views, then it’s a good idea to create it once in a ‘utility’ view, then join to that view from any others that want to include it.\nTo take a simple example, a VAT calculation {net price} * 0.2 may be created in a ‘vat calculation’ view. Then any view wanting to display the VAT can just join to it and include the field. If any changes to the calculation need to be made in future, they then only need to be done in one place. The benefits of this increase as calculations become more complex.\nAvoid mixing aggregates and non-aggregates Avoid mixing an aggregate and non-aggrete parts in a single calculation. E.g. calculations of the form sum({field 1}) + {field 2} should be avoided. You may find they cause errors.\nThe recommended way to create a calculation like this is to make the aggregate part in a separate view, then join to it, as described under centralise calculations above.\nSplitting complex calculations into parts If a calculation is particularly complex, you can if you like split apart into multiple calculations, to improve readability. A final calculation can then reference the parts, like e.g.\n({really complex calculation 1} + {really complex calculation 2}) / {really complex calculation 3}\nThe rule not to mix aggregate parts and non-aggregate parts, as above, still holds.\nJust be aware that if you update one of the composite parts, you then need to update any calculations that depend on it. The system won’t automatically update them to reference the new version. This is due to the way the database works under the hood - it doesn’t natively support referencing one calculation from another, so we add that layer in Agilebase functionality.\nTroubleshooting errors If there is an error in a view, it’s more than likely the culprit is a calculation, as they are one of the more complex facilities of Agilebase and the only one where SQL can be entered by the user, as opposed to be automatically generated. You may see messages like view broken or errors when you try to change a view e.g. move a field.\nErrors can occur due to data changing. Division by zero errors are automatically handled by Agilebase (null is returned), but other types of calculation can also cause errors in certain circumstances. For example if a calculation squares a field, if someone enters a really large number into that field in a particular record, then an overflow error may occur.\nThis can be resolved by temporarily filtering out the problem data, then the view can be edited to handle the issue, or perhaps a data integrity check can be added to disallow problem data in future.\nIf there is a persistent issue, one way of dealing with it is to temporarily delete all the calculation definitions - you can copy and paste them somewhere else for record-keeping, perhaps into each calculation’s notes entry. Then once the view is working again, add the calculation definitions back one by one until you find the problem.\n","categories":"","description":"Adding calculations to a view","excerpt":"Adding calculations to a view","ref":"/docs/views/calculations/","tags":["Citizen Developer level 3","v6"],"title":"Calculations"},{"body":"Accuracy Whether to record a date as just a year, year and month, year month and day, or with a time: hours, hh:mm, hh:mm:ss.\nUse current time for new records If ticked, set the value of this field to the current time when a record is created\nDate format The format to display in views. Note this doesn’t affect data entry screens, which use the browser’s standard date picker, which may customise to the user’s region.\nMin. years age / Max. years age These two options specify the valid range of allowable dates for the field. By default values up to 10 years in the future or 100 years in the past are allowed.\nOther types of date check can be added using the Advanced field checks options for a table\n","categories":"","description":"Options specific to date fields","excerpt":"Options specific to date fields","ref":"/docs/fields/field-options/date-field-options/","tags":["Citizen Developer level 2","v6"],"title":"Date Field Options"},{"body":"A separator field doesn’t actually store any data, but is used as a marker of the start of a block of fields. Create a separator and move it to just before the field which should be the first in a block.\nDepending on the table layout, these blocks will be displayed in different ways, but in all cases will form a distinct group of fields.\nInline help can be added for separators in the same way as for normal fields, by adding a field description. This help text will apply to the whole block of fields created by a separator.\nHere’s a system with several…\n","categories":"","description":"Separators are used to group fields into blocks","excerpt":"Separators are used to group fields into blocks","ref":"/docs/fields/field-types/special-field-types/separators/","tags":["Citizen Developer level 2","v6"],"title":"Separators"},{"body":"Whenever a relation field is used in a table, the user has the option to navigate to the related record by clicking a link next to the relation.\nHowever its useful to know that if the relation is one of the first fields in the table, i.e. at the top of the form, then it will be treated as having greater importance by the user interface. In this case, the relation will appear as a relation heading, making it clear the ‘parent-child’ relationship i.e. that one record ‘belongs’ to another.\nFor example, in a contacts table, if the relation to a contact’s organisation is one of the first fields in the form, the organisation name will appear as a heading for the contact record. It will be a hyperlink so can be used to navigate to the parent organisation easily.\nA record can have multiple ‘parents’ of different types, e.g. a contact may belong to both an organisation and a site or department within that organisation.\n","categories":"","description":"Relations allow navigation from a child record to its parent","excerpt":"Relations allow navigation from a child record to its parent","ref":"/docs/tables/hierarchy-navigation/upwards-navigation/","tags":["Citizen Developer level 2","v6"],"title":"Upwards Navigation"},{"body":"Charting is not strictly an administrator function, as any user can create charts and other data visualisations, such as maps and word clouds.\nHowever, it’s useful for administrators to know how the system works in outline, so they can support users and also because creating charts may be a key part of building an application.\nIn Agilebase, charts ‘belong to’ a view. Each view can have a collection of charts. Users can toggle between viewing data rows and looking at charts based on those rows. When a user filters data using the quick filter boxes at the top of the screen, the data or charts (whichever is shown) will update to match the filtered results.\nCreating a chart In the tiles interface, open the tile and view to use as a source of chart data Click the charts button at the top right of the screen Click the add/edit chart or map button Follow each of the steps (1 - 3) on screen to build the chart In the last step, give a name to the chart and press save When choosing a type of chart in step 3, small previews will be displayed based on some of the chart data. However some chart types may display a message rather than a preview. In this case, the chart data selected in step 1 is not applicable for this chart type.\nFor example, if in step 1 we have a count of items per year:\nthen the scatter diagram will work but the bubble chart won’t. For the bubble chart, two y-axis measurements are required, one to specify the position of the bubble on the y-axis, plus another to determine the relative size of the bubble.\nEmbedding charts in forms Charts can be embedded into tables. When the user opens a record, the chart will automatically filter to show data pertaining to that record only.\nSo for example if you have a chart of sales per month per customer, which you embed into a customer table, it will show as sales per month, only for the customer on screen.\nThis is accomplished by using a view with chart(s) as a referenced data field - see that page for setup information.\nEmbedding charts in tabs When a tab contains many ‘child’ records, e.g. an organisation may have a tab which contains financial data for the past 10 years, then charts can display above the rows of data when the tab’s opened.\nTo accomplish this, simply add a chart to the view used by the tab. When the tab is opened, the chart will automatically be filtered to only show data pertaining to the parent table, in a similar fashion to how charts embedded using cross-referenced panels are filtered, as above.\nSubscribing users or roles to charts Users can be subscribed to charts (or subscribe themselves) to receive them by email.\nIn a view with some charts, open the charts Next to ‘Send these charts to me’, select a frequency, e.g. monthly. Under ‘Include data too’, select tabular data to include in the email too - various options will be displayed e.g. all new rows since the last email Next to ‘roles’, select a role to send the charts and data to. All users in the role will be subscribed. Multiple roles can be added If the view has no charts, this function can be used to send tabular data only\n","categories":"","description":"Building and working with charts","excerpt":"Building and working with charts","ref":"/docs/charting/built-in-charting/","tags":["Citizen Developer level 1","v6"],"title":"Built In Charting"},{"body":" Before setting up a BI connection, please be aware of the data privacy and security considerations.\nAny tool which utilises ODBC can be used, such as Excel for example. Power BI is a common one.\nInitial Setup The first step is to contact us to request we prepare your account. This will also allow connections from Power BI or any other tool which can connect to ODBC).\nIf you use Power BI, then the process is as follows\nInstall the PostgreSQL ODBC driver from https://odbc.postgresql.org/. Use the Downloads link and if running on Windows, use the newest driver from the msi folder. Use your operating system’s control panel to set up the ODBC driver, using the login details we supply. Ensure the SSL mode is set to ‘require’. From Power BI, add a connection using the PostgreSQL ODBC driver, not the built-in Power BI PostgreSQL driver. Sending data to your external reporting tool A developer with DEVELOP privileges on a view’s parent table can set this up.\nBefore continuing, please also note that only users without any multi-tenanting roles will be able to turn on external reporting. That’s because data sent this way doesn’t take account of multi-tenanting. Rather all data is sent, whatever the tenant.\nIn Agilebase, open the view you wish to report on. Ensure it has all the necessary fields and calculations in it which you want to report on. If not, add them before continuing. Click the charting icon to view the chart setup interface At the bottom of the screen, tick ‘send data to a shareable dashboard’. As this makes data available outside of Agilebase, you will be asked to confirm you will treat the data in a way which maintains privacy and security before enabling the feature. Within a few seconds, the data will then be visible to your external application.\nChanges It’s easy for developers to make changes to views in Agilebase, for example adding / removing fields, changing calculations or just renaming a view.\nHowever, when the BI connection is active, bear in mind that certain changes could break it. The reason is that once data is set up to transfer to a separate system, the other system typically expects it to remain in the same format.\nThat means that if you rename the view or move it, or rename/delete fields and calculations, you may afterwards need to check your charts in Superset / Power BI, to see if they need re-creating.\nDaily updates Once the view has been set up, external applications will see a new read-only snapshot of data once a day at a time you can specify on screen. If your data needs to be updated more often, you can add a workflow button to accomplish that:\nEnsure that the view A is used for reporting only, in particular it doesn’t have any workflow set up. From another view B, edit the view and go to the ‘workflow - edit records’ panel Under ‘chain workflow’, select the reporting view A Then, when a user opens view B, they will see a button at the top of the screen with the button text set to the name of view A. Pressing it will refresh the view A data sent to external applications.\n","categories":"","description":"Visualising data in third party Business Intelligence tools","excerpt":"Visualising data in third party Business Intelligence tools","ref":"/docs/charting/business-intelligence/","tags":["Junior Software Architect","v6"],"title":"Business Intelligence"},{"body":"Any view with one or more date/time fields can have its data displayed in calendar form. If there are two date/time fields, the first will be the start time, the second the end time. If there’s only one, events will last 1 hour by default, unless the field is a date only, in which case they will be all day.\nData can also sync to and from external calendars using the API.\nAny user can add the calendar tile to their homepage, then select views containing dates to display in it. Data can be displayed in a number of formats, like standard month/week/day views but also timeline views for a gantt-style format, with each view in its own swim-lane.\nDefault views Any views which are in a tile with the word ‘calendar’ in the name will show by default when a user first opens the calendar tile.\nSplitting a view into tracks In a timeline grid display, each view will become a swim-lane or track down the left hand side of the screen. However it’s also possible to create multiple tracks from a single view, choosing a field to split on. Each distinct value of that field will become a separate track.\nFor example, here’s a view of recipe development milestones split on the product name:\nTo set this up, add a text calculation to the view called ‘calendar splitter’. The calculation should output the value to split on, in this case the product name.\nColouring events By default, each view used in the calendar will be assigned a different colour.\nAlternatively, you can choose to colour individual events, for example based on whether they’re overdue or not.\nTo do this, add a text field to the view which has the colour words option set, or a calculation with the colour words option.\n","categories":"","description":"Using the built in calendar and integrating with third party calendars","excerpt":"Using the built in calendar and integrating with third party calendars","ref":"/docs/calendar/","tags":["Junior Software Architect","v6"],"title":"Calendar"},{"body":"Once a field has been created, the type can’t be changed with the flick of a switch. However there is an easy to follow process to accomplish this.\nRename the field to [fieldname] old Add a new field [fieldname]. This means that any calculations that reference the field won’t have to be changed and won’t break due to mis-matching field names Copy all values from one field to another. The easiest way is to use a workflow Try to delete the old field. If any views reference it, the delete will fail and a list of them will be shown Edit all those views remove the old field and add the new, to all fields, filters etc. update all calculations that reference the field e.g. add a space to the end of all of them. That will refresh them to reference the new field rather than the old Finally, delete the old field Before starting, it will be worth ensuring that data won’t change during the process, for example by making the data read-only to all users, or requesting they don’t edit field values until finished.\n","categories":"","description":"How to change a field from one type to another","excerpt":"How to change a field from one type to another","ref":"/docs/fields/field-types/changing-field-types/","tags":["Software Architect","v6"],"title":"Changing Field Types"},{"body":"It can be important to ensure that certain rules are followed when data is entered, either manually by a user, by an incoming API request or someone filling in a chaser response.\nWhen designing applications, just be aware there is sometimes a trade-off between the ideal of data integrity and everyday concerns.\nFor example, you may like to force users to always provide an email address for contacts but in a small minority of cases, they may not have that available.\nAgilebase has options for handling soft validation (highlighting errors or notifying someone) as well as the hard validation (disallowing invalid data entry) options discussed here. For example, you could\nCreate a viewto show all records with errors, for later checking Set up a workflow or chaser to chase someone when errors are found Use the API to send a message to your internal messaging system e.g. Slack That said, these are the ways in which you can strictly enforce data integrity.\nAt an individual field level Basic rules can be applied with field options. For example a field may be set as mandatory, or it must contain unique values (no duplicates).\nData integrity checks (advanced) Edit a table Click _Data Integrity Checks Click ‘Add Single-Field Check’ Here you can add more complex checks, such as the value must be longer or shorter than a certain length, be within a date range or match a regular expression. The list of checks available is the same as that used in view filters.\nMulti-field unique constraints Edit a table Click _Data Integrity Checks Click ‘Add Multi-Field Unique Check’ Sometimes, fields must be unique in combination. For example, imagine you have a system for recording customer complaints. One of the fields might be a customer’s reference number, another a relation to the customer record.\nYou want to avoid duplicates being entered, so could make the customer reference number unique. However it could be that two different customers could use the same reference number independently, so that wouldn’t really work.\nThe solution is to add a multi-field unique constraint on customer and customer reference number. That way, a reference number won’t be able to be re-used for a complaint from the same customer, but more than one customer is allowed to use the same reference.\n","categories":"","description":"Enforcing the correctness of data entered into the system","excerpt":"Enforcing the correctness of data entered into the system","ref":"/docs/tables/data-integrity-checks/","tags":["Software Architect","v6"],"title":"Data Integrity Checks"},{"body":"To access these options, edit a table and select ’tags and options'.\nAllow add If this is ticked (it is by default), users can add records to the table. Anyone with develop privileges on the table can add tables regardless.\nOnly from within tab If this is ticked, users can add records but only when accessing this table’s form from within a tab of a parent record. This can help ensure that child records are always connected to a parent and aren’t created as ‘orphans’.\nAllow clone and merge (Off by default). Show a clone/merge record button when a user is viewing a record.\nCloning makes a simple copy of all data in the record. The contents of tabs are not cloned. A more advanced clone facility can be created with a workflow if desired.\nMerging allows the user to select another record to merge with this one. This is commonly use to resolve a situation where there are duplicate records. The contents of one are merged into the other, then the first deleted. A wizard will guide the user through selecting which data to keep from each record. Child records from the deleted record will be re-attached to the one remaining. So for example if Organisation 1 containing two contacts is merged with Organisation 2 containing 3, a single organisation with five contacts will result.\nAllow remove (On by default). Allow records to be deleted by people with EDIT privileges as well as people with develop privileges, who can always delete.\nAllow share Showa button which allows links to individual records to be shared between users using email. Note - recipients still need a login and relevant privileges to see the record.\nData entry from external sources The options in this section are for configuring the table to allow an API request from an external source to create and edit records. See API use for more information.\nOther options Records lockable Records can be locked to prevent editing. You may like to do this based on criteria e.g. once a customer order has been sent, it should be locked against further changes.\nTo actually lock the record, a workflow can be used.\nLocked records can be manually unlocked by someone with develop privileges on the table, but only one at a time.\nEmail notifications When someone adds a comment to a record, when selecting recipients, they have the option to email those recipients, as well as adding the comment to the comment stream. Ticking this table option sets the default to send emails for any comment added to this table. Users can override this on an individual comment basis and recipients can override in their notification preferences.\nFlag records with colour Enter a field name here and add a field with the same name to a view, to flag records. The contents of the field must be one of the colour names as given on the screen. The field added to the view can be a calculation, specifically a hidden calculation. This will flag the view without showing the colour name on screen.\nThis option can also be used to colour items in a junction chooser (see tab option: Choose a record when a new item is added). In the junction table, set this option, then in the view used as a relation picker (set in the relation field options), add the colour calculation.\nIt’s also possible to colour individual table fields or calculations in a view (as opposed to this option which flags the whole row). See the options for field colouring or calculation colouring\nAccept emails to this address The system can accept incoming emails and attach them to relevant records e.g. attaching an email from a customer to that customer’s record.\nA particular email address can be set up to receive emails. The system can be configured to either accept emails from anyone, or just from users. If just from users, then users can forward any emails they receive to the system to have them imported, or BCC the address when sending to people.\nThe email text will be logged as a comment against the record, with the full email attached if it is HTML formatted or includes attachments. The table must have a comments field.\nPlease contact us if you’d like to set that up.\nEmails are matched by creating a view containing the email addresses of potential recipients. An incoming email is attached to the record from this view which matches the sender’s email address. If there is no match, it is added to a ‘holding bay’ where users can view and manually attach emails to records.\nConfiguring the email address used An email address of the form viewname@accountname.domainname will be set up, e.g. contacts@mycompany.agilebase.co.uk\nviewname determines the view which Agilebase queries to find the recipient email address. The comment will be added to the matching record in the view’s parent table, or a tab of the table, if Accept emails from parent table is enabled in a tab. If multiple tabs have this option enabled, then the tab with a name also matching viewname is used accountname determines the company account to look in domainname is the domain name of the Agilebase server Information After the options, some structural information is shown, such as which tables depend on this one i.e. have a relation to it, how many fields and views per tile there are. See also the usage dashboard\n","categories":"","description":"Options which alter table behaviour","excerpt":"Options which alter table behaviour","ref":"/docs/tables/options/","tags":["Software Architect","v6"],"title":"Options"},{"body":"The workflow panel of a table shows any workflows which act on data in that table. In other words, any workflow that updates records, creates new records in the table, or deletes records from it.\nAdditionally, this panel allows you to choose a workflow to run whenever a new record is created, or (less frequently used) whenever a record is opened.\nThat can be very useful for setting initial values for fields, where those values may be more complex calculations than just a static default value.\nWhen a record’s created, run workflow Run a workflow immediately after the creation of a record. The workflow runs after any field default values have been set.\nThe workflow ‘knows’ metadata such as which user is logged in, which tile is open etc., so if you want to use those in a calculation in the workflow, you can do.\nNote that only workflows which have Frequency = manual set can be chosen to be run when a record is created. That’s because a single workflow can’t be used both to set initial values and to run every X minutes.\nRun this workflow whenever each record is viewed As well as running the workflow on record creation, also run it whenever a user views a record in this table. Be aware this may have a performance impact for users, if the workflow is resource intensive and/or multi-step, particularly if records are also viewed frequently.\n","categories":"","description":"Running a workflow whenever a record is added","excerpt":"Running a workflow whenever a record is added","ref":"/docs/tables/workflow/","tags":["Software Architect"],"title":"Workflow"},{"body":"The database which underpins Agilebase is PostgreSQL - ‘The World’s Most Advanced Open Source Relational Database’.\nThis page will just be an introduction to some of the things you can do with calculations.\nA comprehensive definition and reference for all of the functions possible can be found here: https://www.postgresql.org/docs/current/functions.html\nExample functions for each type of field Here are some ‘starters for 10’ that may be useful day to day.\nGeneral functions There are a couple of functions that are particularly useful to know about, to keep in your calculations toolkit. These are\nCoalesce The coalesce function lets you deal sensibly with empty values, which we call ’null’ values. Normally, if any field you reference is null, then the result of the calculation is also null. Coalesce is a way to provide a default value. So for example, if a view of customer order lines has a quantity and a price field, but the quantity may be blank, then\ncoalesce({quantity}, 0) * {price}\nwould calculate the line value, outputting zero if the quantity is not filled in.\nCoalesce can be used with more than two arguments - the first non-null value it encounters, from left to right, will be output to be used in further calculation steps\nCase A case statement can be used to add ‘if/then/else’ logic. An example is\ncase when {due date} is null then 'unknown' when {due date} \u003c now() then 'overdue' when {due date} \u003c now() + interval '7 days' then 'due soon' else 'not due yet' end (We’ll cover date calculations more below).\nNote the top clauses of a case statement are evaluated first, so put more specific things at the top if multiple lines may match.\nNumber functions Common mathematical functions can be found here: https://www.postgresql.org/docs/current/functions-math.html\nText functions {field 1} || ' ' || {field 2}\nTwo vertical bars are used to join bits of text together (this seems an odd choice to use rather than something like an ampersand or + sign, but there you go, that’s what it is). A literal piece of text is surrounded by single quotes. substring({text field} FROM 1 FOR 1)\nExtracts the first letter (or other character e.g. number) from some text. regexp_replace({full name}, '\\\\s.*', '')\nA simplistic way of extracting a person’s first name from a full name - strip out everything from the first space onwards. regexp_replace( {account owner}, '.*\\\\((.*)\\\\).*', '\\\\1' ) A more complex example. Given an ‘account owner’ value in the format Forename Surname (username), extract the username, i.e. everything between the brackets. The last two are slightly more complex because they use a powerful text matching/search and replace facility called regular expressions, or regexes for short. Again, this is a standard facility and there’s lots of documentation available on the PostgreSQL website and elsewhere if you’d like to learn more.\nThe only difference from standard to be aware of is that when entering a regex into a calculation in Agilebase, you must use two backslashes instead of one.\nlike compares two elements of text and ilike does so case-insensitively. A percentage sign means ‘match any text’. So for example:\ncase when {postcode} ilike 'bs%' then 'Bristol' else 'elsewhere' end Outputs ‘Bristol’ if the postcode field starts with ‘BS’ (or ‘bs’). Date functions The database has very strong support for working with dates and time - you can do many calculations on them. Here are a few examples.\n{date field} + '1 year'::interval\nadds a year on to the given date You can do the same with months, week, days etc. and combinations like ‘1 week 1 day’\ndate_part('year', {date field})\ndate_part('dow', {date field})\nThese two extract different parts of the date - the first just the year, the second the day of the week as a number 0 - 6. More info is available in the PostgreSQL documentation date_part('days', ((date_trunc('month', now()) + '1 month'::interval) - now()))\nWorks out how many days are left in the current month. This example introduces a couple more date functions: now() gives the current date and time date_trunc ’truncates’ a date to the month in this case (in other words rounding it down to the nearest month) to_char('19 May 2020'::timestamp, 'Day') - outputs ‘Tuesday’\nto_char('19 May 2020'::timestamp, 'Mon yyyy') - outputs ‘May 2020’\nto_char formats a date (it also works with numbers) date_part('weeks',{date field 1} - {date field 2})\nCounts the number of weeks between two dates Aggregate calculations All of the examples above work within one row, or record, of data. Aggregate calculations are different, the take many rows of data and condense them down into one result - one number, or piece of text, etc.\nThey’re very useful for creating summaries of data, such as total sales per product, counts of complaints per month per category, total value of an order (summing individual order lines) etc.\nAggregates of child rows To make an aggregate you have to have something to summarise by and something to aggregate. The easiest way of doing this is to create a view with a join down from a parent table to a child. You can then summarise, or group by each parent row and aggregate one (or more) of the fields in the child table.\nFor example, if we have an invoices table and an invoice lines table, assuming there is a relation linking each invoice line to its parent invoice:\ncreate a view from the invoices table - we’ll call it ‘invoice totals’ add a join down to invoice lines Add the calculation sum({line total}) to the view You should then have a view with just one row per invoice line, showing the invoice total. sum is an example of an aggregate calculation. Another common example is count. If you replaced sum({line total}) with count(*), that would count the number of invoice lines in the invoice, instead of totalling the values up.\nNote - the aggregate calculation groups by all non-aggregate fields in a view. For example, if you added the product name into ou invoice totals view, you’d get a total per product per invoice, rather than a total for each whole invoice.\nAggregates without child rows There’s another way to create aggregates, which can be used without joining down to a child table or view.\nIn the tiles interface, open the view you wish to edit Click your user icon at the top right and select admin - edit view from the menu Tick Group by all non-aggregate fields Add any fields you wish to group by to the view. Remove any you don’t wish to group by including any hidden fields such as the IDs of joined tables Add the aggregate calculation e.g. sum({my field}) Expanding rows Some functions do the opposite of an aggregate function - rather than condensing and summarising many rows into one, they split one row up into many. For example, if one of your fields is a comma separated list, you could split that up into many rows, one per item in the list.\nSay for example you import data from a form on a website which produces a comma separated list of products ordered.\nAdding the calculation\nregexp_split_to_table({products ordered}, ',')\nwould produce one output row per product in the list. That could then be joined to other data in the system such as pricing.\nWindow functions Window functions are somewhat like aggregate functions in that they can act on many rows, not just one. However, they don’t condense down into a single row. An example would be calculating a rolling average or cumulative total as each row is shown.\nEffectively, they look at a ‘window’, also called a partition, of rows around the current row and calculate a result based on those. That could be for example\nthe current row, the one before and the one after it every row up to the current row every row every row which is similar in some way e.g. has the same value for a ‘category’ field etc. As an example,\n{price} - avg({price}) over (partition by {category})\nwould calculate for each item, the difference from the average price of items with the same category.\nThis again is much too large a topic to cover in an introductory page, there’s plenty of documentation here: https://www.postgresql.org/docs/current/tutorial-window.html and a video introduction to the concept here:\nSeries generation Sometimes you need to generate a set of rows, as opposed to having the data stored in the database. Here are some quick examples:\ngenerate_series(1,10)\ngenerates the numbers 1 to 10, each one in a different row generate_series(now() - '10 years'::interval, now(), '1 month'::interval)\ngenerates one row per month, from 10 years ago up until this month Summary The functions above highlight just a few of the many possibilities. Please feel free to read up on PostgreSQL some more and if you come up with any neat calculations yourself in your everyday work, please do send them to support@agilebase.co.uk so we can add them to this page (with credit).\n","categories":"","description":"Some examples of useful calculations for each type of field (text, number etc.)","excerpt":"Some examples of useful calculations for each type of field (text, …","ref":"/docs/views/calculations/examples/","tags":["Software Architect","v6"],"title":"Calculation Examples"},{"body":"Here’s a Youtube video explaining the concept of joins and running through the various types.\nJust remember, when using third party resources to learn about joins (or other SQL features), you don’t need to write the SQL code in Agilebase, it’s generated for you behind the scenes.\nLeft outer and inner joins The left outer join is the default type used when a join is added to a view in Agilebase. It suits most cases, but can be changed after join creation if needed.\nA left outer join type will ensure that every row from the left source (table or view) is visible in output, whether or not the data links to a row on the right side. Conversely, when an inner join’s used, data from the left will be hidden unless it links to data on the right.\nThat may sound rather abstract: working with an example, we can see what it means in practice.\nLet’s take the common and straightforward example of linking contacts to organisations. We start by creating a view from the contacts table, so that’s on the left side. We then join from contacts to an organisations table, on the right. This join looks as follows:\nThat gives us a view where we can add fields from the organisation table into the view of contacts data. The output may look something like this:\nEach row representing a contact, has the contact details (name, email address etc.) and from the organisations table, you can see the name and website of the organisation they belong to.\nBut wait a minute, what’s that contact with blank spaces for the organisation name and website? That represents a contact which is not yet linked to an organisation.\nI guess to be nit-picky, it could represent a contact joined to an organisation without a name or website address added, but here we’ll assume all organisations have those details filled in.\nWhen the join type is left outer, then this row will be shown, as seen. However, if it’s changed to an inner join, then it will be hidden.\nThat’s why left outer is the safest type to use by default. Otherwise with an inner, if a user adds a new contact, fills in all their basic details but doesn’t link her or him to an organisation (perhaps they don’t know the organisation or it doesn’t exist in the system yet), then they won’t be able to see that contact in the view. And if they can’t see it, then they can’t click on it to load it - it will have vanished for good (well, until the join is changed back to a left outer).\nSometimes of course, inner joins are very useful - but it makes sense that there must be a conscious decision to change a join to that type.\nRight outer and full outer You may think, if there’s a left outer, is there also a right outer? There is, it means all data from the right side is always visible, whether or not there’s a match on the left. So in our contacts/organisations example, all organisations would be visible, whether or not any contacts belonged to them.\nPractically, this isn’t used much, as a right outer join is just the same as a left outer join started from the other table. There’s no difference in the data visible, but using a left outer works better in Agilebase because you can be guaranteed that clicking on a row will load a record (with a right outer, if there’s no data on the left side, then no record can be loaded when the row’s clicked).\nYou may also hear of a full outer join - this again has a very small number of useful cases, but you can read about them online if interested.\nVenn diagram Joins are often represented visually with Venn diagrams. Here’s one, showing that for a left outer join, all the data from the left side is visible, whether or not a matching row exists on the right, and for an inner join, data from the left is excluded without a match. The results of right outer and full outer are also visualised.\nCross join There’s one final type to consider that can be used in Agilebase. Strictly speaking, it isn’t a join at all, but it does bring together data from left and right sides in a particular way, so we’ll think of it as a join here and it’s treated as such in Agilebase.\nIf you have a mathematical background, it may help to know that it produces a cartesian product, or cross product, of all rows in the left and right sides.\nHowever if you don’t, not to worry, it can be easily explained without maths. Basically, every combination of each row on the left with each row on the right is output. So if you have three rows, A, B and C on the left and another three X, Y and Z on the right, then you would get as output: data from\nRow A with row X Row A with row Y Row A with row Z Row B with row X Row B with row Y Row B with row Z Row C with row X Row C with row Y Row C with row Z You can see that you need to be careful when creating cross joins that results won’t balloon up into massive numbers of rows that are hard to deal with. For example, if two tables, each with a hundred thousand rows in, are joined by cross join, then 100,000 x 100,000 = 10,000,000,000 (ten billion) rows would output.\nOnce again, potential uses may be most easily explained by a real world example.\nCross joins can be used when reporting, to find data that’s not there (to get a bit Zen). For example, say we have two tables\ncustomers products We may want to create output representing the combination of every customer with every product - we could then further join this to sales data to find which products a customer isn’t buying, or which products are being bought by most and fewest customers.\nFirstly, we need all combinations. Create a cross join between customers and products, in a ‘customer products’ view.\nThe next step is similar to our reporting example of joining on multiple fields. Create a calculation ‘customer product’ which concatenates together customer ID and product ID. Create the same calculation in a view of sales (each sale of a product to a customer). Then join this sales view into our customer products view and bingo, we can display the total sales, whether zero or more, of each product to each customer.\nIf you haven’t yet read up on calculations, you may need to do that in order to accomplish everything above\nAdding a cross join Adding a cross join is a little different to adding a normal join. The left and right fields don’t matter (as we want to apply any exclusion rules, we just want every combination of rows possible).\nSo follow the normal process for a complex join, but just select the left and right tables (or views), leave the fields at their default values.\n","categories":"","description":"Left outer, inner and cross joins","excerpt":"Left outer, inner and cross joins","ref":"/docs/views/joins/types-of-join/","tags":["Junior Software Architect","v6"],"title":"Types of Join"},{"body":"Filters can be applied permanently to a view, allowing an administrator to specify the subset of records that should be displayed. This is often for convenience and to create more useful systems. For example, if you have a database of suppliers, you may want to create views showing those which are approved, those which aren’t, those which are local etc. Each view would have a different set of filters applied.\nRemember people can apply additional ‘ad-hoc’ or temporary filters to a view at any time using the filter boxes at the top of the screen, so it may not be necessary to create filtered views for every eventuality.\nA filter can act on any field or calculation in the view, as well as on any in joined tables or views.\nMultiple filters act like they have AND between them, i.e. they are applied additively. If you wish to apply a filters with OR between them, or if you wish to apply a filter on the reult of the comparison of fields, then simply create the relevant calculation. For example, if you added two filters to a suppliers view\nstatus equals approved and status equals pending\nthen you would get no records showing - a status can’t be both one thing and another. However if you created a boolean calculation ‘pending or approved’, with definition\n{status} like 'approved' or {status} like 'pending'\nyou could then add a filter on that calculation\npending or approved equals true\nAdding a filter Open the view you want to edit Toggle development mode on and click the big pencil at the top left of the screen Under filters, choose a type, give it a name and press Add There are 26 types of filter to choose from, from the simple ’equals’ and ’not equal to’, to more complex pattern matching using regular expressions.\nSome filters apply to multiple data types, others only to specific types. For example, ’newer than X days ago’ only applies to date fields.\nOnce you’ve added a filter, you’ll be able to type in a description for it. If no description is entered, the system will automatically generate one, which you’ll be able to see.\nThis description is shown to users as help in particular circumstances, e.g. when the view is used as a chaser, so it’s a good idea to check it makes sense.\nIncluding blank values Once a filter has been created, when you hover over it you’ll see an option to tick ‘or is blank’. This is useful to ensure blank values aren’t excluded by your filter, which they typically would be otherwise.\nFor example, imaging you’re setting up an email notification workflow to send a notification to people once a week of any outstanding tasks. You’d likely need two filters, the first to find any tasks with an ‘outstanding’ status and the second to only include tasks for which no notifications have been sent within the last 7 days.\nFor that second filter, you would set it up as\n'last notified' is more than 7 days ago However, as it stands, that would exclude any tasks which have never had a notification sent for them, i.e. where the last notified field is blank.\nTo include those, just tick ‘or is blank’ after creating the filter.\n","categories":"","description":"Adding filters to a view","excerpt":"Adding filters to a view","ref":"/docs/views/filters/","tags":["Citizen Developer level 1","v6"],"title":"Filters"},{"body":"Default value Simply whether the checkbox should default to ticked (true) or un-ticked (false) for new records.\nDon’t set last modified Whenever someone edits a record, Agilebase automatically updates the Last Modified and Modified By fields of the table. This option prevents that happening when the checkbox field is ticked or un-ticked. There would not usually be a need for this but it may be useful in a minority of cases.\nShow digital signature Causes the user interface to show the name \u0026 username of the person who last ticked or un-ticked the checkbox, along with a timestamp.\nNote these can only be shown for the maximum time that record history (audit trail) data is stored for, by default 12 months. See enhanced audit trail for details of extending this.\n","categories":"","description":"Options specific to checkbox (true/false) fields","excerpt":"Options specific to checkbox (true/false) fields","ref":"/docs/fields/field-options/checkbox-field-options/","tags":["Citizen Developer level 2","v6"],"title":"Checkbox Field Options"},{"body":"Adding a comment feed to a table adds a discussion area to a form, transforming its usefulness.\nComment feeds in Agilebase are quite a large topic, as one of the most often used features central to the platform. It’s common for at least one comment feed to be added to every table in the system, allowing users to collaborate and discuss data wherever they are.\nThe ability to discuss and comment on data can be one of the most important mechanisms used to break down silo thinking and help organisations that wish to adopt a more systematic or process orientated view of things.\nComment feeds in action Here’s an example of a comment feed in a table, being used to add a new comment. Previous comments can be seen underneath, with the user and date/time of each.\nThe available recipients are those people who have privileges to view data in the table (it’s no use sending a comment to someone who can’t see the data being discussed).\nThe user interface intelligently selects an initial list of recipients from those available, but they can be added or removed by the user.\nTo add a user, type ‘@’ then start typing their name. A dropdown list will appear from which you can pick the person.\nIn this example, Cliff, Gemma and Mark have been set to receive email notifications as well. The email they receive will contain a link to take them directly to the record the comment was added to. They can reply to the email to log an additional comment.\nPeople who aren’t recipients of a comment will still see the comment when they visit the record it’s been added to, they just won’t get a notification in their comments stream or elsewhere.\nPeople who are mentioned by name in a comment (Mark in this example) will get an in-app alert as well as the comment appearing in their comment stream.\nA user’s notification options affect whether they receive comments from a particular table or person by default, and how they receive those comments. The table option email notifications also affects this.\nComments to other fields Although adding a comments feed field is the easiest way of allowing people to comment on data, users can at any time add a comment to any field on the screen, by hovering over the field until an ‘add comment’ icon appears. This opens a smaller, basic comment adding interface, without the options for choosing recipients above, rather the default set of recipients is always used.\nThe comments stream tile When someone’s the receipient of a comment, they’ll be able to see it in the comments stream tile on their homepage. Clicking on it will navigate to the related record. We won’t go into every detail of the user interface in this administrator documentation, but comments can be searched and the comments tile can be expanded to full screen like any other tile.\nEmail integration As above, anyone who receives a comment notification can reply to the email to add another comment (their email address must be their username or recorded in their user defailt), or they can click on a link to view the related record including previous comments.\nHowever, comments are also the mechanism by which emails from external parties can be logged - see the accept emails to this address table option.\nWhen a workflow or chaser sends an outgoing email, that is logged as a comment (including any attachments) too.\nSlack integration If Slack is integrated via company options, every comment added will also be sent to your Slack workspace.\n","categories":"","description":"Comment feeds allow collaboration between users of a system","excerpt":"Comment feeds allow collaboration between users of a system","ref":"/docs/fields/field-types/special-field-types/comment-feeds/","tags":["Citizen Developer level 2","v6"],"title":"Comment Feeds"},{"body":"Most fields in a table allow data entry into that table, but referenced data fields allow data from other places to be embedded, specifically views, created from any table.\nOptionally, the embedded data can be editable.\nThis can be used for many purposes, such as\nshowing warning or information messages in a form, based on criteria showing calculations, e.g. when editing a recipe, you may want to show the total cost/kg of all ingredients and packaging in that recipe embedding charts, e.g. in the record for a customer, you may want to show the last 12 months of sales data allowing quick editing of related data, e.g. after selecting a customer contact for a sales opportunity, allow quick editing of their contact details without having to navigate away from the opportunity record Some more esoteric uses are also possible\nreferenced data can be used as a source of data to populate standard fields in the form, i.e. to provide default values for fields - see relation field options for more information a referenced data field can be displayed as a button to manually run a workflow Adding a referenced field Referenced fields are based on views. The contents of a view will be displayed in the form where a field referencing data from that view is added.\nThe way it works is that the chosen view must contain the ID field of the table the referenced field is added to. When displaying data, the view is filtered to only show records where the ID matches that of the record being edited.\nLet’s take an example - you wish to include details of any ingredients supplied by a company in a supplier details screen.\nFirst, create a view of ingredients linked to each supplier. It may have data in it such as the following:\nThere is some repetition in this view because each ingredient can be supplied by more than one supplier. Each line represents an ingredient/supplier combination. The supplier names aren’t included in this particular view.\nWhen a field referencing this view is added to the suppliers table, the output may display like this, when editing a particular supplier:\nSo to summarise, the steps are\nCreate or find a view containing the data you wish to embed. It must contain the ID field of the table the data is embedded in (in this case ‘opportunities’). Add a field of type referenced data. Select the table your target view was created from, then the target view itself, before pressing create field Actually, there is one case in which the rule that the view must contain the ID of the table the referenced data is being added to. That’s when you want to show all rows from the view, without filtering.\nThis is typically used in a minority of cases, but can be useful when you want to embed data that isn’t related to the target table. For example, showing some global settings that may affect the functionality of a system.\nShowing one or more rows If more than one row in the view has an ID matching the ID of the table being added to, all will be shown. There is limited space in a form, so if there are lots, then a ‘see more’ option will appear after the first few rows. For a more compact view, tabular display can be chosen in the referenced field options.\nShowing charts If the view used has one or more charts, they will be shown instead of the data rows. The filtering acts exactly the same way, only data matching the containing table’s ID is used as the source of the chart data.\nShowing images and documents Images and documents can be included in referenced panels too. Just include a file field in the view used for the panel.\nMaking referenced data editable Optionally, referenced data can be made editable by clicking on it.\nA view containing the containing table’s ID can be created one of two ways.\nCreate a view from the containing table, joining to other tables Create a view from another table, joining it to the containing table If a view is built the second way and embedded into the table via a referenced field, the data will be editable: clicking on an element of referenced data will turn it into a data entry form.\nIf it’s built the first way, data will not be editable.\nIn an editable referenced field, only fields directly from the table made to create the view will be editable. Other fields will be read-only.\n","categories":"","description":"Embed data or charts from elsewhere in the system into a form","excerpt":"Embed data or charts from elsewhere in the system into a form","ref":"/docs/fields/field-types/special-field-types/referenced-data/","tags":["Junior Software Architect","v6"],"title":"Referenced data"},{"body":"Help for the application you build can be added in at many levels of the user interface\nat the individual field level add the help for each field when adding or editing a field for a block of fields add the help for the separator field marking the start of the block for a table add the help in the name and views panel when editing a table for a tab within a table the help for the tab view is used, falling back to the help for the tab table for a view add the help when creating or editing a view for a tile add the help when creating or editing a tile If help exists for a particular area, a link is generally displayed on screen as a question mark icon. Users can click on this to show the help content. Where an icon is less appropriate, it is shown in other ways, for example on hover-over of an element. In the case of views, help is shown in the menu item for each view.\nHelp content can contain URLs, which are converted into links. Links to YouTube URLs are shown as videos in place.\n","categories":"","description":"How to add inline help to aid users of your applications","excerpt":"How to add inline help to aid users of your applications","ref":"/docs/adding-help/","tags":["Citizen Developer level 2","v6"],"title":"Adding Help"},{"body":"When editing a table, the Roles and Privileges panel allows privileges to be assigned to a user or role on a table. Please see the privileges page for more details.\n","categories":"","description":"Assigning table privileges","excerpt":"Assigning table privileges","ref":"/docs/tables/users-and-roles/","tags":["Software Architect"],"title":"Roles and Privileges"},{"body":"This panel shows a list of views that contain data from the table. Any view with data is included, not just those directly created from the table.\nSee usage reporting for more info.\n","categories":"","description":"Shows which users are viewing data from this table","excerpt":"Shows which users are viewing data from this table","ref":"/docs/tables/usage/","tags":["Software Architect","v6"],"title":"Usage"},{"body":"**MORE COMING SOON\nIf you just want to watch the full videos of our guides…\nGuide 1 - Build a CRM [guide 1.2] [guide 1.3] [guide 1.4] Guide 2 - Personalisation ","categories":"","description":"","excerpt":"**MORE COMING SOON\nIf you just want to watch the full videos of our …","ref":"/guides/full-videos/","tags":"","title":"Full Video Guides"},{"body":"The primary purpose of a view is to show data to users. To let them see, search and report on it, or find individual records to edit.\nHowever, some fundamental aspects of a view make it a very useful feature that can power many core capabilities of Agilebase, such as chasers, workflows and APIs, as well as being useful to administrators in many more minor ways.\nA view being a filtered list of records, it can be used to specify those records to act on, i.e. those representing emails to send, workflow actions or data to send to a third party system with an API.\nA view is commonly created for the task you wish to accomplish, placing it in a System tile to hide it from users. Then it can be turned to the required purpose in any of the following ways.\n","categories":"","description":"Creating application functionality using views","excerpt":"Creating application functionality using views","ref":"/docs/views/special-uses/","tags":["Junior Software Architect","v6"],"title":"Special Uses"},{"body":"Colour outliers Automatically highlight ‘unusual’ values of this field in views. This can help pick out values which are notable in some way, for example if a number has been entered without a decimal point by mistake (1253 instead of 12.53) or is a statistical outlier.\nSpecifically, if the value is more than 4 standard deviations away from the mean, it’s strongly highlighted in green (for values greater than the mean) or red (for values less). Values more than 2 standard deviations away are highlighted in a weaker shade.\nSeparate thousands and use totals In views and data entry screens, show numbers as e.g. 31,141,592 rather than 31141592.\nAlso when the field is added to a tab view, a total is displayed at the bottom of the column of numbers for it.\nUse duration The view displays the same in views, but in data entry forms, is entered as a time duration, specifically a number of hours. So for example the number 1.5 would be entered as 01:30 (1.5 hrs = 1 hr 30 minutes). This allows time durations to be entered into e.g. timesheets in a natural fashion, but also time to be totalled up easily.\nPrecision The number of decimal places to show numbers to.\nhis affects display only, so for example if 1.543 is entered into a field with 1 decimal place, it will display as 1.5 but will still be stored as 1.543 and any maths done on the field operate on the higher precision value.\nNote - integer and floating fields are actually different field types in the underlying database, so if a number is created with 0dp i.e. as a whole number, it can’t later be converted to floating point by changing the dp. There is a process that can be followed for converting fields from one type to another.\nWhole number fields can store integer values from -2,147,483,648 to +2,147,483,647, i.e. approx. -2 billion to +2 billion. Decimal number fields have a range of around 1E-307 to 1E+308. See notes for integer and double precision types here: https://www.postgresql.org/docs/current/datatype-numeric.html\nIf you need to store values of greater range or accuracy, please let us know.\nValue Set a default value for the field, which will apply when a new record is created.\n","categories":"","description":"Options specific to numeric fields","excerpt":"Options specific to numeric fields","ref":"/docs/fields/field-options/number-field-options/","tags":["Citizen Developer level 2","v6"],"title":"Number Field Options"},{"body":"When every table is created, a series of fields are automatically added. These aren’t displayed in the data entry form of a table, but are available to be added into views.\nID field In database parlance, the table’s primary key - providing a unique ID to identify each record. Values are generated in sequence.\nAgilebase creates and manages primary keys, using them to link related tables together automatically, however it’s useful for administrators to understand the concept and implementation. Many platform features depending on including the ID field for a particular table in a view, such as referenced fields.\nCreation Time [Auto] The record’s creation time, accurate to the ms and displayed to the second by default.\nCreated By [Auto] The user ID of the person who created the record, in the form Forename Surname (username).\nThis format is used to identify a user everywhere in Agilebase, for example when assigning a record to a user. When a user ID identifies a person in a chaser or email workflow, Agilebase will look up and use their email address, from their account details.\nWhen a record is created by a workflow, the Created By will be System User (system).\nWhen created by an API call, it will be Public API (IP Address) (public api, where the IP address of the calling system is recorded.\nLast Modified [Auto] The record’s last modification time. Behaviour is similar to Creation Time [Auto], above.\nModified By [Auto] The user ID of the person who last updated the record. Behaviour is the same as Created By [Auto].\nLocked [Auto] A boolean value which is true if the record has been locked by a workflow, to disallow further editing.\nView Count [Auto] How many times a particular record has been opened or viewed by a user. A measure of popularity if you like.\nActivity Histogram [Auto] The activity histogram of a record shows the relative activity of each record, i.e. the number of record edits that have occurred, over a period of time. It’s displayed as a small sparkline chart.\nThe activity over the past six months is shown, one point, or ‘spike’ per week. The more edits in a week there are, the higher the spike. Edits to ‘child’ records in a tab of a main record are also counted, but contribute relatively less.\nAs an example of use, in a display of sales opportunities, you want to know which opps. are being actively worked and which haven’t had any activity for some time. The activity histogram shows the ‘shape’ of activity over a period of time, at a glance.\nWith sparklines next to every record on screen, you can quickly get an idea of the relative activity of each.\nComments Feed [Auto] This field contains an amalagamation of all comments added to a record, newest at the top. Adding this field to a view allows recent comments to be seen for many records at once and is an easy way of making record comments searchable. As opposed to the comments tile, the user sees all record comments, not just those they are a recipient for, but only those for the table in question.\nNote - the Comments Feed [Auto] field combines comments from all comment fields in the table, if there’s more than one, as well as any comments added to other fields.\nDocument Storage (MB) [Auto] Shows the amount of storage used for all documents attached to a record (uploaded or generated), including previous versions. Adding this field to a view allows you to total up storage across all (or a subset of) records.\n","categories":"","description":"Metadata fields created and managed by the system","excerpt":"Metadata fields created and managed by the system","ref":"/docs/fields/field-types/special-field-types/automatically-present-fields/","tags":["Junior Software Architect","v6"],"title":"Automatically present fields"},{"body":"Document templates in Agilebase are typically used to create output that needs to be printed or emailed, for example form letters and especially anything that needs to be branded. They can be used for some quite complex and large documents, for example one customer uses them to create branded multi-page reports that are sold to customers, complete with custom fonts, layouts, images and colours.\nThe same templating system is used for both generating documents (which can be done automatically with a workflow or manually) and displaying output to be printed.\nEach template is attached to a view and given a name.\nCreating a template Templates can be created using the built-in WYSIWYG editor, which allows simple presentation controls, like adding tables, headings and text formatting.\nAlternatively and for complex needs, templates can be created manually. The templating language is Apache Velocity, which allows concepts such as variables, loops etc. to be used, i.e. simple programming features. The output format is HTML.\nFind or create a view which contains the data to be included in your output document. The idea is that each row in the view will correspond to one document, with the data from that row being merged in. The view needs to be created from the parent table of the file field created for the output document Toggle to development mode and click the top left pencil icon to edit the view Load the ‘workflow - generate PDFs’ panel Click CREATE to create a new blank template, then EDIT to edit it Tick a file field to assign the template to that file Then a user will see a ‘generate document’ button when they edit a record from the table, allowing them to generate a PDF from the template.\nExisting templates can also be edited or downloaded. Manually created templates with complex features such as variable setting and looping can’t be edited using the WYSIWYG editor, but can be downloaded, edited manually then re-uploaded.\nFilename The filename of the generated document will be comprised of two parts, separated by a dash: a) the name of the template which you created as above b) the value of the first field in the view above\nAdditionally if multi-tenanting is active, then the name of the tenant associated with the record the document is being generated in will also be added, preceded by a dash.\nIncluding data Each field in the view (included calculations), or parent table, can be merged in to the template by referencing the field name, preceded by a dollar sign. For convenience, a list of available fields is listed below the WYSIWYG editor, for easy copying and pasting into the template.\nFor those manually creating templates, a field name becomes a variable to reference by\nwriting it in lower case replacing spaces with underscores (_) removing all characters that are neither letters nor numbers Here’s an example of a template being updated in the WYSYWIG editor:\nUsing templates Templates can be used when generating documents, manually or using an automated workflow.\nThey can also be used as printout templates to let users print data from the system formatted as you wish.\nAdvanced templating Convenience features As well as data, various convenience features are available for insertion into a template.\nHere are some of the most commonly used utility functions.\nCode Description $viewTools.getCalendar() Return a Java Calendar object representing the current date and timeAlso useful: $viewTools.getCalendarConstant(String name), e.g.\n#set($dayOfWeek = $viewTools.getCalendar().get($viewTools.getCalendarConstant(\"DAY_OF_WEEK\"))) $viewTools.getDatestampString() Output the current date in the format 31/01/2023 $viewTools.getDatestampString(“format”) Output the current date/time in a custom format e.g. $viewTools.getDatestampString(\"EEE, d MMM yyyy HH:mm:ss\") $viewTools.getDatestampString(calendar, “format”) Output the given date/time (as returned by $viewTools.getCalendar() in a custom format $viewTools.getMathTool() Return a MathTool for doing maths $viewTools.getNumberTool() Return a NumberTool for formatting and converting numbers $viewTools.getRandomInt(bound) Return a random number \u003e=0 and \u003cbound $viewTools.spelloutCurrencyFromString(“number”) Convert e.g. “12.50” into “Twelve pounds 50 pence” $viewTools.spelloutNumber(number) Convert e.g. 1,200 into “One thousand, two hundred” Complex data merging Here are some of the most commonly used data retrieval / formatting functions.\nCode Description $view.getReportDataRows() Return all rows in the current view e.g.\n#set($rows = $view.getReportDataRows())\n#foreach($row in $rows)\n$row.getValue(\"name\")\u003cbr\u003e\n#end $view.getReportDataRows(view) Return all rows in the specified view e.g.\n#set($myView = $view.getReport(\"my view\"))\n#set($rows = $view.getReportDataRows($myView)) $view.getReportDataRows(view, n) Return the top n rows in the specified view $view.htmlTable() Output a HTML table containing the rows of the current session view (the last one the user opened), with session filters applied $view.htmlTable(view, rows) Given a list of rows as returned by getReportDataRows, from the specified view, format them as a HTML table e.g.\n#set($myView = $view.getReport(\"my view\"))\n#set($rows = $view.getReportDataRows($myView))\n$view.htmlTable($myView, $rows) $view.htmlTable(“table name”, “child view name”) For the given table, find the record being edited by the user. Filter the given view (which must contain the ID field for the table) by the ID of that record and output the rows as a HTML table. e.g.\n$view.htmlTable(\"organisations\", \"all contacts\")\nmight output the contacts belonging to the current organisation in the user’s session $view.htmlTable(“table name”, “child view name”, true/false) As above, but if true is added, include any columns which are empty for all records (they are excluded by default) $view.htmlTableTransverse(view, rows) As per $view.htmlTable(view, rows) above, but swap the axes in the table, i.e. field names will appear down the left, each row will be output as a column $view.htmlTableTransverse(“table name”, “child view name”) As per $view.htmlTable(“table name”, “child view name”) but again with swapped axes …and here are some of the most commonly used session functions. Each user gets a new session when they log in, it stores information about the system’s current state for them.\nCode Description $sessionData.getReport() Return the last view the user looked at $sessionData.getTable() Return the last table the user looked at $sessionData.getRowId() Return the ID of the record last loaded $sessionData.getTile() Return the open tile There are many more functions than these available, indeed the whole of the Agilebase user interface is created with templates including functions of these three types.\nThe entire templating API is beyond the scope of this documentation but if you do wish to create any template functionality not covered by the above, it’s probably possible. Please get in touch with us to discuss your needs and be pointed in the right direction.\nUsing Apache Velocity features In the examples above are some uses of simple programming code. A full reference for what you can do with the Apache Velocity language is here: https://velocity.apache.org/engine/2.3/user-guide.html\n","categories":"","description":"Templates allow the automatic generation of PDF documents, or printouts","excerpt":"Templates allow the automatic generation of PDF documents, or …","ref":"/docs/fields/field-types/special-field-types/file/document-templates/","tags":["Junior Software Architect","v6"],"title":"Document templates"},{"body":"By default, a file field added to a table will let users upload files.\nWhen a file field is added to a view, a link to download the file is included.\nFiles previews can be displayed in an image/document library tile.\nVersion history When a new file is uploaded (or generated), any previous file is kept as a previous version, displayed with a timestamp, for download by users.\nGenerating PDF documents If a template is uploaded using the file field options, the file upload button in the user interface will be replaced by a generate button.\nSee document templates for more information.\n","categories":"","description":"Allow people to upload or generate documents, images and other file types","excerpt":"Allow people to upload or generate documents, images and other file …","ref":"/docs/fields/field-types/special-field-types/file/","tags":["Citizen Developer level 2","v6"],"title":"File fields"},{"body":"There are a number of ways to extract data from Agilebase, whether manually for an individual’s use or programatically for integration with other systems.\nThere are also multiple ways other than the user interface to enter data into Agilebase.\nOutgoing Data Users are able to:\nExport Data to spreadsheet Generate Docs via a template Access attached files Print screen information Third parties can access data via an API, either:\nPULL data PUSH data There is also dedicated facility for integrating data with a Calendar\nCalendar Integration Finally, data can be sent to third party reporting tools like Power BI, Tableau, Excel or anything which can use ODBC\nExternal reporting (read-only access to data) Incoming Data Users are able to add data:\nVia the User Interface Import CSV files Third parties can save data into agilebase:\nVia the POST API Testing and debugging APIs Viewing logs Open the API view and toggle the development mode on From the panel sidebar, choose ‘use API’ and scroll down to Logs The most recent API actions and any errors which may have occurred will be shown\nShowing the internal ID of each record Sometimes it can be useful to see the internal ID (primary key value) of each record the API acts on, to match up with info from the third party system you’re integrating with. To do this, see Accessing additional debugging information\n","categories":"","description":"Using the API and other data IO options to extract data from Agilebase and/or connect with third party systems","excerpt":"Using the API and other data IO options to extract data from Agilebase …","ref":"/docs/integrations/","tags":["Junior Software Architect","v6"],"title":"Integrations"},{"body":"A workflow is a task that processes data to achieve a particular function. Agilebase has a number of workflow functions that can be used to automate or simplify the activities users would otherwise need to perform manually.\nWorkflows can automatically edit records and create new records, saving a lot of manual typing. The system will follow rules for creating new records, editing values in existing records or taking other actions. The rules can be simple or complex, in fact anything that can be represented by a standard view, which makes it quite powerful.\nWorkflows can also send email notifications, generate documents and push data to 3rd parties. Importantly steps can be chained together. Many business processes can therefore be fully automated. As an example if the system stores recipes, whenever an allergen is changed, a product specification doc can be generated and emailed to significant customers.\nCreating a workflow Here are the basics.\nA workflow is represented by a view. First create the view to represent the workflow\nAny records which become visible in your workflow view will trigger the action selected. So add filters (on a calculation if necessary) to select only the records you wish to trigger the action.\nIf creating or editing a record, the fields in the view will populate the new or existing record. Any fields in the view with the same name as a field in the table will populate that field with its data. The view field can be a calculation as well as a standard field.\nOnce the view fields and filters have been created, open up the ‘workflow - edit records’ panel. Choose the type of workflow, e.g. ‘create new records’ or ‘update records’. Fill in the options for ‘recording the time of the last action’ by selecting a date field in the table the view’s based on. This date will be updated every time the workflow runs. If there’s no relevant date field existing, add one to the table.\nChoose when the workflow should be run. Use the option manually only if for example you want the workflow to run on a button press. Alternatively, set the frequency you wish the workflow to attempt to run. This determines how often the system should check whether there are records to process. The check is only done if there’s been a relevant change to the state of the system e.g. records edited since the last workflow run. However all workflows with a check frequency are guaranteed to run at least once a day.\nUsing 24 hours plus a filter on a ’d’ay of the week’ calculation allows you to run weekly workflows.\nFor 24hr workflows you can optionally set a specific time of day for them to run.\n","categories":"","description":"A powerful set of automation features","excerpt":"A powerful set of automation features","ref":"/docs/workflows/","tags":["Junior Software Architect"],"title":"Workflows"},{"body":"When systems get to a certain size, in particular when you start integrating with apps representing other parts of the business, then it can be beneficial to be able to test new developments and changes before putting them live.\nFor example, when accepting orders via an e-commerce website, or sending invoices to an accounting package, or accepting incoming stock change records from Goods In staff using a bar code scanning application.\nIn cases like that, you don’t want potentially large quantities of test data polluting your live system. And when systems are up and running, they can be mission critical - you don’t want a change to cause online orders to be missed or incorrect invoices to transfer to accounts.\nPeople from the traditional IT world will be familiar with the concept of testing changes during the development process, before deploying them live.\nAs Agilebase is a no-code platform, the processes are slightly different - there are no ‘code’ changes to deploy. But here’s how we achieve the same.\nCommissioning a test server In summary, when your system is\nmature mission critical integrating with third party systems then you will most likely benefit from requesting a test server setup.\nThe test server will be an exact copy of your live system. The application structure (table, views etc.) will be the same as will the data itself in the database. All users and roles will also be the same, so people can log in using their existing username and passwords to test changes.\nThe test process Transfer a snapshot from live - this will update your test system to be an exact copy of the live system as of approx. 7am in the morning Log in to the web interface for your test server at www.linode.com Click your test server name, then the ‘Launch LISH Console’ button at the top right Enter your username, then password at the prompts Type sudo ./reload.sh and enter your password again The system will now update from the latest snapshot. Type ’logout’ and press Enter Please wait around 5 minutes then you’ll be able to log in to it Make and test any changes on the test server View a summary list of changes you’ve made Use the enhanced audit trail to see changes like field addition/removals or view alterations If you don’t already have the enhanced audit trail, it will be set up as part of the test server commisioning process Re-create those changes in the live system This is currently a manual process, though the audit trail above helps ensure you’ve not missed anything Internal IDs for tables, fields and views are deterministic. That means if you create them with the same names in the same order on the live system, they will get the same internal IDs. Therefore APIs using them won’t need changing API Authorization keys however will be different, so will need updating in any system that calls a new API By default, a new snapshot will be made available every 24hrs, at around 7am. However, if you wish, you can ask us to set up a different timing or frequency of snapshots, just let us know.\nTesting Agilebase platform updates As well as testing your own changes, the test server comes with the added benefit that you can access pre-release versions of new versions of the Agilebase platform itself.\nThat means you can test out new features before they’re released and if you like run your own API tests against it.\nWe do of course have our own automated API and end to end tests, but you’re welcome to add your own specific unit tests for any APIs specific to your setup.\nYou will be optionally enrolled onto our pre-release mailing list to be notified when a new version has been prepared, along with it’s planned release date which will typically be Monday to Wednesday the following week.\n","categories":"","description":"Using a test server to dry-run integrations","excerpt":"Using a test server to dry-run integrations","ref":"/docs/integrations/test-server/","tags":["Software Architect","v6"],"title":"Testing"},{"body":"Do not auto-populate When this is un-ticked, the next number in the sequence will always be generated and saved for this field, whenever a new record is created.\nWhen the option is ticked, the field value will be left blank when a new record is created. A button will appear in place of the value, which on pressed will create and save the next sequence value.\nOne benefit of this is to allow ‘accidental’ creation of records without using up the next value in the sequence. So for example, if an ‘invoice number’ field has this option ticked, creating an invoice and then immediately deleting it won’t use up a sequence value, leaving a gap.\nNote that if records are created by a background workflow, this option will be overriden and sequence values will always be generated and saved. The assumption is that automated workflows will always create the correct records.\n","categories":"","description":"Options specific to auto-generated numeric sequence fields","excerpt":"Options specific to auto-generated numeric sequence fields","ref":"/docs/fields/field-options/sequence-field-options/","tags":["Citizen Developer level 3"],"title":"Sequence Field Options"},{"body":"As well as using the REST API, an ODBC database link can send data to external tools such as Power BI, Tableau, Apache Superset or preset.io or even just Excel.\nPlease see Business Intelligence for full details.\n","categories":"","description":"Sending data to an external tool via a database link","excerpt":"Sending data to an external tool via a database link","ref":"/docs/integrations/external-reporting/","tags":["Software Architect","v6"],"title":"External Reporting"},{"body":"Some options control the interface that a user sees (whether it’s displayed in rows and columns, with headings, or as cards in columns for example) and others affect the contents of the view, i.e. which data records it contains.\nBoth types of option are accessed from the view as follows, we’ve just split them into the two types in this documentation for easy understanding.\nIn development mode, open a view (or open a view then toggle development mode on with the toggle switch at the top right of the screen) Click the big pencil icon at the top left and select properties and options from the menu ","categories":"","description":"Many options affect how views look and behave","excerpt":"Many options affect how views look and behave","ref":"/docs/views/options/","tags":["Citizen Developer level 3","v6"],"title":"Options"},{"body":"Types of Action Actions fall in to two types:\nThose that effect data held within Agilebase tables Those that send data to another system. Alter Data Use the dropdown within the workflow - edit records panel when editing the view to control the action that will be applied to every record in the view. Options are:\nCreate record - This will create a new item in the nominated table Update record - This will alter the values of the record. Lock record - This will apply a record level lock on the item. Delete record - This will totally remove the record. Creating records If ‘create record’ is chosen, a couple of other options appear.\nYou can select which table the new record should be created in ‘Auto-connect new records’ can be used when chaining workflows Sending Data The options to send data are contained within the send section of the workflow tab. Matching records will be sent to the appropriate function.\nSend data to a third party via API Send an email Send an email Chaser Send to document generator RSS feed - See facility with PULL API ","categories":"","description":"Each workflow can perform a single specific action","excerpt":"Each workflow can perform a single specific action","ref":"/docs/workflows/types-of-actions/","tags":["Junior Software Architect","v6"],"title":"Types of Workflow Actions"},{"body":"A field separator creates a block of fields, starting with the separator and ending at the next one (or the last field in the table).\nThese blocks can either be initially contracted, or expanded. Here’s a screenshot showing a number of contracted blocks, with one expanded.\nTo program the initial state of the block Create a view from the table the separator is in Add filters to that view that leave only records which the block should be expanded in present In the fields tab of the table, click field options and select the view for the expand if record in view option There are two other selections that can be made for the expand if record in view option other than selecting a view.\nexpand if under 10 blocks on the screen expand never Remember, these just set the initial state of the block when a record is first opened, blocks can be expanded and contracted by the user at any time.\nPlace tabs here Normally, the first time a separator is encountered, as well as starting a block, any tabs which the table has will be shown in a row just before the block.\nTo prevent that, un-tick this option. Then the block will be created but the tabs row won’t be displayed until another separator is encountered, with place tabs here ticked.\n","categories":"","description":"Options specific to separators, which form groups of fields into blocks","excerpt":"Options specific to separators, which form groups of fields into …","ref":"/docs/fields/field-options/separator-options/","tags":["Citizen Developer level 2","v6"],"title":"Separator Options"},{"body":"Any view can be used to generate an API - a unique URL which third party services can call in order to extract data, or which can be used to push data to those services and applications.\nThe view created in this case is used to define the set of records to send and the fields to include.\nFor more information, see the integrations topic, which contains full details of how to set up and use APIs.\nThis topic also includes information about APIs which receive data from third party systems, as opposed to sending to them, for which a view isn’t necessary.\n","categories":"","description":"Using a view to create an API","excerpt":"Using a view to create an API","ref":"/docs/views/special-uses/apis/","tags":["Junior Software Architect","v6"],"title":"APIs"},{"body":"A workflow can be used to edit data in the system automatically.\nThe view created in this case is used to define the set of records to act on (others can be excluded via view filters and also the data to use - each calculation or field in the view can be a source of data to create or update.\nFor more information, see the workflows topic, which contains full details of how to set up and use workflows.\n","categories":"","description":"Using a view to create a workflow","excerpt":"Using a view to create a workflow","ref":"/docs/views/special-uses/workflows/","tags":["Junior Software Architect","v6"],"title":"Workflows"},{"body":"Also, new features, news and tips and tricks are posted on https://blog.agilebase.co.uk. Please subscribe on that page to receive any updates.\nWhen carrying out changes to critical systems which the business relies on, you may wish to take advantage of a test server\n","categories":"","description":"Resources typically useful in the later stages of development","excerpt":"Resources typically useful in the later stages of development","ref":"/docs/advanced-usage/","tags":["Software Architect","v6"],"title":"Advanced Usage"},{"body":"Show charts by default When a user opens this view, immediately show charts rather than data rows\nInterface -\u003e inline editing The goal of this feature is to allow rapid and efficient editing of data when in the list view so there’s no need to drill down into a record to edit and back to the list again after each.\nSome examples of where this might be useful would be when working through a list of milestones to update statuses, or when in a list of stock items to update quantities.\nIn inline editing mode, the list view changes from something like this:\ninto this editable version:\nCertain fields will be editable, but others will be read-only.\nFields that can be editable are all those which are from the view’s parent table as well as the display fields of relations in that table.\nFor example, if editing a list of contacts, then the contact name, email, phone number etc. would be editable as well as the organisation name, if the contacts table had a relation field linking to the organisations table, which had organisation name as its display field.\nFields that will not be editable are\ncalculations fields from other tables joined to the view, except relation display fields as above The inline editing option has three states:\nDisallow: the view can’t be inline edited Allow but turn off by default On by default Interface -\u003e cards in columns When cards in columns is selected, the display switches from showing each record as a row, to showing each as a card in a column.\nThe column names are generated from the first dropdown field in the view (there must be at least one dropdown field in the view for this to work).\nEach available option in the dropdown becomes a column. Each record is placed, as a card, in the column which matches the dropdown value for that record.\nDragging a card from one column to another updates that record, changing the value of the dropdown field to match the column.\nVertical grouping within a column It’s also possible to sub-divide each column into groups. To achieve that, simply set up the available options in the dropdown to have prefixes separated by a dot.\nE.g.\n1.1) column one, group 1 1.2) column one, group 2 2.1) column two, group 1 2.2) column two, group 2 Then, cards can be dragged to different groups, not just different columns.\nStyle (layout options) The visual style affects whether a list of rows is shown with headings or not. This is not used when the cards option above is active.\nspreadsheet format - standard output in rows (no headings, the default option) headings and rows long headings and rows When headings and rows is selected, the first field in the view will be used as a heading for the rows below. A new heading appears every time the field value changes.\nWhen long headings and rows is selected, an amalgamation of content from the first fields in the view that all belong to the view’s parent table will be used as a heading. As soon as a field is encountered that is from a different table, heading text generation stops. Calculations that are added to the view can also form part of a heading, as long as they are placed next to (before, after or within) that first set of fields from the view’s parent table.\nFor example, if the fields in a view of organisations and contacts are\nOrganisation name (from the organisations table) Website address (from the organisations table) Contact Name (from the contacts table) Email address (from the contacts table) then a heading would be generated consisting of organisation and website address. Each time a row where one of these is different is encountered, a new heading row will be shown.\n","categories":"","description":"These options control how data is displayed","excerpt":"These options control how data is displayed","ref":"/docs/views/options/display-options/","tags":["Citizen Developer level 3","v6"],"title":"Display Options"},{"body":"Group by all non-aggregate fields Affects how some calculation aggregates worked - documented in calculations -\u003e aggregates of child rows\nAllow exports See Security And Compliance -\u003e Exporting\nRecord limit Only return the top N rows of data from the view, even if there are more available. This is equivalent to adding a LIMIT clause in SQL.\nDistinct fields If many rows in the view have the same values for a particular field, then reduce the number shown to only one row for every distinct (unique) value of that field. The top row is returned.\nMultiple distinct fields can be added, in which case the rows reduce based on their values unique in combination.\nFor example, imagine you have a view showing countries, cities and populations, sorted by population descending, with data like:\nJapan, Tokyo, 13,515,271 Japan, Nagoya, 2,283,289 UK, London, 8,908,081 UK, Bristol, 463,400 Adding a distinct field on the country would reduce this to the most populated city in each country, i.e.\nJapan, Tokyo, 13,515,271 UK, London, 8,908,081 DISTINCT is an SQL feature\nAmalgamate with If you have two views with fields of the same type in the same order, then you can merge them together into one. The field names don’t necessarily need to be the same.\nThis is done using an SQL UNION clause.\nCache view rows Caching can speed up views. It doesn’t need to be used often as the underlying database PostgreSQL is great at dealing with large data problems, but when it is necessary it can significantly speed up access, allowing faster loading and searching. Caching works well when\na view is complex and slow to load it doesn’t contain a massive number of rows - in this case the issue is likely to be the raw volume of data, rather than the complexity of calculations If both those criteria are met, then turning on caching can significantly speed a view up, allowing faster loading and searching. There are three options\nno caching (the default) cache view, update on record save this means when a view is opened or searched, if there have been changes to data in any tables used by the view since it was last opened, then the cache will be updated cache view, update once a day useful for views that don’t need to be updated often, e.g. monthly reporting figures If a view is cached and other views reference it, those other views will also speed up too.\nCaching is implemented using materialized views.\nIf you find a view is slow, feel free to contact us for support before trying options like caching, there are many other targeted options we can look at first, such as adding indexes.\nQuery Plan The majority of the time you will not need to change this setting. However here’s what it does in case you do:\nWhen getting data from a view (the list of rows), the database internally uses a query planner. The planner works out the quickest way to return the results, as for complex queries there may be many possible ways.\nMost of the time that works very well, in fact increasingly well with each new release of the PostgreSQL database. However sometimes a sub-optimal plan can be used, resulting in a slow view. Agilebase then automatically tries out an alternative (specifically, disabling the use of ‘nested loops to see if that’s faster and sets this option if so.\nThis option only needs to be changed if the Agilebase detection fails (which is possible, query timing can depend on many factors, such as how many other queries the database is running at the time), resulting in a slower view rather than a faster one.\nIn that case, you can experiment by changing the setting from ‘default’ to ‘alternative’ or vice versa.\nAs above, feel free to contact us if you have any questions about improving database performance.\n","categories":"","description":"These options affect the behaviour of a view","excerpt":"These options affect the behaviour of a view","ref":"/docs/views/options/behaviour-options/","tags":["Citizen Developer level 3","v6"],"title":"Behaviour Options"},{"body":"The following Workflows alter data within the system\nCreate record - This will create a new item in the nominated table Update record - This will alter the values of the record. Lock record - This will apply a record level lock on the item. Delete record - This will totally remove the record. When creating or editing a record, the fields in the view will populate the new or existing record. Any fields in the view with the same name as a field in the table will populate that field with its data. The view field can be a calculation as well as a standard field.\nRelation fields If you want your workflow to set the value of a relation find, i.e. link to a particular record, there’s no need to create a calculation for it, just include the ID field for the record you want to link to in the view.\nIf creating a calculation is easier, you can still do that. Either create a numeric calculation which outputs the internal row ID of the record to link to, or the text of the primary value for the relation. If the latter case, the field for the primary value in the related table should be unique and marked as such in the field options.\nTo set a relation field to blank, add a numeric calculation with the name of the field as normal, but set it to output the value -1.\nDeleting records is not reversible. Please use with caution.\n","categories":"","description":"Workflows can be used to alter data within the system","excerpt":"Workflows can be used to alter data within the system","ref":"/docs/workflows/altering-data/","tags":["Junior Software Architect"],"title":"Altering Data"},{"body":"It can be useful to include calculations and data from other parts of the system in a form, to add context and optionally allow editing of that related data.\nTo do that, a referenced data field can be added to the form. When adding this field, the administrator can choose a view to reference, the data from which will display in the form.\nThe way it works that a when a particular record is shown on screen in a form, the row ID of the record being edited is used to filter the results of that view. Records from the view that include that ID are displayed in a panel.\nReferenced data can also be used to\ndisplay charts provide default values for form fields show a workflow button - if the referenced view is a workflow, a button to run it will display Full details of all of these features can be found on the referenced data panel page.\n","categories":"","description":"Using views to embed data from other parts of the system into a data entry form","excerpt":"Using views to embed data from other parts of the system into a data …","ref":"/docs/views/special-uses/referenced-data-panels/","tags":["Junior Software Architect","v6"],"title":"Referenced Data Panels"},{"body":"Tabular display Rather than displaying rows from the referenced view as panels\nshow a table\nwhich is a more compact form allowing a greater volume of data to be shown in a smaller area.\nUse as a filter for relations See Common build patters - custom filtering when using a relation\nProminent Make the background of the referenced panel bright red - useful for showing warnings on screen.\nDisplay of fields Controls whether field names are displayed in the panel as well as values. Hiding the field name can be useful if for example you wish to create a referenced panel showing a warning message. You may want to just show the contents of the warning. In other cases, you may wish to hide the field if it’s not necessary as it’s obvious what the values are without additional context.\nThis option actually controls two types of field name, that of the referenced panel itself and also those of fields displayed inside the panel.\nThe options are\nContent fieldnames - show the names of fields inside the panel, but not the fieldname of the panel itself (the default) Panel fieldnames and content fieldnames - show all, as per the above screenshot Panel fieldname, no content fieldnames No fieldnames - show only the field values, useful particularly when there is only one value and when the context is obvious ","categories":"","description":"Options specific to cross-reference panel fields","excerpt":"Options specific to cross-reference panel fields","ref":"/docs/fields/field-options/referenced-field-options/","tags":["Citizen Developer level 2","v6"],"title":"Cross Reference Field Options"},{"body":"Posts about each new Agilebase release can be seen here:\nhttps://blog.agilebase.co.uk\n","categories":"","description":"Changes per release","excerpt":"Changes per release","ref":"/docs/change-log/","tags":"","title":"Change Log"},{"body":"To access them:\nIn the administration interface, expand the Administration section at the bottom left Select company Click the pencil icon in the top toolbar to edit Mandate 2FA When this is ticked, all users in the organisation will be required to set up Two Factor Authentication before they can see or use any features of the application.\nWe recommend that all administrators enable this if possible. Even when 2FA is mandated, admins can still disable it temporarily on a per-user basis. The next time they log in they will be prompted to set it up again.\nWhen this is off, users will still be prompted to set up 2FA, it just won’t be mandatory.\nSMTP server Agilebase workflows and chasers that send emails use an @notifications.agilebase.co.uk email address by default.\nYou may wish to instead use email addresses from your own domain name, especially if the system sends emails to people outside your organisation, like customers or suppliers.\nTo allow this, you will need to use your own SMTP server, or a third party trusted system authenticated against your domain name. Using a service like AuthSmtp, SendGrid or Amazon Simple Email Service is probably the most straightforward way of setting this up - their instructions will tell you how to set up facilities such as Sender Policy Framework and DomainKeys in order to increase email deliverability.\nOnce you have the SMTP server address, username and password from your service, enter them into the details in this section in Agilebase.\nSlack Webhook URL See Integrations - Slack\nSend chart subscriptions from Users can opt to have daily, weekly or monthly emails sent to them containing all the charts they’ve subscribed to for that period. The emails will come from an email address @notifications.agilebase.co.uk by default, this option will allow you to specify your own address.\nIf used, then the SMTP details above also need to be completed.\nExport message As you will know, your organisation is required to protect personal data, as per the GDPR. One thing to watch out for is what happens to data that is exported to spreadsheet?\nThere are various rules you can set up to control exports that are well worth familiarising yourself with, as an administrator. These control who can export, what they can export and how much can be exported. Once data is in a spreadsheet of course, the system no longer has any control over it. It can be emailed, shared etc. as the spreadsheet owner wishes.\nThis option allows you to set the text of a prompt that users see before exporting. It can be used to remind people of their obligations and point them to any further information provided by your organisation. They will need to tick to accept before performing the export.\n","categories":"","description":"These settings apply to the whole Agilebase account","excerpt":"These settings apply to the whole Agilebase account","ref":"/docs/advanced-usage/company-settings/","tags":["Software Architect","v6"],"title":"Company Settings"},{"body":"Firstly, identify the table into which you wish to receive incoming data. Edit that table and open the API panel. Tick ‘Public form or API data entry’, which will create an API for the table.\nTo protect the system from spam input, we also suggest you tick ‘Require API key’ and reload the table to show the API key generated. This then has to be submitted with every POST request as the value of the HTTP Authorization header.\nOptionally, you can add an email address to notify when a new item is added and an autoresponse text which will be sent to any email addresses found in the posted data.\nCreating new records Clicking the ‘sample form’ link will then show a sample form which can be used for testing or to copy code from.\nIf you want to submit data directly from an app rather than a web form, simply prepare a HTTP POST request that mimics the form. Again, use the source code of the form as a reference. Note the form contains three hidden fields that need to be included. They are listed at the start of the sample form, for reference they are:\nsave_new_record = true c = [internalcompanyid] t = [internaltableid] The post URL is\nhttps://appserver.gtportalbase.com/Agilebase/Public.ab\nThe form needs to be posted using the method POST.\nRemember also to set the ‘Authorization’ HTTP header if that option has been selected.\nSpecifying the data to save To specify the contents of each field to be saved, just add an\n[internalfieldname] = value parameter for each field.\nThe internal field names necessary will be shown on screen when API use is enabled.\nAlternatively, friendly field name parameters can be used, with the addition of the parameter\nallow_friendly_fieldnames = true Then [internalfieldname] can be replaced by [friendlyfieldname] which is the lowercase version of the field name, with spaces replaced by underscores and all other special (i.e. not a letter or a number) characters removed.\nFor example, the field ‘Discount Approved?’ would have the friendly name discount_approved.\nWe suggest you only use friendly fieldnames if you’re confident the field name isn’t going to change. Internal fieldnames are constant and never change, whereas friendly names can easily change if the field is renamed.\nWith the option on, internal field names and friendly field names can be mixed and matched, i.e either can be used for each field - some fields can be specified by internal ID and others by friendly name.\nThe API can be tested using a tool such as Postman.\nUpdating existing records The process is similar, but instead of save_new_record=true, supply\nupdate_record=true row_id=[internal id of the record] The internal record ID can be got from a JSON feed or by using the return=posted_json as above if editing a record previously created using the API.\nUploading files As well as ‘standard’ data, Agilebase can accept documents posted into a file field. This can be done in two ways:\nMake sure the form is posted with encoding type multipart/form-data. Then simply post the contents of the file with the form parameter specifying the internal name of the file field. Post the form normally (not as multipart/form-data), and provide a URL value for the file field. That URL will be downloaded by Agilebase and the contents saved as a file. Method 2 is Zapier-compatible.\nResponse The response to the successful request will be a JSON representation of the complete record created or updated, after the update has taken place. An object of key-value pairs is returned, the key being the internal field name.\nThe row ID is returned with the key rowId - this is often useful to identify a record when performing multiple actions. For example, when a new record is created, the calling system may want to store its row ID in order to be able to make future updates to the same record.\nIf there is an error, an appropriate HTTP response code is returned (see below) along with JSON explaining the error, containing three keys. For example if an incorrect Authorization header is supplied, the response may be\n{ \"error\": true, \"type\": \"DisallowedException\", \"message\": \"User public api is not allowed to edit delete data in table my table. An administrator can set up privileges so this can be allowed\" } HTTP response codes 200: success 401: unauthorised: the API key is missing or invalid 404: not found: an object identified in the request was not found e.g. no match was found for a table ID specified with the ’t’ parameter 429: too many requests: the frequency of requests is too high, please throttle them back 507: insufficient storage: when creating a record, the limit on number of records which can be stored has been reached. Contact us to purchase additional capacity. 500: some other server error When there is an error, a response header X-AB-error is also set with the type and content of the error message.\n","categories":"","description":"A powerful automation feature that can allow a third party system to POST data in to Agilebase.","excerpt":"A powerful automation feature that can allow a third party system to …","ref":"/docs/integrations/setting-up-the-post-api/","tags":["Junior Software Architect","v6"],"title":"Creating a POST API"},{"body":"Type The type of document typically stored by this field. Can be\nDocument - such as a PDF file or spreadsheet for example Image/photo Profile photo The selection affects the display in the user interface in some ways. In particular when a profile photo field is moved to the start of the record, it is displayed as part of the record header.\nImage resolution This option allows you to specify that the system should automatically down-size any large images uploaded. This could be to save storage space (for which there is a cost), or it may be appropriate if these files are going to be attached to emails sent by the system.\nTemplate Type the name of a template to be used for generating PDF documents to be stored in this field.\nView to use The system will look in this view for a template with the name specified above.\nPaper size When a PDF is generated, base it on this size of paper. The default is A4, changing this can be useful if e.g. you want to use the system to print labels.\nFooter Optionally, add a footer to every page of a generated document, including the name of the document, page number and total number of pages.\nThe document name is set to be the contents of the first (non-ID) field in the ‘view to use’ (see above), so you can set it to whatever you like. A calculation can be used if required.\n","categories":"","description":"Options specific to file fields, including for generating documents","excerpt":"Options specific to file fields, including for generating documents","ref":"/docs/fields/field-options/file-field-options/","tags":["Junior Software Architect"],"title":"File Field Options"},{"body":" Firstly, create a a view which contains the data you wish to send In the ‘Use API’ panel, enter a URL into the Push URL field. This is the URL that Agilebase will POST to when there’s new data. In the table that the API view was created from, add a new date/time field, accurate to the second, for the system to record when the API push was last used Go back to the view and the ‘Use API’ panel and select the field you just created for the ‘Log Time Of Push To’ field. The system will now make a POST to the URL specified in step 2 whenever there’s new data to send. It will contain one parameter, ‘json’, which is a JSON representation of all the data in the view. Selecting data to push How do we know which data is new and wants to be sent out via the API?\nThat’s up to you - any filters can be added to the view to select data you want. Commonly, you’d use the date/time field set up in step 3. When a push successfully completes, every record in the view has this field set to the current time.\nNote: if the push encounters an error for any reason, say the third party system returns a HTTP error code rather than the expected ‘200’ code for success, the timestamp won’t be set.\nA few common scenarios would be:\nPushing any data modified since it was last pushed To do this, add a boolean calculation to your view, something like\nneeds pushing = {last modified [auto]} \u003e {last pushed}\nwhere ‘last pushed’ is the name of the timestamp field you added in step 3 above.\nThen add a filter on the view ‘needs pushing equals true’.\nPushing any new rows that have never been pushed before For this scenario, simply add a filter to the view ‘last pushed is empty’.\nPushing only rows not yet marked as received In some cases, you may want to be even more prudent than using the internal timestamp. The third party system could make a separate API call to Agilebase for every row that’s received, telling it to update the row with an ID to prove receipt. That’s more API calls of course, but some situations may warrant it.\n","categories":"","description":"A powerful automation feature that can send data to third party systems.","excerpt":"A powerful automation feature that can send data to third party …","ref":"/docs/integrations/setting-up-the-push-api/","tags":["Junior Software Architect","v6"],"title":"Creating a PUSH API"},{"body":"When integrating Agilebase with third party systems, the API is really useful. Programmers can use it to send data to websites, to other software such as PowerBI, a Business Intelligence tool, or to external systems such as label/barcode printers for example. The opportunities are endless.\nAgilebase can either ‘push’ data to a third party system, or have the third party system ‘pull’ it out.\nWhat’s the difference? Simply put, if pulling, a third party system has to regularly ask, or ‘poll’, Agilebase whether there’s any new data. It may do this once an hour, once every few minutes or however often it needs. That means extra work for both systems. New data may be reasonably infrequent but when it is there you want it to be transferred quickly, which means polling often even when there’s nothing to send.\nConversely, with ‘push’, Agilebase sends a message to the third party system only when there’s relevant data to send.\nPUSH When using push, calls are made only when necessary. Further, you can specify in the settings the maximum number of calls to make per day, so you can control the maximum possible cost. You can set it to anything from once every 5 minutes to once a day. Different integrations may require more or less timely data. For example invoice totals may be ok to push to an accounting system once a day but individual customer orders may be best sent as soon as they’re received.\nMore detail about setting up a PUSH API can be found here\nPull Connections to Agilebase are made using standard HTTP calls. This makes it easy for developers in any language, so PHP, Java, even JavaScript in a browser can be used.\nMore detail about setting up a PULL API can be found here\n","categories":"","description":"Each workflow can perform a single specific action","excerpt":"Each workflow can perform a single specific action","ref":"/docs/workflows/send-data-to-a-third-party-via-api/","tags":["Software Architect"],"title":"Send Data to a third party via API"},{"body":"Where there is ‘child’ data related to a parent table, e.g. a contact belonging to an organisation, a list of child records can be shown in a tab in the parent record.\nA view can specify which records are shown. Perhaps some should be filtered out, like e.g. contacts who no longer work at the organisation - view filters can accomplish that.\nThe fields of the view are what’s shown in data rows in the tab.\nAdditionally, a separate view can be set in the tab options, to allow for creating records to populate the tab with an initial set of data.\nFor more information on setting this all up, see table tabs.\n","categories":"","description":"Showing data in a form tab","excerpt":"Showing data in a form tab","ref":"/docs/views/special-uses/tabs/","tags":["Citizen Developer level 3","v6"],"title":"Tabs"},{"body":"Some of these are just useful ideas, some are tips and tricks and some are larger-scale build patterns for more complex tasks commonly undertaken by customers.\nThese tips will link to various other places in the documentation, but it will still be useful to have some experience of building in Agilebase before reading.\nSettings table idea To use a single store of a common setting throughout the application. When a setting is changed it will then automatically take effect throught the whole application.\nExample: VAT rate\nSnapshots idea Taking snapshots of a set of rows from a table at a point in time allows a comparison of earlier snapshots with later ones, or the current state, to show differences.\nExample: delivery van loading reports. An initial snapshot of tomorrow’s orders shows what product quantities to load onto the vans. Later snapshots, taken at any point, will show any additions/removals needed at that time, by subtracting the current order lines from previous ones.\nGap filling in monthly (or other period) reporting When reporting monthly figures in a view (e.g. quantities sold per product per month), if there may be some gaps, they can be filled with zeros.\nIn outline, the solution is to\nCreate a table containing one and only one record. Once a record has been created, disallow adding or removing records using table options. From that table create a view called e.g. ‘month series’ Add a generate_series calculation to that view to generate the list of months required. A report can then be created by joining from ‘month series’ to the actual data you want to report. You may need to join on a calculation, e.g. a text representation of the month (using the to_char function) or an amalgamation of a month and product code.\nJoining on compound keys Extending the above, what about when you want to summarise by two factors, e.g. ‘by customer by product’. In that case create calculations to make a unique key per combination e.g.\n{customers.id:customers} || ‘_’ || {products.id:products}\nUse the same calculation in views you want to join to and join on it.\nThis is much better than the ’naive’ idea of creating separate joins to each table, which won’t work.\nIncluding multiple aggregates from different sources Joining from one table down to multiple child tables in order to perform aggregates will not work - you’ll experience double counting.\nFor example, if a customers table joins down to both ‘customer invoices’ and ‘customer complaints’, then a count(*) calculation will return neither the number of invoices or complaints, but the product of the two i.e. the number of invoices times the number of complaints.\nTo solve this,\nCreate one view dedicated to each aggregate calculation, created from the parent table. The view will then have one row per parent record i.e. customer in this case From a final view created from the parent table, join to these views in order to include the results Calculating the number of weekdays or weekends between two dates Generate a series of all the dates between two dates, calculate the day of the week for each From a separate view, join to this series and count up all the cases where it’s not a weekend This is necessary as calculations on the results of a generate_series often need to be done from a separate view\nOutputting a ‘pivoted’ view in a printout In a template, $view.htmlTable(“table name”, “view name”) outputs the contents of the view.\nUse $view.htmlTableTransverse(“table name”, “view name”) instead for a pivoted version with columns and rows swapped.\nCapturing dates of status changes on lookup list Show a date field only when the dropdown reaches the desired status, using field options. Use a referenced data field to populate it with the current time.\nRecord Builder Scenario: A customer tends to order the same products every time. Have an option for the system to auto fill the “standard” order every time an order is placed.\nUse the tab option Populate from template.\nDe-duplicating a comma separated list Calculation template:\narray_to_string( array(select distinct unnest( regexp_split_to_array(‘my,comma,separated,list’, ',') )) ,',') Example:\narray_to_string( array(select distinct unnest( regexp_split_to_array( string_agg({b2.2) ingredient suppliers.ingredient supplier's countries of origin}, ',') ,',') )) ,',') Custom filtering when choosing a relation When choosing a relation, either in a junction table or otherwise, the system will automatically filter on the ID of any related parent record. For example, when adding order lines to a customer order, if each product is related to a customer, then the system will automatically only let the user choose products for that customer.\nHowever it won’t filter on anything that’s more than one direct relationship away. If you want to do that, or indeed filter on anything else at all, you can create a filter calculation.\nIn the relation chooser view, create a calculation e.g. ‘my relation filter’ and set it to contain the contents of what you want to filter on e.g. some other field. The calculation can be hidden. From the main table, create a new view. In that view, create a calculation with the same name and contents. Add that a cross-reference field into the main table, utilising that view. In the field options, tick use as filter Switching a field from one type to another For example, converting a whole number field into a decimal number\nRename the field to ‘{fieldname} old’ Add a new field ‘{fieldname}’. This means that any calcs updated won’t have to be changed and won’t break due to mis-matching field names Copy all values from one field to another. The easiest way to do that is to use a workflow Try to delete the old field. It will show a list of views that contain it Edit all those views to remove references to the field and add the new field. That includes updating all calculations that reference the field to trigger the system to realise that the calc. no longer references eht old field Remove the old field Finding the ’latest’ child record A common scenario occurs when you have a one to many relationship. You want a view which shows precise info from the ’latest’ child record.\nStart with parent table and join to child, add the controlling field and set the correct order. For example, sorting by ‘created on [auto]’ descending will give you the newest child record. Then go to properties and options panel when editing the view and set the Distinct Field option to the Parent table’s ID field.\nYou can now freely add what ever fields from the child record happy in the knowledge you’ll only have the one line per parent.\n","categories":"","description":"Common patterns, or recipes for accomplishing useful tasks","excerpt":"Common patterns, or recipes for accomplishing useful tasks","ref":"/docs/advanced-usage/build-patterns/","tags":["Software Architect","v6"],"title":"Build Patterns"},{"body":"Agilebase automatically takes some measures behind the scenes to maintain high performance as data volumes grow.\nThere are other mechanisms that can be manually enabled such as caching and increasing the memory assigned to particular views.\nFinally, we will be happy to to do all we can to speed up any parts of your application that require it if you contact us. Often, a solution as simple as manually adding an index to a particular field can speed up requests by multiple orders of magnitude.\nFor really big data projects, there’s also the option of utilising PostgreSQL-compatible database services designed for such tasks, like Citus Data, which we will be happy to provision.\n","categories":"","description":"Working with big data and complex views","excerpt":"Working with big data and complex views","ref":"/docs/advanced-usage/performance-optimisation/","tags":["Software Architect","v6"],"title":"Performance Optimisation"},{"body":"Agilebase can be used to send emails. This facility should NOT be used for marketing purposes, rather as a method to notify people about data associated to the system.\nNote: When setting up an email alert, the system needs to know the email address of the recipient. Sometimes this may be very simple, when you always want to send the alert to the same person. For some alerts though you may wish to change who gets it depending on the data, e.g. each salesperson may get the leads assigned to them. In this case, the system will need to know the email address, so it needs to be stored somewhere. For Agilebase users, if they use their email address as their username, the system can pick this up when a user’s assigned to a record, either manually or as part of the automatic ‘created by’ and ‘modified by’ fields\nStep 1: add a necessary field Select the table which has the alert data in it and add a date/time field with SECOND accuracy called e.g. “Last notified”. This will be used by the system to store when the last notification was sent for each record.\nStep 2: create a new view Create a view from the table above, containing all the information you want to send in the email. Sort it by “last modified [auto]” descending, so new items appear at the top.\nStep 3: add filters Add filters so that only records that need an email notification to be sent appear. It’s important that records must disappear once a notification’s been sent otherwise the recipient will be bombarded with repeat alerts.\nFor simple alerts of new items, add a filter “Last notified IS NULL”. That way, a notification will only ever be sent once for a record.\nTo set up a repeating monthly alert, you could add a filter “last notified is more than 1 month ago”, with or is blank ticked:\nIf you have any difficulty thinking up what criteria you need for your purpose, please get in touch.\nStep 4: fill in an email template Edit the view and open the workflow - send emails panel Select email notification Fill in the subject, to and body of the email. To merge in data from the view, use field names in lowercase surrounded by curly brackets. A typical template would look something like this: You can attach documents to the email by including the field name for a file in the message.\nUnder the email template, set “Notification time field” to the field that you created in step 1, e.g. “Last notified”\nNote in the To: field, you can include email addresses manually, or merge them in from the view. If you are assigning records to users in Agilebase, you can use that field and the system will automatically pick out the email address for them.\nThat’s it! Note when testing, we recommend setting the “To:” value to your own email address, just until you’re sure everything’s working properly.\nIncluding attachments If you add a file field to the view, it will be added to the outgoing email as an attachment. Note the ID field for the file field’s parent table also needs to be present, which should happen automatically.\nIncluding record history To include a log of recent updates to a record (since the last notification was sent), just add the line\nab_record_history\nto the body of the email.\nRich text (HTML) emails HTML emails can now be sent by apps built on the Agilebase platform. That means that your company can send out branded, rich-text emails (with attachments) to customers, suppliers and anyone else you deal with.\nSetting up Set up an email notification workflow as normal (when editing a view, use the workflow - send emails panel).\nStart the body of the email with \u003chtml\u003e and end with \u003c/html\u003e.\nThe email will then be interpreted as HTML, i.e. formatted.\nYou do need to know some basic HTML. If you’d like to get started there are plenty of great tutorials on the web - here’s an example: www.htmldog.com\n","categories":"","description":"Workflows can be used to send an email","excerpt":"Workflows can be used to send an email","ref":"/docs/workflows/send-email/","tags":["Junior Software Architect"],"title":"Send an email"},{"body":"Connections to Agilebase are made using standard HTTP calls. This makes it easy for developers in any language, so PHP, Java, even JavaScript in a browser can be used.\nThe first step is to create a view in Agilebase that contains the data you want to make available to other apps. You can use the standard view creation features of the administrator interface, including adding fields and calculations, sorts and filters.\nSecondly, turn on the ability for the view to be accessed via a PULL API by going to the use API panel, and ticking Send data to a third party system using the API.\nFinally Tick the Allow access from third party software using an API key.\nThe remainder of this article explains how to PULL the data.\nThe most important piece of information is the URL that the third party will access your data via. This will be:\nhttps://appserver.gtportalbase.com/Agilebase/Public.ab\nIf you host on your own cloud or on premises, this may be different.\nRequests can contain a number of parameters, the one which must be supplied to use the JSON API is get_report_json=true. Other parameters to control various options are detailed below.\nHTTP requests can be submitted as GET or POST.\nThree parameters for the view also need to be submitted as parameters to the request. These are ‘c’, ‘t’ and ‘r’, the values are displayed in the administrator interface (see screenshot above). Together, these identify the view from which to extract data.\nFinally, the API key provided needs to be submitted not as a HTTP request parameter, but as a header named ‘Authorization’. This is to reduce the change of it being cached or used in a browser string where it can be easily retained and read by unauthorised users.\nHere’s a complete example of making a request, using PHP in WordPress\n[php]\n$url = 'http://appserver.gtportalbase.com/Agilebase/Public.ab?get_report_json=true\u0026simple_format=true\u0026t=mytablecode\u0026r=myreportcode\u0026c=mycompanycode\u0026json_format=json'; $args = array('headers' =\u003e array( 'Authorization' =\u003e 'myauthorisationkey')); $response = wp_remote_get( $url, $args ); var_dump($response); [/php]\nSample output would look like\n[ { forename: \"Oliver\", surname: \"Kohll\", email_address: \"oliver@agilebase.co.uk\" }, { forename: \"Simon\", surname: \"Minton\", email_address: \"simon@agilebase.co.uk\" }, { forename: \"Cliff\", surname: \"Calcutt\", email_address: \"cliff@agilebase.co.uk\" } ] of course the fields being those returned for the particular view chosen. Request options Here are the options that can be provided as parameters to the request, along with the c, t and r identifiers and in addition to get_report_json=true.\nsimple_format=true/false (default false) This option controls the JSON format returned. With simple_format=true, the response will be a simple array of objects, each containing keys for the field names as above. Keys are basically lowercase field names with spaces replaced by underscores, so “Email address” would become “email_address” With simple_format=false, a more complex but more robust format it used. Rather than field names, internal Agilebase field identifiers are used as keys. This has the advantage that if the field names are changed (easy for an Agilebase administrator to do), the JSON will remain the same. The first object in the JSON will be a dictionary mapping internal identifier to field name.\njson_format=json With this option, just the JSON will be returned. This is the usual case required. Without it, complete Javascript will be returned defining the JSON as an object, i.e. var abJson=[…] which can be useful if you want to run the result as Javascript.\nreturn=posted_json Optional, if this is included, the return content will be JSON including the ID of the record as well as the full content of the data.\nunencode_html=true Causes characters which would normally be encoded as HTML entities (e.g. \u0026 -\u003e \u0026amp;) to be returned unencoded\nexact_filters=true/false (default false) If true, filters (see below) will be need to match results exactly instead of using the default ‘contains’ filtering\nrow_limit=[row limit] The default limit on the number of records to return is 10,000. Add this parameter to change this. Note the hard maximum allowed is 100,000.\nFiltering By specifying exact_filters=true, filters can be supplied to search for a particular record or set of records. For HTTP parameter names, just use the internal Agilebase field identifiers. The easiest way of finding these is to right click on a field in the administrator interface using a browser like Chrome, Safari or Firefox and select ‘inspect element’.\nStandard Agilebase quick filters can be used for preparing complex criteria on multiple fields, for example in each field using “?” to find blank records, \u003e and \u003c for numbers and date ranges, phrases like “last month” for dates, “=[word]” for exact matches, “:word” for starts with, and “!word” for doesn’t contain.\nResponse codes 200: request successful 401: unauthorised: the API key is missing or incorrect 404: not found: an object identifier (company ID, table ID or report ID) was supplied that wasn’t found in the system 429: too many requests: the frequency of requests is too high, please throttle them back 500: some other server error When there is an error, the X-AB-error header will be set and JSON returned representing the error, as happens with the POST API.\nTo ensure one customer’s use doesn’t consume an inordinate amount of resources, each customer can only process one pull API request at a time. Whilst a request is processing, any further incoming requests are held in a queue, then processed in order as the previous one finishes. If at any time, a request has been held up for 60 seconds, further requests result in the 429 error and they are discarded.\nIf this occurs, there are a number of tactics you can use to shorten individual response times or make less requests - please get in touch if you need help.\nGenerate API descriptions For developers who use the Agilebase API to create and update data within Agilebase from a third party product, there’s now a way to further automate the process.\nAgilebase will now generate a swagger.io compatible API description of any table you want to post to. That means if you deal with accounts for many Agilebase customers, you can with a common query get the API details needed to interact with them.\nJust make a POST request to\n/Agilebase/Public.ab with parameters\nc = the company identifier (the table options screen will show this) t = the table identifier (similarly shown by the options screen) describe_table = true and the ‘Authorization’ header set to the API key (if the table requires one).\nThis also makes testing with Postman easier, since Postman can import a Swagger API description – so you don’t have to write a single line of code to test out an API.\n","categories":"","description":"Control how third party systems read data from Agilebase","excerpt":"Control how third party systems read data from Agilebase","ref":"/docs/integrations/setting-up-the-pull-api/","tags":["Junior Software Architect","v6"],"title":"Creating a PULL API"},{"body":"The Chaser email facility is often used to remind people to send information. This facility is a dedicated tool, optimised to this purpose.\nIn a nutshell, the system comprises three parts\nchecking when something’s due and emailing the person who needs to supply it\nallowing the recipient to easily provide the data by following a link in the email to an online form. Documents can be uploaded and other information filled in\nif no response is received, re-sending a number of times, finally escalating to someone else (usually someone internal)\nExample The system can be applied whenever you need a third party to supply you with information or documents of a known type.\nFor example, a food manufacturer who receives ingredients from suppliers may occasionally need to raise a non-conformance where something isn’t up to standard.\nWhenever a non-conformance is raised against a supplier, whether as a result of an audit or ad hoc, the supplier can be chased for information about a resolution of the issue. Likewise, staff can be chased if an internal non-conformance is not resolved.\nSetup As an Agilebase administrator, if you want to set up your own chaser, here’s how to do so.\nCreate a view with a list of people to chase. When editing the view, open the workflow - send emails panel. email chaser should be selected by default\nTick ’enable this chaser'\nThe system will add a number of calculations to the view and a couple of fields to the underlying table, to help manage chasing. These will be listed on the screen after ticking ’enable this chaser'.\nPlease edit the calculations to fill in the details required, such as the email address to send messages to, the frequency with which to send messages etc.\nNow make sure that only things you want to chase are chased, by adding any relevant filters to the view. e.g. to show anything out of date That will be enough to get emails sending out. What about receiving the information back?\nSimply add any fields you want the recipient to supply to the view, from the parent table. The system will automatically create a form containing these fields (excluding any of the chaser fields above such as ‘to’ and ‘subject’). When the recipient receives an email, it will have a link in it that takes them to this form. If you want the content that the chaser sends out to be visible to users, add the chaser view into a form as a referenced data field. The panel displayed to users will show information such as the email to be sent, how many times the record’s been chased, when the last time was etc. If the record doesn’t need to be chased it will instead show the reasons why (the filters from the view).\nIncluding attachments If you add a file field to the view and a row being chased has a file uploaded to that field, it will be added to the outgoing email as an attachment.\nNote if you add a file field from the view’s parent table to the view and a particular record doesn’t have a file uploaded, the chaser will request the recipient uploads one, when completing the form. In other words it will request a document.\nMultiple attachments Sometimes there may be a set of files you wish to attach to a single email, where the files are all stored in a child table. To accomplish this, join down to the child table and add the file field in that child table to the view.\nThen, when there are multiple child records, each containing a file, those files will all be added to the outgoing email.\nDon’t worry that the view then contains multiple rows per email. The chaser is clever enough to only send one email, but merge in all the files from the multiple rows.\nReceiving a response When a response is received to a chaser, as well as saving the documents / fields the chaser asked for, a comment will be logged to the first comment field in the parent table (if there is a comment field).\nAn email will also be sent to a user notifying them of the response. The logic for who to send that notification to is:\nIf there are any dropdown fields in the table with the option fill with users then send the email to the user selected in that field. If there’s more than one field with that option, use the first one. If there are no fields with ‘fill with users’ selected, fall back to notifying the user who last updated or created the record being chased. Sending thank you emails When someone completes the chaser form and provides the information requested, a thank you page will be shown. If the value of the send thanks calculation in the chaser form is true for a row, then the recipient will be sent a thank you email as well.\nOptional response fields The following fields can optionally be added to the table. If they are found, they will be populated by the chaser system when a chaser response is received.\nchaser response received: if a date field with this name exists, the value will be set to the date and time of the response chaser response needs checking: if a checkbox field with this name exists, it will be ticked when the response is received Errors If an email can’t be sent because of an invalid address in the ‘To’ field, then the address specified in the ‘Escalate To’ field will be notified.\nUsing multiple chasers on the same table [TODO]\n","categories":"","description":"Chasers are dedicated functionality that use email to ask third parties for relevant information","excerpt":"Chasers are dedicated functionality that use email to ask third …","ref":"/docs/workflows/send-chaser/","tags":["Junior Software Architect"],"title":"Send a Chaser email"},{"body":"The record editing form on screen can be programatically controlled to hide or show various elements, like tabs and individual fields. Fields can also be locked for editing and tabs can be coloured.\nThis allows relevant information to be shown/highlighted on screen - what is shown at any one time can change depending on the state of the data in the system. As a brief example, when a sales opportunity is closed, additional fields could appear asking for the outcome details to be recorded.\nIn a similar way to most other view uses in this section, the ID of the record being edited is used to filter the view chosen for the form element. If that ID appears in the view, the element is shown/unlocked etc., if not it isn’t.\nHere are some references for how to accomplish each feature:\nControlling field visibility Locking and unlocking fields Initially expanding or contracting blocks of fields Hiding or showing tabs Colouring tabs ","categories":"","description":"Using a view to control a form - hiding/showing different areas, locking data and expanding/contracting blocks of fields on screen","excerpt":"Using a view to control a form - hiding/showing different areas, …","ref":"/docs/views/special-uses/controlling-form-user-interfaces/","tags":["Junior Software Architect","v6"],"title":"Controlling Form User Interfaces"},{"body":"When a relation field is part of a form, the user can choose a record to link to from a view of items in the related table.\nThat way, a subset of records can be shown relevant to the situation. For example, imagine there is a table of company records, which store customers and suppliers. When selecting a customer for a new invoice record, the user should be able to select only from companies which are customers, so a filtered view can be used.\nSee the view to use relation field option.\n","categories":"","description":"Using a view to choose a record for a relation field","excerpt":"Using a view to choose a record for a relation field","ref":"/docs/views/special-uses/related-record-pickers/","tags":["Junior Software Architect","v6"],"title":"Related Record Chooser"},{"body":"One of the most common methods of pushing data into other systems is to use Zapier, which is a ‘drag and drop’ integration tool that requires no programming (just like Agilebase itself).\nWe will use a worked example: building a system to send a ‘hello’ SMS message whenever a new contact is added to our database. In real life, you may send appointment reminders or other notifications by text. Of course Zapier integrations aren’t limited to sending text messages, there are tons of third party systems you can use, under many different categories, but text messages are a nice simple example to work through.\nFor this example we’ll use\nAgilebase as a source of data Zapier to collect the data and send it to… Twilio to send the text messages Agilebase setup First, some preparatory work in Agilebase. Assuming we already have a contacts database, each person with a name and mobile phone number, there’s just one extra thing we need to do.\nThe system will need to know when a contact has been sent a text, so it can filter them out and prevent them being repeatedly texted. To allow this, we need to add a field, call it intro text sent. Make it a date and time field, accurate to the second.\nWe can set it to ‘show never’, as this information’s unlikely to be useful to the average user.\nNext, we create a view to provide the data to send to the text messaging service. Here’s such a view. It’s very simple, containing just the info necessary, i.e. a message calculation and the mobile phone number to send it to. We’ve put it in a tile called ‘System – Integration’. It’s a good idea to put views used for system purposes somewhere like this so they’ll be hidden from everyday users, but administrators can still easily find them.\nWe’ve added a couple of [filters]((/docs/views/filters/), firstly to make sure we only pick up people who have a phone number entered and secondly to filter out any who’ve already been sent the message (using the Intro Text Sent field we created above). You’ll notice for initial testing only, I’ve added a third filter here so only one contact is listed - myself. When we’ve confirmed the system works as expected, this filter can be removed.\nOne small note to do with this specific example only – Twilio likes to receive phone numbers in international format but without the leading +, i.e. rather than “07891 123456”, use “447891123456”. In real life we’d probably create a calculation field to format them this way, for now we’ll just make sure to enter test numbers like that.\nZapier Setup - receiving data from Agilebase That’s the Agilebase side of things prepared, now to Zapier.\nLog into your Zapier account and press the Make a Zap! button.\nUnder choose app, select Webhooks by Zapier. Webhooks are the way to communicate with Agilebase. At the time of writing you’ll need a paid Zapier account to use them.\nUnder choose trigger event two options will be shown - Retrieve Poll and Catch Hook. In brief, if you select Retrieve Poll, Zapier will regularly poll Agilebase (say every 5 minutes) to check if there’s any new data to retrieve. If you select Catch Hook, communication will instead be started by Agilebase, which will ‘push’ data to Zapier only when there is something new to send.\nHere, we’ll use Catch Hook, which is generally recommended. It’s more efficient and a bit easier to set up, as Agilebase will automatically record the time each record is sent to Zapier. Otherwise, you’ll have to set up additional steps in Zapier to send this information back.\nWhen you press Continue, Zapier will provide you with a custom URL and some additional options which can be left unchanged. Copy this URL and record it in Agilebase: edit the view and open the Use API panel. Paste the Zapier URL into the Push URL space provided:\nSecondly, select the date \u0026 time field ‘Intro Text Sent’ (created above) in the dropdown. That means whenever a record is sent to Zapier, the timestamp will be recorded in that field. All other settings can be left on their defaults.\nFinally, press the Run Workflow Now button to send a test record to Zapier.\nBack in Zapier, just press Test and Continue.\nFinishing Zapier setup Zapier now has our data, at least a test record. The next step is to set up actually sending the text message.\nThere are dozens of Zapier-compatible services that can send text messages. We use Twilio but the process is similar whatever you choose. In fact the process is similar whatever you’re doing with the data, be that sending a text, sending the data to a Google Spreadsheet or Mailchimp, to name just three examples.\nWhen you press Continue, you’ll be asked to sign into Twilio (in this example). Do that as prompted, then you’ll be able to set the options below. The important ones are\nFrom Number: just select, this will automatically show any phone numbers you’ve set up in Twilio To Number: here, click the selector on the right and select the phone number field from Agilebase. By this stage, Zapier, knows which fields are in Agilebase Message: similarly, click the selctor and choose the message field from Agilebase Press Test and Continue. If all goes well, a text message will be sent and you’ll get the option to turn the integration on permanently!\nThen, you can remove the test filters from the view in Agilebase and everything will be live.\nAlthough today we used the example of sending a text message, the process is very similar whichever service you decide to connect to with Zapier - you should be able to follow along the example replacing the SMS-specific steps with your own.\nGood luck and please let us know what cool things you do with your data. Also if anything can be improved in this walkthrough, we’d be very keen to hear about that too.\n","categories":"","description":"A worked example to send Agilebase data to a third party text messaging service using Zapier","excerpt":"A worked example to send Agilebase data to a third party text …","ref":"/docs/integrations/push-example-zapier/","tags":["Software Architect","v6"],"title":"PUSH API worked example - Zapier"},{"body":"Automated bulk document generation Automatically generating PDF documents based on criteria you specify is a powerful feature. For example, if your system tracks exam marks, you may wish to automatically generate a certificate whenever someone passes. Another more common example might be generating invoices for all the work carried out each month.\nSetting up The concept works much like email notifications or syncing events to Google calendar. A view must be set up that contains the records that you want to generate documents for.\nThe first step is to set up and upload a template as per generating PDF documents In the same screen, choose a date field to log the time of each document generation. If no suitable date field exists in the table yet, you can add one by selecting ‘create new field’. Choose a frequency to run the workflow at, e.g. every hour That’s it. Now whenever a record appears in the view, a document will be generated.\nAutomatically emailing documents as attachments Once your system is generating documents automatically, you can set it up to email those out to people as attachments, also automatically without any user input. That’s great if you’re processing a large number of documents, for example invoicing hundreds or thousands of people per invoice run, it could be quite a time saver.\nTo set this up, create an automated notification as normal, to send an email to the intended document recipient. Just make sure that the body ‘template’ contains a reference to the field name of the document that you want to attach the document field must be in the table that the notification view’s based on.\ne.g. your template body could be `Dear {forename},\nMany thanks for your custom with us this month. Your invoice {invoice number} is attached.\nRegards XYZ\n{invoice file} `\nNote – we recommend setting it up to send to someone within your organisation as a test, before switching to the actual recipient.\n","categories":"","description":"Workflows can be used to automatically create a PDF document based on a template","excerpt":"Workflows can be used to automatically create a PDF document based on …","ref":"/docs/workflows/send-document-generator/","tags":["Junior Software Architect"],"title":"Send to Document Generator"},{"body":"Here’s a great example of using an API to provide business benefits, that we use ourselves here at agileChilli. As well as outlining the steps necessary to set up the API, with links to other documentation pages where relevant, we also include other elements of the solution, like workflows and charting, which often form a part of integrations.\nThe scenario is that we want to be able to look up and store multiple years worth of financial data for any UK company we hold in our CRM system. It can be useful to be able to have this data to hand to aid sales, when considering partnering or when doing competitor/market analysis for example - see our CEO’s blog post on the subject.\nFirstly, we need to find a provider of this data who have an API - we use Endole.\nWe need to create a table to store the figures. We created a ‘financial data’ table containing the following fields:\nThe first field is a link to the organisation we’re looking up financial data about.\nThe second is a text field which stores the date that figures are reported for. The reason that it’s a text field is that our service, Endole, uses the format YYYYMM to represent the date, e.g. 202110 for October 2021. Agilebase doesn’t recognise this date format for incoming data via the API but not to worry, we can save it as text, then create a workflow in Agilebase to transform it into an actual date as the data comes in. That’s the next field and we’ll cover the process below. This being a real example, we get to show this type of thing, which would be left out of a more theoretical case.\nThe bulk of the remaining fields are to store the particular figures we’re most interested in and wish to receive from Endole.\nOnce that’s there, we can add the financial data as a tab under the organisation.\nSo now we have the data structure fully set up in Agilebase, but no figures to see. Let’s get on and set up the integration with some API work.\nThis integration will comprise a three step process.\nSend the company number for the organisation we’re interested in to Endole Use that number to look up the financial data for the organisation Finally, send the information back into our financial data table, one record per year Setting up the API calls The integration is relatively easy to set up using Zapier. There’s one Zapier action for each step in the process:\nEach step is created using Zapier’s Webhooks integration - this is a flexible, general purpose integration suitable for communicating with many different companies’ APIs.\nStep 1 is what Zapier calls a ‘catch hook’. It’s a single purpose URL they will generate to allow you to push data to them. Once that step is created, we can create a matching workflow view in Agilebase which contains the company number we wish to query Endole for. We created a simple view with just one field, the company number. We then turned on a PUSH API using the URL Zapier provided. That’s as simple as pasting in the URL into the provided space in the Agilebase view:\nStep 2 in Zapier queries Endole with that company number. Here’s the meat of the process:\nEndole will come back with the figures for that company and in step 3 we can send them to Agilebase as a new ‘financial data’ record attached to the organisation, using a POST API\nNote that the value for the Organisation relation field we mentioned in the start is given as an ID. This is the internal ID of the organisation which the company number belongs to. Zapier can find this as Agilebase includes it in every push or pull API request as the ‘id’ parameter, whether we ask for it or not. It can be really useful for linking data in different tables together, as we’re doing here.\nYou may be thinking that this data looks like it represents one year’s worth of financial data, but we want a full history covering multiple years. How do we get that? In short, we don’t need to worry about it. Endole provides the data to Zapier as an array, one entry for each year. Zapier transparenty handles that, sending one PUSH request to Agilebase per entry.\nNow we have everything we need regarding the integration! We could set the workflow to run in the background, so whenever a new organisation with a company number is entered into the CRM, the integration goes off and finds the financial data. However, because we have many thousands of organistions in our database, we want to be a bit more judicious about our use. Each API request to Endole costs only a small amount, but costs could add up if we were to automatically run it for every organisation, particularly if we include historical records.\nSo in this case, we’ll add a ‘retrieve financials’ workflow button to the organisation screen to kick off the workflow on demand. It looks like this on the screen:\nFinal tweaks Above, we mentioned creating a workflow to transform the YYYYMM date format (stored as text) into a proper date field. To do this we create a [workflow](/docs/workflows/altering-data/ which will update our Date field. It contains a calculation called Date with the definition\nto_date( {1.4) financial data.date representation}, 'YYYYMM' ) The workflow can be set to run whenever a financial details record is created, i.e. as data comes in, using the run workflow on record creation option of a table.\nCharting the data There’s one more thing we can do to add some polish. When opening the financial details tab of the record, we can show a chart of the data for that organisation.\nTo do that, just add a chart to the tab view, with each metric you’re interested in. When the tab’s opened, the chart will automatically be filtered to show just the details for the organisation on screen.\nOnce complete, the screen will look something like this:\n","categories":"","description":"A more complex API example showing a real world integration consisting of multiple steps","excerpt":"A more complex API example showing a real world integration consisting …","ref":"/docs/integrations/complex-example/","tags":["Software Architect","v6"],"title":"Complete API worked example"},{"body":"A spreadsheet export is the simplest way for everyday users to get data out of Agilebase without requiring that an administrator sets up an integration.\nDetails of how to allow this are in the security and compliance section.\n","categories":"","description":"The data in each view can be exported when the requisite privileges are granted","excerpt":"The data in each view can be exported when the requisite privileges …","ref":"/docs/integrations/exporting-to-spreadsheet/","tags":["Junior Software Architect"],"title":"Exporting to spreadsheet"},{"body":"When a comment is added to a record in Agilebase, a copy can be sent to your Slack or Teams workspace, to a specific channel appropriate to the tile. Instructions are in progress, in the meantime please contact us for help setting this up.\nIntegration with other similar services is also possible should a customer wish - please get in touch if so.\n","categories":"","description":"Allows comments posted in Agilebase to be shared as Slack notifications","excerpt":"Allows comments posted in Agilebase to be shared as Slack …","ref":"/docs/integrations/slack-integration/","tags":["Software Architect","v6"],"title":"Slack integration"},{"body":"Agilebase allows data to be imported from CSV (Comma Separated Variable) files. All popular spreadsheet software can save data in this format.\nAnyone with develop privileges on a table can import data into it.\nIn the tiles interface, load any view created from the table to import into. Scroll to the bottom of the rows and press the cloud import icon, then follow through the prompts.\nData can be imported in two ways.\ninsert all new records update existing records Inserting new records will create a new record in the database for every line in the CSV file. Updating existing records will attempt to match each line in the file with an existing record and update all field values from the CSV. This can be useful when merging in data from an external source, or exporting, altering with a third party system and re-importing. Another use can be updating one field based on another - you can export, update the fields as necessary and re-import.\nIn either case, the CSV file must contain fields in the same order as they are in the table being imported into. The column titles don’t need to be the same though, it’s the order which is important. The import screen will show you the column order which is necessary.\nUpdating existing records When updating records, a key field must be selected to match records up. This can be any field that has the unique property set. Alternatively the internal Agilebase rowID can be used. This field is included as the first field in any data export.\nSometimes, admins will want to do an export -\u003e modify spreadsheet -\u003e re-import workflow. This is straightforward:\nExport from the admin interface by clicking the table containing the data you want to modify and clicking the export button in the top toolbar. Open the spreadsheet, making any modifications you need. The first column will be the internal ID for each record, keep this, it will be needed when re-importing. Note it will be hidden - you can un-hide it in the spreadsheet for clarity\nBlank out (remove content from) any columns which you haven’t updated. Otherwise if people have updated them since your export, you will overwrite their changes. Re-import using an ‘update’ type import as above. Select use internal Agilebase row IDs to identify records Notes on special fields For a file field, please leave an empty column in the spreadsheet in that position. If you wish to do a bulk upload of many images or documents, please contact support.\nColumns for separator and referenced data fields should not be included in the import spreadsheet as these field types don’t store data.\nData can be imported into comment fields as per any other field.\n","categories":"","description":"Adding to or updating existing data in a table using a spreadsheet import","excerpt":"Adding to or updating existing data in a table using a spreadsheet …","ref":"/docs/integrations/importing/","tags":["Citizen Developer level 3","v6"],"title":"Importing from spreadsheet"},{"body":"Sometimes when developing an app that integrates with Agilebase, you may want to allow it to query the system to check the login details a user provides. In other words, let a user ’log in’ via your app.\nThe API mechanisms described in this section (push, pull etc.) don’t require a login to use, they work only via the API keys as described, however your app may still wish to test a users login to ensure they are a valid user.\nTo do that, the third party app must act exactly as if it were a web browser allowing the user to log in. In other words it must follow this process:\nVisit https://appserver.gtportalbase.com/Agilebase/AppController.servlet?return=user_details The page will return a login form and a cookie JSESSIONID Post the form i.e. submit values j_username and j_password, along with the cookie If the username and password are correct, a JSON object will be returned in the response, containing the user’s details. If not, an error page will be returned Resources / Examples Java See section Form Login with Cookies of https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_form_based_login.htm\nReact Use the ‘react-cookie’ package: https://www.npmjs.com/package/react-cookies\nPython Use the ‘urllib2’ library: https://stackoverflow.com/questions/301924/python-urllib-urllib2-httplib-confusion'\n","categories":"","description":"Logging in as a user","excerpt":"Logging in as a user","ref":"/docs/integrations/testing-a-login/","tags":["Software Architect","v6"],"title":"Authenticating users via the API"},{"body":"Normally, a user account can only be created by a system administrator - see adding a user.\nHowever there’s one special case in which the organisation runs a multi-tenanted Agilebase account. In that case, you can use an API call to create a new tenant in the account and new user(s) for that tenant.\nFor example, imagine your organisation is a body for football clubs around the country, where each club was a tenant, i.e. each club had users who could log in, but only see data from their own club. In that case, the user creation API could be called to\ncreate a new club create an initial user (or users) for that club Preparation Note: these instructions need updating for the newest release, please contact support if you wish to use this functionality.\nBefore calling the API, you have to configure the system to allow it to be used. In the administrator user interface:\nExpand the Administration menu in the lefthand sidebar Click company Click your company name then the pencil icon in the toolbar to edit the details In Multi-tenanting field name (optional), type in the field name that your system uses to differentiate tenants, e.g. “account name”. See multi-tenanting\nRefresh the page and an API key will appear. We will need this to call the API as below.\nTo disable the API at any point, just delete the value you entered into Multi-tenanting field name (optional)\nCalling the API Use URL https://ab.agilechilli.com/Agilebase/Public.ab. You should make a POST request with encoding application/x-www-form-urlencoded.\nThe Authorization header needs to be set to the API key as above.\nThe following paramaters are required\nc: this identifies your company account and will always be the same. It will be shown in the company editing screen used in preparation, above create_tenant: true json The value of the json parameter is a JSON object, defined below.\nIn the below format, multi-tenanting fieldname is the name of the field used to differentiate tenants with spaces replaced with underscores, e.g. ‘account_name’. The multi-tenanting value is the name of the tenant you wish to create with this particular API call. A multi-tenanting role will be created named ‘cust multi-tenanting value’. E.g. if the value is ‘spurs’, the role will be named ‘cust spurs’. The value should be a lowercase string consisting only of letters from a through to z and numbers.\nThe users property is an array of users. Each user will be created and assigned to the above multi-tenanting role, so they can only see data belonging to them and other users of that role. The user will need a valid email address in order to perform a password reset so they can log in.\nThe customui property refers to the option to apply a custom logo and login screen\nFor each user, the roles parameter is a comma separated list of internal role IDs, or role names. In addition to the multi-tenanting role, they will also be assigned these roles. They could be e.g. ‘manager’, ‘sales rep’ or ‘accounts dept’.\nFor each user, tiles is an array of the tiles the user should see on screen when they log in.\n{ \"[multi-tenanting fieldname]\": \"[multi-tenanting value]\", \"users\": [ { \"username\": \"[username\", \"forename\": \"[forename]\", \"surname\": \"[surname]\", \"email\": \"[email address]\", \"customui\": [true/false], \"roles\": \"[comma separated list of role names]\", \"tiles\": [ { \"tiletype\": \"comment_stream / calendar / data_link / files\", \"colour\": \"blue / yellow / green / purple / pink / turquoise / blue2 / yellow2 / green2 / purple2 / pink2 / turquoise2\", \"internaltilename\": \"[for data_link or files tiles, identifies the tile to add]\" }, { ... } ] } ] } On a successful call, the JSON\n{ \"result\": \"ok\" } will be returned, with a 200 HTTP status code. If there is an error,\n{ \"error\": true, \"type\": \"[class of error]\", \"message\": \"[error message]\" } will be returned and the HTTP status code will reflect the error.\n","categories":"","description":"Creating a user account in a multi-tenanted system with an API request","excerpt":"Creating a user account in a multi-tenanted system with an API request","ref":"/docs/integrations/creating-user-accounts/","tags":["Software Architect","requires update"],"title":"Creating user accounts with the API"},{"body":"Logging If you are using the more advanced features of agilebase workflows then knowing where to look for logging information will become important. At the bottom fo the workflow - edit records panel when editing a view, recent logs are shown.\nThey will contain success and failures of past runs as well as the next time the workflow is scheduled to be run.\n","categories":"","description":"Further information about Agilebase automation features","excerpt":"Further information about Agilebase automation features","ref":"/docs/workflows/advanced/","tags":["Junior Software Architect","v6"],"title":"Advanced information on Workflows"},{"body":"How to chain Workflows To set the next workflow in a chain, simply set the appropriate view in the Chain workflow section of the workflow - edit records panel when editing a view. The next workflow in the chain will run as soon as the previous finishes.\nAuto-connect new records to records created in previous chained workflow steps This option is available when using a workflow that creates new records. Say for example a workflow consists of two steps\nCreate an organisation Create a contact belonging to that organisation (assume there’s a relation field linking contacts to organisations) When ‘auto-connect new records’ is ticked on the workflow for step 2, the contact will automatically be linked to the organisation previously created by setting the relation field appropriately.\nThis mechanism works no matter how many steps there are in a workflow - any records created are remembered and can be used to set values in subsequent steps. So for example\nCreate an organisation Create a site for the organisation, linked to it Create a contact linked to both site and organisation would work too, so long as ‘auto-connect new records’ is ticked for workflow steps 2 and 3.\nWorkflow buttons and chained workflows When a record is kicked off from a manual workflow button, it will only run on the single record the user has open on the screen, i.e. the record that the workflow button is in.\nIf the workflow has further steps chained from it, you’ll most likely want those to only run on that record too.\nFor example, imagine a workflow is made up of two chained steps\ngenerate a document e.g. an invoice send that document to a recipient The workflow view may contain many records which could theoretically have a document generated for them. When the button is pressed to run step 1, it will only run on the single record on screen.\nAgilebase will then pass the ID of that record through to the next workflow step to act as a filter. i.e. ‘send that document to a receipient’ will only send the individual document which has just been created.\nThis mechanism works until any workflow step creates a new record. When that happens, it’s unclear whether subsequent steps should run on the original record or the newly created one, so the ID won’t be passed through to following steps and you’ll have to manage things manually, e.g. using flagging as below.\nThis behaviour can be manually disabled by un-ticking the option Make subsequent workflow steps act on the same record as this one, which will then cause the next chained workflow to always act on all records in its view.\nUsing hidden “flagging” fields It is sometimes necessary to find the source record when chaining workflows.\nA trick to allow you to find the appropriate record is to use and set a flag field in the source table.\nUse an Update Workflow to set the flag to True Other workflows can join to this table and filter by flag=true Finally, remember to set the flag to false as the last step in the chain, so that it is not inadvertently included in the next run. Visualising linked workflows We’ve added one more thing to the system to make working with these multi-step workflows easier. When you click on a workflow step in the admin interface, it will colour all preceding steps (if any) in green, fading to lighter green the further back they go. Similarly all future chained steps are marked in blue, fading to light blue the further forward they are in the chain.\n","categories":"","description":"Chaining Workflows","excerpt":"Chaining Workflows","ref":"/docs/workflows/advanced/chaining-workflows/","tags":["Junior Software Architect"],"title":"Chaining Workflows"},{"body":"Recursion is a rather heavyweight feature of the workflow capabilities of the Agilebase platform.\nIf you’re interested in a bit of maths and want to know what that means, there’s a great tutorial about the concept at the Khan Academy.\nIf not, never mind, the takeaway is it allows an administrator to set up workflows that weren’t possible before, particularly where you have networks of people or things. For example, if your CRM links people who know each other, you could create a list of all people 1 step removed, 2 steps etc.\nMore generally, any calculation with a repetitive step that depends on the results of the previous repetition is recursive. For example, solving sudokus or to some extent crosswords. In fact, we have a sudoku solver as one of our demos.\nWorked example – an ingredients declaration Here’s an example that may be a useful pattern for reference. We have a recipe with quantities of each ingredient. However, an ingredient may itself also be a recipe containing other ingredients. We wish to calculate an ‘ingredients declaration’ which has a list of all ‘raw ingredients’ at the end of the chain i.e. those with no recipe and their percentages in the initial recipe.\nThis can (and has) been done with a some linked workflows including a couple of recursive steps. Here’s the logic (not including technical implementation details).\nStep 1 Firstly, with for our main recipe (let’s call it Tom Yum Soup), look at all the direct ingredients and make a copy list, we’ll call it the exploded ingredients. After this step it will just be exactly the same ingredients as the main list, but later on we’ll recurse and add ingredients of ingredients.\nIn Agilebase parlance, a workflow will copy all the items from an ingredient lines table to an exploded ingredient lines table. Each exploded ingredient line will have\na link to the main recipe, i.e. Tom Yum Soup a link to it’s corresponding ingredient line e.g. 10 grams of chilli paste a link to the ‘parent exploded line’, which will just be empty in this first step Step 2 Go through each of the exploded ingredient lines. For each one, if the ingredient is itself a recipe, add lines for each of it’s ingredients, setting\nmain recipe = the same main recipe as the existing exploded line, i.e. Tom Yum Soup link to parent ingredient line = the line we’re looking at e.g. 10 grams chilli paste link to ingredient line = e.g. 7 grams crushed chillies Now recurse and do step 2 again, for any of the new exploded ingredient lines that are themselves recipes. Repeat 2 as many times as are necessary until there are no new lines which are recipes. This is the key step – after this you’ll have a complete list of raw ingredients.\nTo make Agilebase do that, simply tick the recursive checkbox in the view’s workflow section. It will repeat the step until the view contains no records.\nStep 3 The only thing left is to fill in the percentages. This involves a similar logic – bootstrap by first filling in percentages copied from the direct ingredients of the main recipe, then in a new workflow calculate the percentage of sub-ingredients by multiplying the proportion of the main ingredient by the percentage in the sub-ingredient. So for example if our Tom Yum is 2% chilli paste, which contains 70% crushed chillies, the percentage of crushed chillies in the Tom Yum is 0.02 x 70 = 1.4%.\nWhen implementing, there are a couple of other details to take into consideration, e.g. how to mark each exploded line as ‘processed’ so you don’t keep on re-calculating them. We do that with a counter. You also have to deal with the mechanics of things like what to do if a recipe changes e.g. an ingredient is deleted – another recursive workflow will go through and delete all exploded lines including sub-ingredients.\nIf you’d like to see a full implementation details for this example, please let us know and we can take you through it on our demo system.\nStep 4 Finally, the ingredient declaration to e.g. go on a label can be calculated by joining together the names of all the raw ingredients i.e. the exploded ingredients that aren’t themselves recipes, along with their percentages.\n","categories":"","description":"Recursively Firing Workflows","excerpt":"Recursively Firing Workflows","ref":"/docs/workflows/advanced/recursive-workflows/","tags":["Junior Software Architect"],"title":"Recursive Workflows"},{"body":"This can be set up in the table’s workflow options.\n","categories":"","description":"How to run a workflow every time a new record is created, or optionally, opened","excerpt":"How to run a workflow every time a new record is created, or …","ref":"/docs/workflows/advanced/workflow-on-create/","tags":["Junior Software Architect"],"title":"Running on record creation or load"},{"body":"Some workflows need to be run on an adhoc basis, initiated by a user. In these instances it can be useful to assign the Workflow to run behind a Button.\nN.b. In both cases below it is necessary for the Workflow to marked as Manual.\nWorkflow Buttons on a Form To add the Workflow button to a Table’s form simply create a new field of type Cross Reference with the workflow as the source. When the Workflow is run, it will be filtered by the Id of the record. (You may wish read up about Chaining Workflows ) It is often necessary to put some thought in to the visibility of the button - it can be confusing to the user that a button is present when it does nothing due to filters they cann not know about.\nWorkflow Buttons on Views Some Manual workflows are more appropriately run on a number of records. As such the ability to run them is likely to be associated to a list presented in a view.\nCreate the workflow view Find or create a view we’ll call ‘display view’, which displays an appropriate list of records - most likely this will show contain the same filters as the workflow view, so it shows the same records to the user. In the display view, use the Chain Workflows functionality. Choose the workflow view. When the user opens the display view, a workflow button will appear at the top of the screen. Pressing this will run the workflow.\nOn completion, the user will be shown the number of records that were affected by the workflow run e.g. created or updated, along with an option to see the any log messages, which can be useful to check for errors.\n","categories":"","description":"How to setup a Workflow to fire from a Button","excerpt":"How to setup a Workflow to fire from a Button","ref":"/docs/workflows/advanced/workflow-buttons/","tags":["Junior Software Architect"],"title":"Workflows Buttons"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/architect/","tags":"","title":"Architect"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/citizen-developer/","tags":"","title":"Citizen Developer"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/learner-progression/","tags":"","title":"Learner Progression"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/access-control/","tags":"","title":"Access control"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/charts/","tags":"","title":"charts"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/citizen-developer-level-1/","tags":"","title":"Citizen Developer level 1"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/junior-software-architect/","tags":"","title":"Junior Software Architect"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/personal/","tags":"","title":"personal"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/security/","tags":"","title":"Security"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/views/","tags":"","title":"views"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/calculations/","tags":"","title":"Calculations"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/citizen-developer-level-2/","tags":"","title":"Citizen Developer level 2"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/citizen-developer-level-3/","tags":"","title":"Citizen Developer level 3"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/dropdown/","tags":"","title":"DropDown"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/kanban/","tags":"","title":"Kanban"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/relational-data/","tags":"","title":"Relational Data"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/sales/","tags":"","title":"Sales"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/tabs/","tags":"","title":"tabs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/v6/","tags":"","title":"v6"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/software-architect/","tags":"","title":"Software Architect"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/requires-update/","tags":"","title":"requires update"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/core-user/","tags":"","title":"Core User"},{"body":" Agilebase documentation Learn More Main Website Agilebase is a no-code platform for CRM systems and other back office applications\nAgilebase works across the three phases of an organization's development; startup, scaleup and growth. Why no code? “The burgeoning low-code/no-code market is exploding with innovation, driving unprecedented value for customers while confusing industry analysts.”\nJason Bloomberg, Forbes\nWhat can be built? We’ve customers across a wide range of industries, of very different sizes. However, all of them have built a “back office” that exactly fits their business.\nAgilebase is also proven as a base to build multi-tenanted products, that is single piece of software which many different customers access, where each customer’s data is separated from the others.\nRead more …\nFollow us on Twitter! For announcement of latest features etc.\nRead more …\n","categories":"","description":"","excerpt":" Agilebase documentation Learn More Main Website Agilebase is a …","ref":"/","tags":"","title":"Agilebase documentation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/automations/","tags":"","title":"Automations"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/buttons/","tags":"","title":"buttons"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/cross-references/","tags":"","title":"Cross References"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/email/","tags":"","title":"email"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/pdfs/","tags":"","title":"PDFS"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"}]