<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agilebase docs â€“ Tables</title>
    <link>https://docs.agilebase.co.uk/docs/tables/</link>
    <description>Recent content in Tables on Agilebase docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 24 Apr 2020 16:40:00 +0100</lastBuildDate>
    
	  <atom:link href="https://docs.agilebase.co.uk/docs/tables/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Relational Database Concepts</title>
      <link>https://docs.agilebase.co.uk/docs/tables/relational-database-concepts/</link>
      <pubDate>Fri, 24 Apr 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/relational-database-concepts/</guid>
      <description>
        
        
        &lt;p&gt;Before diving into the details of building applications, starting with tables, let&amp;rsquo;s take a step back and learn some background information about databases, including what a table is. If you&amp;rsquo;re familiar with these concepts, feel free to skip this section.&lt;/p&gt;
&lt;p&gt;When building back office software with Agilebase, a large amount of what we&amp;rsquo;ll be doing is building database structures, to store user-entered data. Agilebase takes care of creating the user interface to allow users to use these structures automatically, e.g. to search for data, add and edit it.&lt;/p&gt;
&lt;p&gt;You will find many articles explaining relational databases if you look for them on the internet. Most will introduce SQL, the language used to work with databases. It&amp;rsquo;s not necessary to learn that as Agilebase generates it automatically behind the scenes, but the higher level concepts are useful to grasp.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a YouTube video with a good introduction.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/NvrpuBAMddw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;If you prefer reading, here are a couple of examples.&lt;/p&gt;
&lt;h2 id=&#34;simple-example---what-is-a-relation&#34;&gt;Simple example - what is a relation?&lt;/h2&gt;
&lt;p&gt;Imagine we want a place to store records of suppliers to our business. This could be the start of a supplier management system to compare companies based on quality, accreditation levels and price for example, or to carry out supplier approval processes.&lt;/p&gt;
&lt;p&gt;To do this we need just one table &amp;lsquo;suppliers&amp;rsquo; which would have fields in such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;company name&lt;/li&gt;
&lt;li&gt;a few address fields&lt;/li&gt;
&lt;li&gt;phone number&lt;/li&gt;
&lt;li&gt;website&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s just like creating a spreadsheet with column headings across the top for those fields. You can then add a row for each supplier you record.&lt;/p&gt;
&lt;p&gt;Now, if we communicate with our suppliers, we may want to store the contact details of a few key people at each supplier.&lt;/p&gt;
&lt;p&gt;Typically, a naive spreadsheet user would add a few more columns (fields in database parlance), things like Contact Name 1, Phone 1, Email 1, Contact Name 2, Phone 2, Email 2. As you can imagine if there are more than one or two contacts, it would become pretty cumbersome and difficult to maintain.&lt;/p&gt;
&lt;p&gt;With our database we can easily do a lot better and create a separate table of contacts that links to the suppliers table - in fact it &lt;strong&gt;relates&lt;/strong&gt; to it. That&amp;rsquo;s why relational databases are so called, just because they&amp;rsquo;re very good at dealing with relations between tables.&lt;/p&gt;
&lt;p&gt;So we have our contact table, maybe with fields&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contact name&lt;/li&gt;
&lt;li&gt;Role&lt;/li&gt;
&lt;li&gt;Direct Line number&lt;/li&gt;
&lt;li&gt;Email address&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;p&gt;To connect them we add another field of a special type, called a &lt;em&gt;relation&lt;/em&gt;. It can be called Company, but rather than storing the company name again (we already have stored the company name in the suppliers table), it will be a link to a particular company. Don&amp;rsquo;t worry about how that works behind the scenes, just know that the Company relation links to a supplier.&lt;/p&gt;
&lt;p&gt;So now we have&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/join.png&#34; alt=&#34;join&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can now add as many contacts as we like to a supplier. And if we decide to store some more data about each contact, maybe a link to their LinkedIn profile for example, we can add that field to the contacts table and it will automatically be there for all contacts (as opposed to our naive spreadsheet example).&lt;/p&gt;
&lt;h2 id=&#34;a-more-complex-example&#34;&gt;A more complex example&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s a good start. Moving on, there&amp;rsquo;s one more type of relation it&amp;rsquo;s useful to understand - the &amp;lsquo;many to many&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Our link between contacts and suppliers above is called a &amp;lsquo;one to many&amp;rsquo; (or sometimes many to one) relationship. The reason is simply that one supplier can have many contacts attached.&lt;/p&gt;
&lt;p&gt;What happens if we think about a more complex case? Suppose our suppliers supply us with raw materials, for example ingredients and packaging. We may want to record which materials each supplier supplies.&lt;/p&gt;
&lt;p&gt;We could set it up as above, where we have a raw materials table. A raw material has a relation field linking it to a supplier, so one supplier can supply many materials.&lt;/p&gt;
&lt;p&gt;However, what happens if a particular raw material is supplied by more than one company? You may have a primary supplier, then various fallbacks for example.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;d have to create a new raw material record for each supplier. That would be ok if our raw material record consisted of nothing more than a name and maybe a price, but there could be dozens or hundreds of fields added as we build up our system - to store nutritional information, chemical properties, allergens, etc. etc. That would mean lots of duplication to keep track of. And if we want to later build recipes which use our raw materials, we&amp;rsquo;d probably just want a recipe to refer to &amp;lsquo;flour&amp;rsquo;, not &amp;lsquo;flour from Supplier X&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;The solution is to create a &lt;strong&gt;many to many&lt;/strong&gt; relation, where one supplier can provide many raw materials but also a single raw material can be linked to many different suppliers.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s no new field type to get to know, we just use the standard one to many relation we&amp;rsquo;ve already learned about in a clever new way - we use two of them, plus a join table. The structure looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/junction-table.png&#34; alt=&#34;junction table&#34;&gt;&lt;/p&gt;
&lt;p&gt;The table in the middle, Links, is called a join table, or junction table.&lt;/p&gt;
&lt;p&gt;It has a normal relation field linking it to suppliers, and also one linking to raw materials. By adding a record to the links table, we can join any raw material to any supplier. A supplier can then have lots of raw materials, but an raw material can also have lots of suppliers.&lt;/p&gt;
&lt;p&gt;The video above also explains this type of relation if you&amp;rsquo;ve not already watched it.&lt;/p&gt;
&lt;h3 id=&#34;when-to-use-the-many-to-many&#34;&gt;When to use the many to many&lt;/h3&gt;
&lt;p&gt;You may have a niggling thought at the back of your mind: how do I know whether it&amp;rsquo;s best to use a simple one to many relation, or a more complex many to many setup? Surely I could use many to many for contacts and suppliers too? A single contact may be associated with more than one supplier, for example if they&amp;rsquo;re a contractor, or if they move jobs.&lt;/p&gt;
&lt;p&gt;The answer to that just comes down to your judgement. Although Agilebase creates a friendly, easy to use interface on top of the data structure, the many to many does add complexity. So it&amp;rsquo;s a bit of a trade-off. However the advantage of a no-code system like Agilebase is that you can rapidly try out ideas and see which one works best. As time goes on you&amp;rsquo;ll get a sense of what works best in which situation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you do want to learn more about this topic, it&amp;rsquo;s called &amp;lsquo;database normalisation&amp;rsquo; and there&amp;rsquo;s plenty written about it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;I hope that gives you a bit of background about what a table is, what a relation is and how they work together.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A table is a store of data about a single concept e.g. a company or contact&lt;/li&gt;
&lt;li&gt;A relation field links tables together e.g. a contact belongs to a company&lt;/li&gt;
&lt;li&gt;Many to many relations (created with a join table) are sometimes useful. They allow us to link many records of one table to many of another.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s pretty much all of the most important information you&amp;rsquo;ll need to know about data structures. The rest of the documentation will show you how to create applications practically. Have fun!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Adding, editing and removing</title>
      <link>https://docs.agilebase.co.uk/docs/tables/adding-and-removing/</link>
      <pubDate>Fri, 24 Apr 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/adding-and-removing/</guid>
      <description>
        
        
        &lt;p&gt;A table is a store of data of a particular type e.g. a company, contact, product or invoice. Tables are the fundamental building blocks of an Agilebase application.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-table&#34;&gt;Adding a table&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;On the homepage, click the &amp;rsquo;toggle&amp;rsquo; button in the top-right of the screen to enable dev mode (if it is not enabled already)&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;+ Table&lt;/em&gt;, choosing a name for the new table&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;TODO: images&lt;/strong&gt;
&lt;img src=&#34;https://docs.agilebase.co.uk/add-table-button.png&#34; alt=&#34;Add Table Button&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can change the table&amp;rsquo;s name and add a longer description under &lt;strong&gt;Help&lt;/strong&gt;. This description will be used as help text in the user interface.&lt;/p&gt;
&lt;h3 id=&#34;naming-tables&#34;&gt;Naming tables&lt;/h3&gt;
&lt;p&gt;When naming a table, it&amp;rsquo;s best to use a plural form. Also avoid filler endings like &amp;lsquo;info&amp;rsquo; or &amp;lsquo;details&amp;rsquo;. So rather than &amp;lsquo;company info&amp;rsquo;, you might call a table &amp;lsquo;companies&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;The reason for this is that the user interface will automatically convert plural names into singular forms where appropriate. So for example if there&amp;rsquo;s a plus button on the screen to allow the user to add a new record in the table, it will automatically recognise the table and title the button Add Company.&lt;/p&gt;
&lt;p&gt;If you build a large system with lots of tables, you may find it a good idea to prefix table names using a numbering/lettering system e.g.
&lt;code&gt;a) table 1&lt;/code&gt;
&lt;code&gt;b) table 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the administrator interface, tables are listed alphabetically, so you can arrange the tables into a logical order with this method.&lt;/p&gt;
&lt;p&gt;The user interface will strip out any prefixes when displaying names to users, if they end with a closing bracket &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;editing-a-table&#34;&gt;Editing a table&lt;/h2&gt;
&lt;p&gt;There are two ways to edit a table: from the homepage, or from editing a record.&lt;/p&gt;
&lt;h3 id=&#34;from-the-homepage&#34;&gt;From the homepage&lt;/h3&gt;
&lt;p&gt;When you toggle development mode with the toggle in the top right corner of the screen, you can see a &lt;em&gt;Map&lt;/em&gt; and &lt;em&gt;List&lt;/em&gt; items: the Map shows tables and relations between them, the List can show tables and also other entities, like views or users.&lt;/p&gt;
&lt;p&gt;From either display, you can click a table to edit it. Once open, you can also pin tables with the pin icon at the top left of the editing panel. The table will then appear &amp;lsquo;pinned&amp;rsquo; to the lefthand side of the development homepage and will remain there until unpinned, or you log out. This can be useful when working with a number of different tables.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/homepage-connections-mode.png&#34; alt=&#34;Connections mode&#34;&gt;
&lt;img src=&#34;https://docs.agilebase.co.uk/homepage-list-mode.png&#34; alt=&#34;List mode&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;from-editing-a-record&#34;&gt;From editing a record&lt;/h3&gt;
&lt;p&gt;When build mode is enabled, if you are viewing an individual record then clicking the big pencil at the top left of the screen lets you edit the underlying table.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/editing-a-record.png&#34; alt=&#34;Editing a record&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;removing-a-table&#34;&gt;Removing a table&lt;/h2&gt;
&lt;p&gt;Before removing a table, you first need to remove all views and &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/#removing-a-field&#34;&gt;fields&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not necessary to remove actual data records from the table first.&lt;/p&gt;
&lt;p&gt;A list of existing views is visible in the &lt;em&gt;name and views&lt;/em&gt; section of the panel sidebar. Visit each view and delete it.&lt;/p&gt;
&lt;p&gt;Then below to the table&amp;rsquo;s &lt;em&gt;name and views&lt;/em&gt; section is the &lt;em&gt;fields&lt;/em&gt; section. Delete all the existing fields from here.&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re done, you can click the &lt;em&gt;Remove table&lt;/em&gt; button in &lt;em&gt;name and views&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When deleting views and fields, you may find you have to first delete other views or fields they depend on. In complex systems there can be chains of objects that need to be deleted in order.&lt;/p&gt;
&lt;p&gt;Deleting is a destructive process so is not highly automated on purpose, to avoid accidental deletion. However at each stage you&amp;rsquo;ll be shown any dependencies which have to be removed first, so you can follow through the chain.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Table layouts</title>
      <link>https://docs.agilebase.co.uk/docs/tables/table-layouts/</link>
      <pubDate>Fri, 24 Apr 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/table-layouts/</guid>
      <description>
        
        
        &lt;p&gt;For each table, Agilebase will automatically build a data entry form for users to view, add and edit records with.&lt;/p&gt;
&lt;p&gt;The layout of this form can be controlled by selecting a layout option and adding separators to create blocks i.e. groups of fields which go together. This will create a more pleasant and usable system.&lt;/p&gt;
&lt;h2 id=&#34;layout&#34;&gt;Layout&lt;/h2&gt;
&lt;p&gt;The layout option is the main control. There are three options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;single column&lt;/strong&gt; - a simple vertical list of fields&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;blocks in two columns&lt;/strong&gt; - makes the best use of screen space for large forms. Also allows tabs
&lt;ul&gt;
&lt;li&gt;All fields before the first separator are displayed in a section at the top of the screen, in two columns&lt;/li&gt;
&lt;li&gt;After that, each separator added creates a new block of fields. Blocks are arranged in two &amp;rsquo;newspaper&amp;rsquo; style columns which are displayed below the top section&lt;/li&gt;
&lt;li&gt;If the table has tabs, they are displayed below the top section&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;process flow&lt;/strong&gt; - blocks of fields are arranged vertically one after each other, works well when there the data entry form maps to a set process&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/tags-and-options.png&#34; alt=&#34;Tags and options&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what the same data entry form looks like in each of the three configurations&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/layout-single.png&#34; alt=&#34;single column layout&#34;&gt; &amp;ldquo;single column&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/layout-two-columns.png&#34; alt=&#34;two column layout&#34;&gt; &amp;ldquo;two columns&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/layout-process.png&#34; alt=&#34;process flow layout&#34;&gt; &amp;ldquo;process flow&amp;rdquo;&lt;/p&gt;
&lt;p&gt;and here&amp;rsquo;s an example of &lt;strong&gt;2. blocks in two columns&lt;/strong&gt; with tabs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/layout-tabs.png&#34; alt=&#34;form with tabs&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;separators&#34;&gt;Separators&lt;/h2&gt;
&lt;p&gt;To form a block, click on the &lt;em&gt;fields&lt;/em&gt; tab of a table and add a field of type &amp;lsquo;separator&amp;rsquo; - see the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-types/special-field-types/separators/&#34;&gt;fields reference&lt;/a&gt;. Move it to where the start of the block should be i.e. before the first field in the block.&lt;/p&gt;
&lt;h2 id=&#34;record-titles&#34;&gt;Record titles&lt;/h2&gt;
&lt;p&gt;In the screenshots above, you can see that each record has a heading, or title. drawn from the data.&lt;/p&gt;
&lt;p&gt;To set one or more fields to include in the title, use the field option &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/text-field-options/#use-as-record-title&#34;&gt;use as record title&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;see-also&#34;&gt;See also&lt;/h2&gt;
&lt;p&gt;When a relation field is near the top of the form, it&amp;rsquo;s also moved to the record title level to become a title link, allowing navigation upwards to the &amp;lsquo;parent&amp;rsquo; record. See &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/&#34;&gt;hierarchy navigation&lt;/a&gt; for info about upwards, and downwards, navigation.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Hierarchy Navigation</title>
      <link>https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/</link>
      <pubDate>Mon, 04 May 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/</guid>
      <description>
        
        
        &lt;p&gt;Agilebase does its best with sensible defaults to create a friendly user interface.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s useful for a software architect to know how to configure and tweak the system to allow the to user navigate the structure of an application in the most intuitive way possible.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Sensitive data</title>
      <link>https://docs.agilebase.co.uk/docs/tables/sensitive-data/</link>
      <pubDate>Fri, 24 Apr 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/sensitive-data/</guid>
      <description>
        
        
        &lt;p&gt;In a table&amp;rsquo;s &lt;em&gt;privacy and security&lt;/em&gt; panel, there are two options which are worth considering if the data is storing commercially sensitive information (plenty of information in most customer systems falls under this category!) or personal information as defined by EU General Data Protection Regulations (GDPR).&lt;/p&gt;
&lt;p&gt;When either option is ticked, two controls appear.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/privacy-and-security.png&#34; alt=&#34;Privacy and security&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;notify-administrators-on-export&#34;&gt;Notify administrators on export&lt;/h2&gt;
&lt;p&gt;Here you can enter a number. When a user exports more than that number of records at once to spreadsheet, all administrators (users with the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/privileges/#assigning-the-administrator-privilege&#34;&gt;administrator&lt;/a&gt; privilege) are notified by email.&lt;/p&gt;
&lt;h2 id=&#34;disallow-exports&#34;&gt;Disallow exports&lt;/h2&gt;
&lt;p&gt;This is also a number, representing a hard limit on the number of records which can be exported from this table at any one time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See also &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/exporting/&#34;&gt;exporting&lt;/a&gt; for how to set up export privileges. Exports are disallowed by default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When &lt;strong&gt;This table contains personal data, sensitive data or data about children&lt;/strong&gt; is ticked, a number of additional data entry boxes appear, to let you record the GDPR-relevant considerations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This is for informational purposes only and doesn&amp;rsquo;t by itself ensure compliance with the GDPR!. We recommend looking at the &lt;a href=&#34;https://ico.org.uk/for-organisations/guide-to-the-general-data-protection-regulation-gdpr/&#34;&gt;ICO website&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;potential-exfiltration-information&#34;&gt;Potential exfiltration information&lt;/h2&gt;
&lt;p&gt;When either option is ticked, some additional information is shown that can highlight opportunities for data to be exported.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any API views which send data to third party systems&lt;/li&gt;
&lt;li&gt;Any roles which are set up to allow exporting and which have users with privileges to see the table data&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Data Integrity Checks</title>
      <link>https://docs.agilebase.co.uk/docs/tables/data-integrity-checks/</link>
      <pubDate>Fri, 24 Apr 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/data-integrity-checks/</guid>
      <description>
        
        
        &lt;p&gt;It can be important to ensure that certain rules are followed when data is entered, either manually by a user, by an incoming &lt;a href=&#34;https://docs.agilebase.co.uk/docs/integrations/&#34;&gt;API request&lt;/a&gt; or someone filling in a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/workflows/send-chaser/&#34;&gt;chaser&lt;/a&gt; response.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When designing applications, just be aware there is sometimes a trade-off between the ideal of data integrity and everyday concerns.&lt;/p&gt;
&lt;p&gt;For example, you may like to force users to always provide an email address for contacts but in a small minority of cases, they may not have that available.&lt;/p&gt;
&lt;p&gt;Agilebase has options for handling soft validation (highlighting errors or notifying someone) as well as the hard validation (disallowing invalid data entry) options discussed here. For example, you could&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/&#34;&gt;Create a view&lt;/a&gt;to show all records with errors, for later checking&lt;/li&gt;
&lt;li&gt;Set up a workflow or chaser to &lt;a href=&#34;https://docs.agilebase.co.uk/docs/workflows/send-chaser/&#34;&gt;chase someone&lt;/a&gt; when errors are found&lt;/li&gt;
&lt;li&gt;Use the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/integrations/&#34;&gt;API&lt;/a&gt; to send a message to your internal messaging system e.g. Slack&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;That said, these are the ways in which you can strictly enforce data integrity.&lt;/p&gt;
&lt;h2 id=&#34;at-an-individual-field-level&#34;&gt;At an individual field level&lt;/h2&gt;
&lt;p&gt;Basic rules can be applied with &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/common-options/&#34;&gt;field options&lt;/a&gt;. For example a field may be set as mandatory, or it must contain unique values (no duplicates).&lt;/p&gt;
&lt;h2 id=&#34;data-integrity-checks-advanced&#34;&gt;Data integrity checks (advanced)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/adding-and-removing/#editing-a-table&#34;&gt;Edit a table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click _Data Integrity Checks&lt;/li&gt;
&lt;li&gt;Click &amp;lsquo;Add Single-Field Check&amp;rsquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here you can add more complex checks, such as the value must be longer or shorter than a certain length, be within a date range or match a &lt;a href=&#34;https://en.wikipedia.org/wiki/Regular_expression&#34;&gt;regular expression&lt;/a&gt;. The list of checks available is the same as that used in &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/filters/&#34;&gt;view filters&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/field-checks.png&#34; alt=&#34;Field checks&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;multi-field-unique-constraints&#34;&gt;Multi-field unique constraints&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/adding-and-removing/#editing-a-table&#34;&gt;Edit a table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click _Data Integrity Checks&lt;/li&gt;
&lt;li&gt;Click &amp;lsquo;Add Multi-Field Unique Check&amp;rsquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sometimes, fields must be unique &lt;strong&gt;in combination&lt;/strong&gt;. For example, imagine you have a system for recording customer complaints. One of the fields might be a customer&amp;rsquo;s reference number, another a relation to the customer record.&lt;/p&gt;
&lt;p&gt;You want to avoid duplicates being entered, so could make the customer reference number unique. However it could be that two different customers could use the same reference number independently, so that wouldn&amp;rsquo;t really work.&lt;/p&gt;
&lt;p&gt;The solution is to add a multi-field unique constraint on customer and customer reference number. That way, a reference number won&amp;rsquo;t be able to be re-used for a complaint from the same customer, but more than one customer is allowed to use the same reference.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Options</title>
      <link>https://docs.agilebase.co.uk/docs/tables/options/</link>
      <pubDate>Fri, 24 Apr 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/options/</guid>
      <description>
        
        
        &lt;p&gt;To access these options, &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/adding-and-removing/#editing-a-table&#34;&gt;edit a table&lt;/a&gt; and select &amp;rsquo;tags and options&#39;.&lt;/p&gt;
&lt;h2 id=&#34;allow-add&#34;&gt;Allow add&lt;/h2&gt;
&lt;p&gt;If this is ticked (it is by default), users can add records to the table. Anyone with develop privileges on the table can add tables regardless.&lt;/p&gt;
&lt;h3 id=&#34;only-from-within-tab&#34;&gt;Only from within tab&lt;/h3&gt;
&lt;p&gt;If this is ticked, users can add records but only when accessing this table&amp;rsquo;s form from within a tab of a parent record. This can help ensure that child records are always connected to a parent and aren&amp;rsquo;t created as &amp;lsquo;orphans&amp;rsquo;.&lt;/p&gt;
&lt;h2 id=&#34;allow-clone-and-merge&#34;&gt;Allow clone and merge&lt;/h2&gt;
&lt;p&gt;(Off by default). Show a clone/merge record button when a user is viewing a record.&lt;/p&gt;
&lt;p&gt;Cloning makes a simple copy of all data in the record. The contents of tabs are not cloned. A more advanced clone facility can be created with a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/workflows/&#34;&gt;workflow&lt;/a&gt; if desired.&lt;/p&gt;
&lt;p&gt;Merging allows the user to select another record to merge with this one. This is commonly use to resolve a situation where there are duplicate records. The contents of one are merged into the other, then the first deleted. A wizard will guide the user through selecting which data to keep from each record. Child records from the deleted record will be re-attached to the one remaining. So for example if Organisation 1 containing two contacts is merged with Organisation 2 containing 3, a single organisation with five contacts will result.&lt;/p&gt;
&lt;h2 id=&#34;allow-remove&#34;&gt;Allow remove&lt;/h2&gt;
&lt;p&gt;(On by default). Allow records to be deleted by people with EDIT privileges as well as people with develop privileges, who can always delete.&lt;/p&gt;
&lt;h2 id=&#34;allow-share&#34;&gt;Allow share&lt;/h2&gt;
&lt;p&gt;Showa button which allows links to individual records to be shared between users using email. Note - recipients still need a login and relevant privileges to see the record.&lt;/p&gt;
&lt;h2 id=&#34;data-entry-from-external-sources&#34;&gt;Data entry from external sources&lt;/h2&gt;
&lt;p&gt;The options in this section are for configuring the table to allow an API request from an external source to create and edit records. See &lt;a href=&#34;https://docs.agilebase.co.uk/docs/integrations/&#34;&gt;API use&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2 id=&#34;other-options&#34;&gt;Other options&lt;/h2&gt;
&lt;h3 id=&#34;records-lockable&#34;&gt;Records lockable&lt;/h3&gt;
&lt;p&gt;Records can be locked to prevent editing. You may like to do this based on criteria e.g. once a customer order has been sent, it should be locked against further changes.&lt;/p&gt;
&lt;p&gt;To actually lock the record, a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/workflows/&#34;&gt;workflow&lt;/a&gt; can be used.&lt;/p&gt;
&lt;p&gt;Locked records can be manually unlocked by someone with develop privileges on the table, but only one at a time.&lt;/p&gt;
&lt;h3 id=&#34;email-notifications&#34;&gt;Email notifications&lt;/h3&gt;
&lt;p&gt;When someone adds a comment to a record, when selecting recipients, they have the option to email those recipients, as well as adding the comment to the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tiles/&#34;&gt;comment stream&lt;/a&gt;. Ticking this table option sets the default to send emails for any comment added to this table. Users can override this on an individual comment basis and recipients can override in their notification preferences.&lt;/p&gt;
&lt;h3 id=&#34;flag-records-with-colour&#34;&gt;Flag records with colour&lt;/h3&gt;
&lt;p&gt;Enter a field name here and add a field with the same name to a view, to flag records. The contents of the field must be one of the colour names as given on the screen. The field added to the view can be a calculation, specifically a hidden calculation. This will flag the view without showing the colour name on screen.&lt;/p&gt;
&lt;p&gt;This option can also be used to colour items in a junction chooser (see tab option: &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/tabs/#choose-a-record-when-a-new-item-is-added&#34;&gt;Choose a record when a new item is added&lt;/a&gt;). In the junction table, set this option, then in the view used as a relation picker (set in the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/relation-field-options/#view-to-use&#34;&gt;relation field options&lt;/a&gt;), add the colour calculation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s also possible to colour individual table fields or calculations in a view (as opposed to this option which flags the whole row). See the options for &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/text-field-options/#colour-words&#34;&gt;field colouring&lt;/a&gt; or &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/calculations/#colouring&#34;&gt;calculation colouring&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;accept-emails-to-this-address&#34;&gt;Accept emails to this address&lt;/h3&gt;
&lt;p&gt;The system can accept incoming emails and attach them to relevant records e.g. attaching an email from a customer to that customer&amp;rsquo;s record.&lt;/p&gt;
&lt;p&gt;A particular email address can be set up to receive emails. The system can be configured to either accept emails from anyone, or just from users. If just from users, then users can forward any emails they receive to the system to have them imported, or BCC the address when sending to people.&lt;/p&gt;
&lt;p&gt;The email text will be logged as a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-types/special-field-types/comment-feeds/&#34;&gt;comment&lt;/a&gt; against the record, with the full email attached if it is HTML formatted or includes attachments. The table must have a comments field.&lt;/p&gt;
&lt;p&gt;Please &lt;a href=&#34;https://agilechilli.com/contact-us/&#34;&gt;contact us&lt;/a&gt; if you&amp;rsquo;d like to set that up.&lt;/p&gt;
&lt;p&gt;Emails are matched by creating a view containing the email addresses of potential recipients. An incoming email is attached to the record from this view which matches the sender&amp;rsquo;s email address. If there is no match, it is added to a &amp;lsquo;holding bay&amp;rsquo; where users can view and manually attach emails to records.&lt;/p&gt;
&lt;h4 id=&#34;configuring-the-email-address-used&#34;&gt;Configuring the email address used&lt;/h4&gt;
&lt;p&gt;An email address of the form &lt;a href=&#34;mailto:viewname@accountname.domainname&#34;&gt;viewname@accountname.domainname&lt;/a&gt; will be set up, e.g. &lt;a href=&#34;mailto:contacts@mycompany.agilebase.co.uk&#34;&gt;contacts@mycompany.agilebase.co.uk&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;viewname&lt;/em&gt; determines the view which Agilebase queries to find the recipient email address. The comment will be added to the matching record in the view&amp;rsquo;s parent table, or a tab of the table, if &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/tabs/#accept-emails-from-parent-table&#34;&gt;Accept emails from parent table&lt;/a&gt; is enabled in a tab. If multiple tabs have this option enabled, then the tab with a name also matching &lt;em&gt;viewname&lt;/em&gt; is used&lt;/li&gt;
&lt;li&gt;&lt;em&gt;accountname&lt;/em&gt; determines the company account to look in&lt;/li&gt;
&lt;li&gt;&lt;em&gt;domainname&lt;/em&gt; is the domain name of the Agilebase server&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;information&#34;&gt;Information&lt;/h2&gt;
&lt;p&gt;After the options, some structural information is shown, such as which tables depend on this one i.e. have a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-types/basic-field-types/#relation&#34;&gt;relation&lt;/a&gt; to it, how many fields and views per tile there are. See also the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/usage-monitoring/usage-reporting/#the-dashboard&#34;&gt;usage dashboard&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Workflow</title>
      <link>https://docs.agilebase.co.uk/docs/tables/workflow/</link>
      <pubDate>Wed, 11 May 2022 12:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/workflow/</guid>
      <description>
        
        
        &lt;p&gt;The workflow panel of a table shows any &lt;a href=&#34;https://docs.agilebase.co.uk/docs/workflows/&#34;&gt;workflows&lt;/a&gt; which act on data in that table. In other words, any workflow that updates records, creates new records in the table, or deletes records from it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/workflow-tab.png&#34; alt=&#34;Workflow tab&#34;&gt;&lt;/p&gt;
&lt;p&gt;Additionally, this panel allows you to choose a workflow to run whenever a new record is created, or (less frequently used) whenever a record is opened.&lt;/p&gt;
&lt;p&gt;That can be very useful for setting initial values for fields, where those values may be more complex calculations than just a static default value.&lt;/p&gt;
&lt;h2 id=&#34;when-a-records-created-run-workflow&#34;&gt;When a record&amp;rsquo;s created, run workflow&lt;/h2&gt;
&lt;p&gt;Run a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/workflows/&#34;&gt;workflow&lt;/a&gt; immediately after the creation of a record. The workflow runs after any field default values have been set.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The workflow &amp;lsquo;knows&amp;rsquo; metadata such as which user is logged in, which tile is open etc., so if you want to &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/calculations/#special-functions&#34;&gt;use those in a calculation&lt;/a&gt; in the workflow, you can do.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that only workflows which have &lt;strong&gt;Frequency = manual&lt;/strong&gt; set can be chosen to be run when a record is created. That&amp;rsquo;s because a single workflow can&amp;rsquo;t be used both to set initial values &lt;em&gt;and&lt;/em&gt; to run every X minutes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;run-this-workflow-whenever-each-record-is-viewed&#34;&gt;Run this workflow whenever each record is viewed&lt;/h3&gt;
&lt;p&gt;As well as running the workflow on record creation, also run it whenever a user views a record in this table. Be aware this may have a performance impact for users, if the workflow is resource intensive and/or multi-step, particularly if records are also viewed frequently.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Roles and Privileges</title>
      <link>https://docs.agilebase.co.uk/docs/tables/users-and-roles/</link>
      <pubDate>Fri, 24 Apr 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/users-and-roles/</guid>
      <description>
        
        
        &lt;p&gt;When editing a table, the &lt;em&gt;Roles and Privileges&lt;/em&gt; panel allows privileges to be assigned to a user or role on a table. Please see the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/privileges/&#34;&gt;privileges&lt;/a&gt; page for more details.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Usage</title>
      <link>https://docs.agilebase.co.uk/docs/tables/usage/</link>
      <pubDate>Fri, 24 Apr 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/usage/</guid>
      <description>
        
        
        &lt;p&gt;This panel shows a list of views that contain data from the table. Any view with data is included, not just those directly created from the table.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/usage-monitoring/usage-reporting/&#34;&gt;usage reporting&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/new-table-usage.png&#34; alt=&#34;table usage&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
