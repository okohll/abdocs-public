<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>agileBase docs â€“ Hierarchy Navigation</title>
    <link>https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/</link>
    <description>Recent content in Hierarchy Navigation on agileBase docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 04 May 2020 16:40:00 +0100</lastBuildDate>
    
	  <atom:link href="https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Tabs</title>
      <link>https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/tabs/</link>
      <pubDate>Mon, 04 May 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/tabs/</guid>
      <description>
        
        
        &lt;p&gt;Tabs are one way of exposing relationships between tables, to allow the user to navigate the structure of an application. For example, in a companies table, a contacts tab may show all the people employed at that particular company.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The user interface can display more than two levels of structure on screen in other ways (e.g. showing a menu in a tab) and wherever the user is, they can navigate up or down the hierarchy of data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;adding-a-tab&#34;&gt;Adding a tab&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Expand the &lt;em&gt;Build Tables&lt;/em&gt; menu in the lefthand sidebar&lt;/li&gt;
&lt;li&gt;Select the table you wish to add a tab to&lt;/li&gt;
&lt;li&gt;Click the pencil icon in the toolbar to edit the table, then select the table&amp;rsquo;s &lt;em&gt;manage&lt;/em&gt; tab&lt;/li&gt;
&lt;li&gt;Scroll down to the bottom of the form&lt;/li&gt;
&lt;li&gt;Under &amp;lsquo;Choose child tabs for the form&amp;rsquo;, select an option in the &lt;em&gt;Add a tab&lt;/em&gt; dropdown&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tab-types&#34;&gt;Tab types&lt;/h2&gt;
&lt;p&gt;There are two types of tab, those which show a &lt;strong&gt;single record&lt;/strong&gt; and those which show &lt;strong&gt;multiple records&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The type used depends on the relation field in the child table used in the tab, which links to the main table. If it is &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/relation-field-options/#one-to-one-only&#34;&gt;one-to-one&lt;/a&gt;, then a single record is shown in the tab. If it&amp;rsquo;s &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/table-layouts/&#34;&gt;one to many&lt;/a&gt;, then a view appears embedded in the tab, with which the user can choose a record to edit.&lt;/p&gt;
&lt;p&gt;A one to one example may be showing a tab of specification information against an ingredient for example.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/tab-one-to-one.png&#34; alt=&#34;one to one tab&#34;&gt;&lt;/p&gt;
&lt;p&gt;A one to many may be a list of suppliers who supply that ingredient.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/tab-one-to-many.png&#34; alt=&#34;one to many tab&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tab-options&#34;&gt;Tab options&lt;/h2&gt;
&lt;p&gt;Typically, these options are only needed to finnesse an application. They can be useful to look at once the core of the structure is built.&lt;/p&gt;
&lt;h3 id=&#34;tab-view&#34;&gt;Tab view&lt;/h3&gt;
&lt;p&gt;For one to many tabs, which &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/&#34;&gt;view&lt;/a&gt; to use to show items. By creating a specific view to use for the tab, you can control which fields are displayed in which order, add calculations, filter those which are shown etc.&lt;/p&gt;
&lt;h3 id=&#34;populate-from-template&#34;&gt;Populate from template&lt;/h3&gt;
&lt;p&gt;Under a tab, a button allows the user to add records. For example in the contacts tab of an organisation, they would be able to add a new contact.&lt;/p&gt;
&lt;p&gt;However, in some situations you want to pre-populate the tab with records, rather than make the user create each one manually. An example might be order lines for a customer order in a telesales system. The order lines could be initially pre-populated with regular items the customer orders.&lt;/p&gt;
&lt;p&gt;One way of doing that is to use the &amp;lsquo;Populate from template&amp;rsquo; view, first creating a new view to use for this purpose. The view must contain the record ID field of the parent table (e.g. customer orders in our example). When the user clicks on the tab, if there are no records present yet, it will prompt to populate the tab. Each row from the view where the record ID matches that of the parent record (cutomer order) will be used to create a record in the tab.&lt;/p&gt;
&lt;p&gt;Any calculations in the view &lt;strong&gt;with the same name&lt;/strong&gt; as a field in the tab table will be used to populate values in the records.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Another way of auto-populating data is to use a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/options/#when-a-records-created-run-this-workflow&#34;&gt;workflow which runs on record creation&lt;/a&gt; or in the background. You can choose whichever method works best for a particular purpose.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;show-only-if-in-view&#34;&gt;Show only if in view&lt;/h3&gt;
&lt;p&gt;This option allows you to control tab visibility - whether the tab is visible on screen or not at any time depends on whether the main record appears in the view chosen. This works exactly the same way as &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/common-options/#show-if-record-in-view&#34;&gt;field visibility&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;colour-from-view&#34;&gt;Colour from view&lt;/h3&gt;
&lt;p&gt;The colour of each tab can be chosen. For example, different steps of a process may each be represented by a tab. Once a step is complete, the tab may be coloured green.&lt;/p&gt;
&lt;p&gt;To set this up, create a view from the main (parent) table. It should contain a text calculation called &amp;lsquo;colour&amp;rsquo; which outputs the name of a colour e.g. green, or a blank value for no colour. The colour names are the same as those for &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/options/#flag-records-with-colour&#34;&gt;record flagging&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;name&#34;&gt;Name&lt;/h3&gt;
&lt;p&gt;By default the tab is named the same as the table used. However, you can override that here.&lt;/p&gt;
&lt;h3 id=&#34;use-inline-editing&#34;&gt;Use inline editing&lt;/h3&gt;
&lt;p&gt;Speed up intensive data entry by allowing each field in the tab view to be edited inline. Here&amp;rsquo;s an example using an order processing system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/tab-inline-edit.png&#34; alt=&#34;tab inline editing&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;show-relation-fields&#34;&gt;Show relation fields&lt;/h3&gt;
&lt;p&gt;If this is un-ticked (which it is by default), any relation fields in the tab table will be hidden. This can be useful if you want to reduce the complexity exposed to the user. They can load all data including relations by navigating to the full record.&lt;/p&gt;
&lt;h3 id=&#34;choose-a-record-when-a-new-item-is-added&#34;&gt;Choose a record when a new item is added&lt;/h3&gt;
&lt;p&gt;Used when a tab shows a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/relational-database-concepts/#a-more-complex-example&#34;&gt;join (also called a junction) table&lt;/a&gt;. To continue the example from that page, when adding a link between supplier and raw materials, if the raw materials table had a tab showing links, this option would cause the user to be immediately prompted for a supplier when adding a link.&lt;/p&gt;
&lt;h3 id=&#34;accept-emails-from-parent-table&#34;&gt;Accept emails from parent table&lt;/h3&gt;
&lt;p&gt;Redirect any incoming emails to the parent table to be stored in this tab. See &lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/options/#accept-emails-to-this-address&#34;&gt;table options&lt;/a&gt; for details of receiving emails.&lt;/p&gt;
&lt;h2 id=&#34;multiple-tabs-for-the-same-table&#34;&gt;Multiple tabs for the same table&lt;/h2&gt;
&lt;p&gt;A final note about tabs. In a small number of cases, one table A may have two relations to the &lt;strong&gt;same&lt;/strong&gt; table B. For example, a record of a contract between two parties may have a relation to the customer and supplier, both of which are records in an organisations table.&lt;/p&gt;
&lt;p&gt;In this case, you may want to add two tabs to the organisations table, one to show contracts for which a particular organisation is a customer, another for which they are a supplier.&lt;/p&gt;
&lt;p&gt;You can do that - just add two tabs for the same table. The system will use the first relation it finds for the first tab, the second for the next.&lt;/p&gt;
&lt;p&gt;Another example is a recursive Bill Of Materials (BOM) system where a join table may link to a parent item and a child item.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: To grandchild records</title>
      <link>https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/to-grandchild-records/</link>
      <pubDate>Mon, 04 May 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/to-grandchild-records/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/tabs/&#34;&gt;Tabs&lt;/a&gt; allow navigation from a parent record to a child, e.g. an organisation to a contact, order to order line, recipe to ingredient etc.&lt;/p&gt;
&lt;p&gt;Of course, that child record may itself have subsidiary records of its own, e.g. a contact may have a tab for their training records.&lt;/p&gt;
&lt;p&gt;When that&amp;rsquo;s the case, agileBase exposes both tiers of data on screen so the user can jump from the top level, in this example the organisation, directly to a contact&amp;rsquo;s training records.&lt;/p&gt;
&lt;p&gt;This type of navigation manifests in different ways according to the setup.&lt;/p&gt;
&lt;p&gt;If a child links to the parent with a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/relation-field-options/#one-to-one-only&#34;&gt;one-to-one relation&lt;/a&gt; then links to &amp;lsquo;grandchildren&amp;rsquo; are displayed by a menu in a tab. Here&amp;rsquo;s a menu showing the various grandchild items under a product&amp;rsquo;s specification.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/tab-menu.png&#34; alt=&#34;tab menu&#34;&gt;&lt;/p&gt;
&lt;p&gt;If it&amp;rsquo;s a many-to-one, then grandchildren are represented by blocks at the end of the record.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/grandchild-blocks.png&#34; alt=&#34;grandchild blocks&#34;&gt;&lt;/p&gt;
&lt;p&gt;Finally, in the special case when a grandchild tab&amp;rsquo;s tab view contains the ID of both its immediate parent and the parent above that, then the grandchild contents are shown directly, underneath the child record. Here&amp;rsquo;s an example where there&amp;rsquo;s a three tier structure of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;supplier approval -&amp;gt; risk assessment -&amp;gt; risk assessment scores.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When the user looks at a supplier approval record, the risk assessment summary and scores can both be seen at the same time.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Upwards Navigation</title>
      <link>https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/upwards-navigation/</link>
      <pubDate>Mon, 04 May 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/tables/hierarchy-navigation/upwards-navigation/</guid>
      <description>
        
        
        &lt;p&gt;Whenever a relation field is used in a table, the user has the option to navigate to the related record by clicking a link next to the relation.&lt;/p&gt;
&lt;p&gt;However its useful to know that if the relation is one of the &lt;strong&gt;first fields&lt;/strong&gt; in the table, i.e. at the top of the form, then it will be treated as having greater importance by the user interface. In this case, the relation will appear as a relation heading, making it clear the &amp;lsquo;parent-child&amp;rsquo; relationship i.e. that one record &amp;lsquo;belongs&amp;rsquo; to another.&lt;/p&gt;
&lt;p&gt;For example, in a contacts table, if the relation to a contact&amp;rsquo;s organisation is one of the first fields in the form, the organisation name will appear as a heading for the contact record. It will be a hyperlink so can be used to navigate to the parent organisation easily.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A record can have multiple &amp;lsquo;parents&amp;rsquo; of different types, e.g. a contact may belong to both an organisation and a site or department within that organisation.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
  </channel>
</rss>
