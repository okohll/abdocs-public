<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>agileBase docs – Integrations</title>
    <link>https://docs.agilebase.co.uk/docs/integrations/</link>
    <description>Recent content in Integrations on agileBase docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 24 Apr 2020 16:40:00 +0100</lastBuildDate>
    
	  <atom:link href="https://docs.agilebase.co.uk/docs/integrations/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Setting up the Calendar API</title>
      <link>https://docs.agilebase.co.uk/docs/integrations/calendar/</link>
      <pubDate>Fri, 24 Apr 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/integrations/calendar/</guid>
      <description>
        
        
        &lt;p&gt;If a view contains a date field, the data in it can by synchronised with an external calendar application, e.g. Google Calendar, Microsoft Office 365, Apple calendars etc.&lt;/p&gt;
&lt;p&gt;If it contains two date fields, the first will be used for the start date/time, the second for the finish.&lt;/p&gt;
&lt;p&gt;Once set up, the link will be maintained and the calendar will update whenever the data in agileBase is updated, or vice versa. The synchonisation can be set up to be two-way (to and from agileBase), or just one way (either two or from agileBase)&lt;/p&gt;
&lt;h2 id=&#34;pre-requisites&#34;&gt;Pre-requisites&lt;/h2&gt;
&lt;p&gt;agileBase uses &lt;a href=&#34;https://oauth.net/&#34;&gt;OAuth&lt;/a&gt;, an industry standard protocol, to synchronize with your calendar system of choice.&lt;/p&gt;
&lt;p&gt;Under this protocol, each person will need to individually grant agileBase permission to send data to, and view events in their calendar. This is a straightforward process: as a user,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click on your user icon at the top right of the screen&lt;/li&gt;
&lt;li&gt;Select &lt;em&gt;edit profile&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click the &lt;em&gt;connect calendar&lt;/em&gt; link&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will see a calendar selector screen like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/cronofy.png&#34; alt=&#34;Cronofy&#34;&gt;&lt;/p&gt;
&lt;p&gt;Choose the calendar system you use and follow through the prompt to allow access.&lt;/p&gt;
&lt;h2 id=&#34;incoming-data&#34;&gt;Incoming data&lt;/h2&gt;
&lt;p&gt;Once users have connected their calendars, data can be received into agileBase whenever an event is created, edited or deleted in the external calendar. We need to set up two new tables so the system can receive these events. One is a table for the event data itself, the other stores the list of calendars in the user&amp;rsquo;s account. One calendar account may contain multiple calendars, e.g. a user may have separate calendars set up for bookings, sales visits, holidays etc. - typically they display in different colours on the screen.&lt;/p&gt;
&lt;p&gt;The main reason for recording the calendar list is so that the correct calendar can be chosen to send events to, when we come to send events from agileBase (see below).&lt;/p&gt;
&lt;p&gt;To set up these tables, follow this process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a table called &lt;code&gt;ab calendar intray&lt;/code&gt;. It can have a prefix if you like, e.g. &lt;code&gt;z) ab calendar intray&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the following &lt;strong&gt;text&lt;/strong&gt; fields: &lt;code&gt;person&lt;/code&gt;, &lt;code&gt;calendar id&lt;/code&gt;, &lt;code&gt;calendar name&lt;/code&gt;, &lt;code&gt;event id&lt;/code&gt;, &lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;participation status&lt;/code&gt;, &lt;code&gt;event status&lt;/code&gt;, &lt;code&gt;categories&lt;/code&gt;, &lt;code&gt;attendees&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the following &lt;strong&gt;date&lt;/strong&gt; fields: &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;, &lt;code&gt;created&lt;/code&gt; (accurate to the second), &lt;code&gt;updated&lt;/code&gt; (accurate to the second)&lt;/li&gt;
&lt;li&gt;Add a &lt;strong&gt;checkbox&lt;/strong&gt; field, &lt;code&gt;deleted&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;and for the calendar mapping table:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a table called &lt;code&gt;ab calendar mapping&lt;/code&gt;. Again, you can prefix it, e.g. &lt;code&gt;z) ab calendar mapping&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;strong&gt;text&lt;/strong&gt; fields: &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;calendar id&lt;/code&gt;, &lt;code&gt;owner&lt;/code&gt;, &lt;code&gt;calendar name&lt;/code&gt;, &lt;code&gt;provider&lt;/code&gt;, &lt;code&gt;profile id&lt;/code&gt;, &lt;code&gt;profile name&lt;/code&gt;, &lt;code&gt;permission level&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add two &lt;strong&gt;checkbox&lt;/strong&gt; fields called: &lt;code&gt;read only&lt;/code&gt;, &lt;code&gt;primary&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The easiest way to understand the meaning of all the fields is simply to connect your calendar as above, create these tables and add some events to your third party calendar - create new events, update them and delete them, watching the data flow into the tables. New data will usually take no more than a few seconds to appear.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Different third party calendar systems may use some fields in slighlty different ways. For example, at the time of writing, Google Calendar does not support the &lt;code&gt;categories&lt;/code&gt; field but some other calendar systems do use this to show tags you may have added to your events.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once you have data successfully flowing into the system, a common next step is to move the incoming events into tables which make sense for your particular business needs. For example, if you have a team of salespeople, you may move incoming bookings into a &amp;lsquo;leads&amp;rsquo; table. What you do with the data will depend on your particular circumstances.&lt;/p&gt;
&lt;p&gt;You can use &lt;a href=&#34;https://docs.agilebase.co.uk/docs/workflows/&#34;&gt;automated worflows&lt;/a&gt; to copy data from one table to another if necessary.&lt;/p&gt;
&lt;p&gt;However, you could also simply create views from the &amp;lsquo;ab calendar intray&amp;rsquo; table to allow users to view these events directly. Adding a filter to the user on the &amp;lsquo;person&amp;rsquo; field will ensure a user will only see their own events -see [users - restrict data access]({{relref &amp;ldquo;/docs/security-and-compliance/security-features/users#restrict-data-access&amp;rdquo;}})&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please be aware of potential data privacy concerns when setting up calendar synchronisation. All events a user creates or modifies in any of the calendars in their connected account will send to agileBase. As an administrator, you may wish to set up specific work calendar accounts for your users, distinct from any personal accounts they may use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;outgoing-data&#34;&gt;Outgoing data&lt;/h2&gt;
&lt;p&gt;As well as receiving data in, you can send either new or modified events from agileBase to users&amp;rsquo; connected calendars.&lt;/p&gt;
&lt;p&gt;New events are those created in agileBase, modified events are those created externally which have come into the system via the incoming data method above, but which have then been updated in agileBase.&lt;/p&gt;
&lt;p&gt;To set this up&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/&#34;&gt;Create a view&lt;/a&gt; to show the events to send to the calendar.&lt;/li&gt;
&lt;li&gt;Add any relevant &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/filters/&#34;&gt;filters&lt;/a&gt; to the view, so it only shows events which need to be sent, not &lt;strong&gt;all&lt;/strong&gt; events.&lt;/li&gt;
&lt;li&gt;In the view&amp;rsquo;s &lt;em&gt;manage&lt;/em&gt; tab, show the &lt;em&gt;Send&lt;/em&gt; panel. Select &lt;em&gt;send data to an external calendar&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Tick &lt;em&gt;Send events to calendar&lt;/em&gt; to activate the view and add the fields shown. These are
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;text fields&lt;/strong&gt;: &lt;code&gt;calendar id&lt;/code&gt;, &lt;code&gt;event id&lt;/code&gt;, &lt;code&gt;calendar owner&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;attendees&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;whole number field&lt;/strong&gt;: &lt;code&gt;reminder minutes&lt;/code&gt; - a number of minutes before the event when the calendar should alert you&lt;/li&gt;
&lt;li&gt;two &lt;strong&gt;date fields&lt;/strong&gt;: the first date/time field in the view will be used as the event&amp;rsquo;s start date/time, the next the end date/time (if applicable)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some of these fields deserve additional explanations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;calendar id&lt;/strong&gt;: identifies the particular calendar within the user&amp;rsquo;s connected account to send events to. This is the same calendar ID used in the &amp;lsquo;ab calendar mapping&amp;rsquo; table above, so can be looked up from there, perhaps by joining to the table.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;event id&lt;/strong&gt;: if you&amp;rsquo;re creating a new event, leave this blank. If the event was created externally, or you&amp;rsquo;re updating an existing event, use the event ID as listed in the &amp;lsquo;ab calendar intray&amp;rsquo; record for it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;calendar owner&lt;/strong&gt;: the ID of the agileBase user - this will be used to determine the person who&amp;rsquo;se linked calendar the event should be sent to. The standard agileBase format is used &amp;lsquo;Forename Surname (username)&amp;rsquo;, so you can use the automatic field &amp;lsquo;Created By [auto]&amp;rsquo; if you like.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;attendees&lt;/strong&gt;: a comma separated list of email addresses of people who should be invited&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Creating a POST API</title>
      <link>https://docs.agilebase.co.uk/docs/integrations/setting-up-the-post-api/</link>
      <pubDate>Fri, 24 Apr 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/integrations/setting-up-the-post-api/</guid>
      <description>
        
        
        &lt;p&gt;Firstly, identify the table into which you wish to recieve incoming data. Go to that table&amp;rsquo;s manage taband press &amp;lsquo;options’. Tick &amp;lsquo;Public form or API data entry’, which will create an API for the table.&lt;/p&gt;
&lt;p&gt;To protect the system from spam input, we also suggest you tick &amp;lsquo;Require API key’ and reload the table to show the API key generated. This then has to be submitted with every POST request as the value of the HTTP Authorization header.&lt;/p&gt;
&lt;p&gt;Optionally, you can add an email address to notify when a new item is added and an autoresponse text which will be sent to any email addresses found in the posted data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/incoming-data-api.png&#34; alt=&#34;Configuring the POST API&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;creating-new-records&#34;&gt;Creating new records&lt;/h2&gt;
&lt;p&gt;Clicking the ‘sample form’ link will then show a sample form which can be used for testing or to copy code from.&lt;/p&gt;
&lt;p&gt;If you want to submit data directly from an app rather than a web form, simply prepare a HTTP POST request that mimics the form. Again, use the source code of the form as a reference. Note the form contains three hidden fields that need to be included. They are listed at the start of the sample form, for reference they are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;save_new_record=true&lt;/li&gt;
&lt;li&gt;c=[internalcompanyid]&lt;/li&gt;
&lt;li&gt;t=[internaltableid]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The post URL is&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://appserver.gtportalbase.com/agileBase/Public.ab&#34;&gt;https://appserver.gtportalbase.com/agileBase/Public.ab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The form needs to be posted using the method POST.&lt;/p&gt;
&lt;p&gt;Remember also to set the &amp;lsquo;Authorization&amp;rsquo; HTTP header if that option has been selected.&lt;/p&gt;
&lt;p&gt;To specify the contents of each field to be saved, add parameters for the internal field names of each field you want to send data to. The internal field names necessary will be shown on screen when API use is enabled.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The API can be tested using a tool such as &lt;a href=&#34;https://www.postman.com&#34;&gt;Postman&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;updating-existing-records&#34;&gt;Updating existing records&lt;/h2&gt;
&lt;p&gt;The process is similar, but instead of &lt;em&gt;save_new_record=true&lt;/em&gt;, supply&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;update_record=true&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;row_id=[internal id of the record]&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The internal record ID can be got from a JSON feed or by using the &lt;em&gt;return=posted_json&lt;/em&gt; as above if editing a record previously created using the API.&lt;/p&gt;
&lt;h2 id=&#34;posting-files&#34;&gt;Posting files&lt;/h2&gt;
&lt;p&gt;As well as &amp;lsquo;standard&amp;rsquo; data, agileBase can accept documents posted into a &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-types/special-field-types/file/&#34;&gt;file field&lt;/a&gt;. This can be done in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure the form is posted with encoding type &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&#34;&gt;multipart/form-data&lt;/a&gt;. Then simply post the contents of the file with the form parameter specifying the internal name of the file field.&lt;/li&gt;
&lt;li&gt;Post the form normally (not as multipart/form-data), and provide a URL value for the file field. That URL will be downloaded by agileBase and the contents saved as a file.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;This method is &lt;a href=&#34;https://www.zapier.com&#34;&gt;Zapier&lt;/a&gt;-compatible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;response&#34;&gt;Response&lt;/h2&gt;
&lt;p&gt;The response to the successful request will be a JSON representation of the complete record created or updated, after the update has taken place. An object of key-value pairs is returned, the key being the internal field name.&lt;/p&gt;
&lt;p&gt;The row ID is returned with the key &lt;code&gt;rowId&lt;/code&gt; - this is often useful to identify a record when performing multiple actions. For example, when a new record is created, the calling system may want to store its row ID in order to be able to make future updates to the same record.&lt;/p&gt;
&lt;p&gt;If there is an error, an appropriate HTTP response code is returned (see below) along with JSON explaining the error, containing three keys. For example if an incorrect Authorization header is supplied, the response may be&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;error&amp;quot;: true,
  &amp;quot;type&amp;quot;: &amp;quot;DisallowedException&amp;quot;,
  &amp;quot;message&amp;quot;: &amp;quot;User public api is not allowed to edit delete data in table my table. An administrator can set up privileges so this can be allowed&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;http-response-codes&#34;&gt;HTTP response codes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;200: success&lt;/li&gt;
&lt;li&gt;401: unauthorised: the API key is missing or invalid&lt;/li&gt;
&lt;li&gt;404: not found: an object identified in the request was not found e.g. no match was found for a table ID specified with the &amp;rsquo;t&amp;rsquo; parameter&lt;/li&gt;
&lt;li&gt;429: too many requests: the frequency of requests is too high, please throttle them back&lt;/li&gt;
&lt;li&gt;507: insufficient storage: when creating a record, the limit on number of records which can be stored has been reached. Contact us to purchase additional capacity.&lt;/li&gt;
&lt;li&gt;500: some other server error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When there is an error, a response header X-AB-error is also set with the type and content of the error message.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Creating a PUSH API</title>
      <link>https://docs.agilebase.co.uk/docs/integrations/setting-up-the-push-api/</link>
      <pubDate>Mon, 01 Jun 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/integrations/setting-up-the-push-api/</guid>
      <description>
        
        
        &lt;ol&gt;
&lt;li&gt;Firstly, set up a view to operate as a standard ‘pull’ API&lt;/li&gt;
&lt;li&gt;Enter a URL into the &lt;em&gt;Push URL (optional)&lt;/em&gt; area below the other details on that screen. This is the URL that agileBase will POST to when there’s new data.&lt;/li&gt;
&lt;li&gt;In the table that the API view was created from, add a new date/time field, accurate to the second, for the system to record when the API push was last used&lt;/li&gt;
&lt;li&gt;Go to the ‘workflow’ section under the view’s ‘manage’ tab.
for ‘workflow action’, select ‘send data to a third party system using the API’
for ‘recording the time of the last action’, choose the date/time field created above
choose a minimum interval to wait between pushes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The system will now make a POST to the URL specified in step 2 whenever there’s new data to send. It will contain one parameter, ‘json’, which is a JSON representation of all the data in the view.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/workflow-push.png&#34; alt=&#34;Configuring the PUSH API&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;selecting-data-to-push&#34;&gt;Selecting data to push&lt;/h3&gt;
&lt;p&gt;How do we know which data is new and wants to be sent out via the API?&lt;/p&gt;
&lt;p&gt;That’s up to you - any filters can be added to the view to select data you want. Commonly, you’d use the date/time field set up in step 3. When a push successfully completes, every record in the view has this field set to the current time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: if the push encounters an error for any reason, say the third party system returns a HTTP error code rather than the expected ‘200’ code for success, the timestamp won’t be set.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A few common scenarios would be:&lt;/p&gt;
&lt;h4 id=&#34;pushing-any-data-modified-since-it-was-last-pushed&#34;&gt;Pushing any data modified since it was last pushed&lt;/h4&gt;
&lt;p&gt;To do this, add a boolean calculation to your view, something like&lt;/p&gt;
&lt;p&gt;needs pushing = &lt;code&gt;{last modified [auto]} &amp;gt; {last pushed}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where ‘last pushed’ is the name of the timestamp field you added in step 3 above.&lt;/p&gt;
&lt;p&gt;Then add a filter on the view ‘needs pushing equals true’.&lt;/p&gt;
&lt;h4 id=&#34;pushing-any-new-rows-that-have-never-been-pushed-before&#34;&gt;Pushing any new rows that have never been pushed before&lt;/h4&gt;
&lt;p&gt;For this scenario, simply add a filter to the view ‘last pushed is empty’.&lt;/p&gt;
&lt;h4 id=&#34;pushing-only-rows-not-yet-marked-as-received&#34;&gt;Pushing only rows not yet marked as received&lt;/h4&gt;
&lt;p&gt;In some cases, you may want to be even more prudent than using the internal timestamp. The third party system could make a separate API call to agileBase for every row that’s received, telling it to update the row with an ID to prove receipt. That’s more API calls of course, but some situations may warrant it.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Creating a PULL API</title>
      <link>https://docs.agilebase.co.uk/docs/integrations/setting-up-the-pull-api/</link>
      <pubDate>Fri, 29 May 2020 12:35:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/integrations/setting-up-the-pull-api/</guid>
      <description>
        
        
        &lt;p&gt;Connections to agileBase are made using standard HTTP calls. This makes it easy for developers in any language, so PHP, Java, even JavaScript in a browser can be used.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The first step is to create a view in agileBase that contains the data you want to make available to other apps. You can use the standard view creation features of the administrator interface, including adding fields and calculations, sorts and filters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secondly, turn on the ability for the view to be accessed via a PULL API by going to the &lt;em&gt;manage&lt;/em&gt; tab,and within the &lt;em&gt;send&lt;/em&gt; section choosing &lt;em&gt;Send data to a third party system using the API&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally Tick the &lt;em&gt;Allow access from third party software using an API key&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The remainder of this article explains how to PULL the data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/workflow-pull.png&#34; alt=&#34;Configuring the PULL API&#34;&gt;&lt;/p&gt;
&lt;p&gt;The most important piece of information is the URL that the third party will access your data via. This will be:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://appserver.gtportalbase.com/agileBase/Public.ab&#34;&gt;https://appserver.gtportalbase.com/agileBase/Public.ab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you host on your own cloud or on premises, this may be different.&lt;/p&gt;
&lt;p&gt;Requests can contain a number of parameters, the one which must be supplied to use the JSON API is &lt;em&gt;get_report_json=true&lt;/em&gt;
Other parameters to control various options are detailed below.&lt;/p&gt;
&lt;p&gt;HTTP requests can be submitted as GET or POST.&lt;/p&gt;
&lt;p&gt;Three parameters for the view also need to be submitted as parameters to the request. These are ‘c’, ‘t’ and ‘r’, the values are displayed in the administrator interface (see screenshot above). Together, these identify the view from which to extract data.&lt;/p&gt;
&lt;p&gt;Finally, the API key provided needs to be submitted not as a HTTP request parameter, but as a header named ‘Authorization’. This is to reduce the change of it being cached or used in a browser string where it can be easily retained and read by unauthorised users.&lt;/p&gt;
&lt;p&gt;Here’s a complete example of making a request, using PHP in WordPress&lt;/p&gt;
&lt;p&gt;[php]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$url = &#39;http://appserver.gtportalbase.com/agileBase/Public.ab?get_report_json=true&amp;amp;simple_format=true&amp;amp;t=mytablecode&amp;amp;r=myreportcode&amp;amp;c=mycompanycode&amp;amp;json_format=json&#39;;

$args = array(&#39;headers&#39; =&amp;gt; array( &#39;Authorization&#39; =&amp;gt; &#39;myauthorisationkey&#39;));

$response = wp_remote_get( $url, $args );

var_dump($response);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[/php]&lt;/p&gt;
&lt;p&gt;Sample output would look like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
  {
    forename: &amp;quot;Oliver&amp;quot;,
    surname: &amp;quot;Kohll&amp;quot;,
    email_address: &amp;quot;oliver@agilebase.co.uk&amp;quot;
  },
  {
    forename: &amp;quot;Simon&amp;quot;,
    surname: &amp;quot;Minton&amp;quot;,
    email_address: &amp;quot;simon@agilebase.co.uk&amp;quot;
  },
  {
    forename: &amp;quot;Cliff&amp;quot;,
    surname: &amp;quot;Calcutt&amp;quot;,
    email_address: &amp;quot;cliff@agilebase.co.uk&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;of course the fields being those returned for the particular view chosen.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;request-options&#34;&gt;Request options&lt;/h3&gt;
&lt;p&gt;Here are the options that can be provided as parameters to the request, along with the c, t and r identifiers and in addition to get_report_json=true.&lt;/p&gt;
&lt;h4 id=&#34;simple_formattruefalse-default-false&#34;&gt;simple_format=true/false (default false)&lt;/h4&gt;
&lt;p&gt;This option controls the JSON format returned. With simple_format=true, the response will be a simple array of objects, each containing keys for the field namesm as above. Keys are basically lowercase field names with spaces replaced by underscores, so “Email address” would become “email_address”
With simple_format=false, a more complex but more robust format it used. Rather than field names, internal agileBase field identifiers are used as keys. This has the advantage that if the field names are changed (easy for an agileBase administrator to do), the JSON will remain the same. The first object in the JSON will be a dictionary mapping internal identifier to field name.&lt;/p&gt;
&lt;h4 id=&#34;json_formatjson&#34;&gt;json_format=json&lt;/h4&gt;
&lt;p&gt;With this option, just the JSON will be returned. This is the usual case required. Without it, complete Javascript will be returned defining the JSON as an object, i.e. &lt;code&gt;var abJson=[…]&lt;/code&gt; which can be useful if you want to run the result as Javascript.&lt;/p&gt;
&lt;h4 id=&#34;returnposted_json&#34;&gt;return=posted_json&lt;/h4&gt;
&lt;p&gt;Optional, if this is included, the return content will be JSON including the ID of the record as well as the full content of the data.&lt;/p&gt;
&lt;h4 id=&#34;cache_secondsseconds&#34;&gt;cache_seconds=[seconds]&lt;/h4&gt;
&lt;p&gt;How long to cache the results for (default 600 seconds or 10 minutes). Only un-filtered results are cached.&lt;/p&gt;
&lt;h4 id=&#34;unencode_htmltrue&#34;&gt;unencode_html=true&lt;/h4&gt;
&lt;p&gt;Causes characters which would normally be encoded as HTML entities (e.g. &lt;code&gt;&amp;amp;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;amp;amp;&lt;/code&gt;) to be returned unencoded&lt;/p&gt;
&lt;h4 id=&#34;exact_filterstruefalse-default-false&#34;&gt;exact_filters=true/false (default false)&lt;/h4&gt;
&lt;p&gt;If true, filters (see below) will be need to match results exactly instead of using the default &amp;lsquo;contains&amp;rsquo; filtering&lt;/p&gt;
&lt;h4 id=&#34;row_limitrow-limit&#34;&gt;row_limit=[row limit]&lt;/h4&gt;
&lt;p&gt;The default limit on the number of records to ruturn is 10,000. Add this parameter to change this. Note the hard maximum allowed is 100,000.&lt;/p&gt;
&lt;h3 id=&#34;filtering&#34;&gt;Filtering&lt;/h3&gt;
&lt;p&gt;By specifying exact_filters=true, filters can be supplied to search for a particular record or set of records. For HTTP parameter names, just use the internal agileBase field identifiers. The easiest way of finding these is to right click on a field in the administrator interface using a browser like Chrome, Safari or Firefox and select ‘inspect element’.&lt;/p&gt;
&lt;p&gt;Standard agileBase quick filters can be used for preparing complex criteria on multiple fields, for example in each field using “?” to find blank records, &amp;gt; and &amp;lt; for numbers and date ranges, phrases like “last month” for dates, “=[word]” for exact matches, “:word” for starts with, and “!word” for doesn’t contain.&lt;/p&gt;
&lt;h3 id=&#34;response-codes&#34;&gt;Response codes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;200: request successful&lt;/li&gt;
&lt;li&gt;401: unauthorised: the API key is missing or incorrect&lt;/li&gt;
&lt;li&gt;404: not found: an object identifier (company ID, table ID or report ID) was supplied that wasn’t found in the system&lt;/li&gt;
&lt;li&gt;429: too many requests: the frequency of requests is too high, please throttle them back&lt;/li&gt;
&lt;li&gt;500: some other server error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When there is an error, the X-AB-error header will be set and JSON returned representing the error, as happens with the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/integrations/setting-up-the-post-api/#response&#34;&gt;POST API&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;generate-api-descriptions&#34;&gt;Generate API descriptions&lt;/h3&gt;
&lt;p&gt;For developers who use the agileBase API to create and update data within agileBase from a third party product, there’s now a way to further automate the process.&lt;/p&gt;
&lt;p&gt;agileBase will now generate a &lt;a href=&#34;https://swagger.io/&#34;&gt;swagger.io&lt;/a&gt; compatible API description of any table you want to post to. That means if you deal with accounts for many agileBase customers, you can with a common query get the API details needed to interact with them.&lt;/p&gt;
&lt;p&gt;Just make a POST request to&lt;/p&gt;
&lt;p&gt;/agileBase/Public.ab with parameters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c = the company identifier (the table options screen will show this)&lt;/li&gt;
&lt;li&gt;t = the table identifier (similarly shown by the options screen)&lt;/li&gt;
&lt;li&gt;describe_table = true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and the ‘Authorization’ header set to the API key (if the table requires one).&lt;/p&gt;
&lt;p&gt;This also makes testing with &lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt; easier, since Postman can import a Swagger API description – so you don’t have to write a single line of code to test out an API.&lt;/p&gt;
&lt;h2 id=&#34;rss-feed&#34;&gt;RSS Feed&lt;/h2&gt;
&lt;p&gt;If your PULL API has been enabled for Public access then you can offer 3rd parties the option of accessing the feed via an RSS feed. The link is visible just below the tick box for public access.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/workflow-send-rss.png&#34; alt=&#34;Configuring the PULL API&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PUSH API worked example - Zapier</title>
      <link>https://docs.agilebase.co.uk/docs/integrations/push-example-zapier/</link>
      <pubDate>Tue, 02 Jun 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/integrations/push-example-zapier/</guid>
      <description>
        
        
        &lt;p&gt;One of the most common methods of pushing data into other systems is to use &lt;a href=&#34;https://zapier.com&#34;&gt;Zapier&lt;/a&gt;, which is a ‘drag and drop’ integration tool that requires no programming (just like agileBase itself).&lt;/p&gt;
&lt;p&gt;We will use a worked example: building a system to send a ‘hello’ SMS message whenever a new contact is added to our database. In real life, you may send appointment reminders or other notifications by text. Of course Zapier integrations aren&amp;rsquo;t limited to sending text messages, there are tons of third party systems you can use, under many different categories, but text messages are a nice simple example to work through.&lt;/p&gt;
&lt;p&gt;For this example we’ll use&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://agilebase.co.uk&#34;&gt;agileBase&lt;/a&gt; as a source of data&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zapier.com&#34;&gt;Zapier&lt;/a&gt; to collect the data and send it to…&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twilio.com&#34;&gt;Twilio&lt;/a&gt; to send the text messages&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;agilebase-setup&#34;&gt;agileBase setup&lt;/h2&gt;
&lt;p&gt;First, some preparatory work in agileBase. Assuming we already have a contacts database, each person with a name and mobile phone number, there’s just one extra thing we need to do.&lt;/p&gt;
&lt;p&gt;The system will need to know when a contact has been sent a text, so it can filter them out and prevent them being repeatedly texted. To allow this, we need to add a field, call it &lt;code&gt;intro text sent&lt;/code&gt;. Make it a date and time field, accurate to the second.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/zapier-sent-field.png&#34; alt=&#34;Zapier sent field&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can set it to ‘show never’, as this information’s unlikely to be useful to the average user.&lt;/p&gt;
&lt;p&gt;Next, we &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/&#34;&gt;create a view&lt;/a&gt; to provide the data to send to the text messaging service. Here’s such a view. It’s very simple, containing just the info necessary, i.e. a message calculation and the mobile phone number to send it to. We’ve put it in a tile called ‘System – Integration’. It’s a good idea to put views used for system purposes somewhere like this so they’ll be hidden from everyday users, but administrators can still easily find them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/zapier-view.png&#34; alt=&#34;Zapier view&#34;&gt;&lt;/p&gt;
&lt;p&gt;We’ve added a couple of [filters]((/docs/views/filters/), firstly to make sure we only pick up people who have a phone number entered and secondly to filter out any who’ve already been sent the message (using the Intro Text Sent field we created above). You’ll notice for initial testing only, I’ve added a third filter here so only one contact is listed - myself. When we’ve confirmed the system works as expected, this filter can be removed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/zapier-view-filters.png&#34; alt=&#34;Zapier view filters&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One small note to do with this specific example only – Twilio likes to receive phone numbers in international format but without the leading +, i.e. rather than “07891 123456”, use “447891123456”. In real life we’d probably create a calculation field to format them this way, for now we’ll just make sure to enter test numbers like that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;zapier-setup---receiving-data-from-agilebase&#34;&gt;Zapier Setup - receiving data from agileBase&lt;/h2&gt;
&lt;p&gt;That’s the agileBase side of things prepared, now to Zapier.&lt;/p&gt;
&lt;p&gt;Log into your Zapier account and press the &lt;em&gt;Make a Zap!&lt;/em&gt; button.&lt;/p&gt;
&lt;p&gt;Under &lt;em&gt;choose app&lt;/em&gt;, select &lt;em&gt;Webhooks by Zapier&lt;/em&gt;. Webhooks are the way to communicate with agileBase. At the time of writing you’ll need a paid Zapier account to use them.&lt;/p&gt;
&lt;p&gt;Under &lt;em&gt;choose trigger event&lt;/em&gt; two options will be shown - &lt;em&gt;Retrieve Poll&lt;/em&gt; and &lt;em&gt;Catch Hook&lt;/em&gt;. In brief, if you select &lt;em&gt;Retrieve Poll&lt;/em&gt;, Zapier will regularly poll agileBase (say every 5 minutes) to check if there’s any new data to retrieve. If you select &lt;em&gt;Catch Hook&lt;/em&gt;, communication will instead be started by agileBase, which will ‘push’ data to Zapier only when there is something new to send.&lt;/p&gt;
&lt;p&gt;Here, we’ll use Catch Hook, which is generally recommended. It’s more efficient and a bit easier to set up, as agileBase will automatically record the time each record is sent to Zapier. Otherwise, you’ll have to set up additional steps in Zapier to send this information back.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/zapier-catch-hook.png&#34; alt=&#34;Zapier catch hook&#34;&gt;&lt;/p&gt;
&lt;p&gt;When you press Continue, Zapier will provide you with a custom URL and some additional options which can be left unchanged. Copy this URL and record it in agileBase: go to the view’s &lt;em&gt;manage&lt;/em&gt; tab, show the &lt;em&gt;Send&lt;/em&gt; panel and select &lt;em&gt;send data to a third party system using the API&lt;/em&gt;. Paste the Zapier URL into the space provided:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/zapier-ab-push.png&#34; alt=&#34;Zapier aB push&#34;&gt;&lt;/p&gt;
&lt;p&gt;Secondly, select the date &amp;amp; time field ‘Intro Text Sent’ (created above) in the dropdown. That means whenever a record is sent to Zapier, the timestamp will be recorded in that field. All other settings can be left on their defaults.&lt;/p&gt;
&lt;p&gt;Finally, press the &lt;em&gt;Run Workflow Now&lt;/em&gt; button to send a test record to Zapier.&lt;/p&gt;
&lt;p&gt;Back in Zapier, just press &lt;em&gt;Test and Continue&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;finishing-zapier-setup&#34;&gt;Finishing Zapier setup&lt;/h3&gt;
&lt;p&gt;Zapier now has our data, at least a test record. The next step is to set up actually sending the text message.&lt;/p&gt;
&lt;p&gt;There are dozens of Zapier-compatible services that can send text messages. We use Twilio but the process is similar whatever you choose. In fact the process is similar whatever you’re doing with the data, be that sending a text, sending the data to a Google Spreadsheet or Mailchimp, to name just three examples.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/zapier-select-twilio.png&#34; alt=&#34;Zapier select Twilio&#34;&gt;&lt;/p&gt;
&lt;p&gt;When you press Continue, you’ll be asked to sign into Twilio (in this example). Do that as prompted, then you’ll be able to set the options below. The important ones are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;From Number&lt;/strong&gt;: just select, this will automatically show any phone numbers you’ve set up in Twilio&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;To Number&lt;/strong&gt;: here, click the selector on the right and select the phone number field from agileBase. By this stage, Zapier, knows which fields are in agileBase&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message&lt;/strong&gt;: similarly, click the selctor and choose the message field from agileBase&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/zapier-send-sms.png&#34; alt=&#34;Zapier send SMS&#34;&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;em&gt;Test and Continue&lt;/em&gt;. If all goes well, a text message will be sent and you’ll get the option to turn the integration on permanently!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/zapier-success.png&#34; alt=&#34;Zapier success&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then, you can remove the test filters from the view in agileBase and everything will be live.&lt;/p&gt;
&lt;p&gt;Although today we used the example of sending a text message, the process is very similar whichever service you decide to connect to with Zapier - you should be able to follow along the example replacing the SMS-specific steps with your own.&lt;/p&gt;
&lt;p&gt;Good luck and please let us know what cool things you do with your data. Also if anything can be improved in this walkthrough, we’d be very keen to hear about that too.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: PULL API worked example - Power BI</title>
      <link>https://docs.agilebase.co.uk/docs/integrations/pull-example-power-bi/</link>
      <pubDate>Tue, 02 Jun 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/integrations/pull-example-power-bi/</guid>
      <description>
        
        
        &lt;p&gt;agileBase has built in charting which is great for quickly analysing and answering questions about data in your system, but specialist business intelligence apps can be particularly useful if you want to join data from multiple sources (perhaps an accounting package or marketing automation system too) in one place.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/powerbi.gif&#34; alt=&#34;Power BI&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;setting-up&#34;&gt;Setting up&lt;/h2&gt;
&lt;p&gt;The below may look like lots of steps but that’s just because we’ve split it up into very small, simple parts to make it as easy as possible to follow.&lt;/p&gt;
&lt;h3 id=&#34;step-1-set-up-a-view-in-agilebase-to-use-as-a-data-source&#34;&gt;Step 1: set up a view in agileBase to use as a data source&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Use a view bringing in as many possible variables into one place. For example, if you want to analyse sales, you might include totals by customer, product, salesperson, region, category, price banding and date. That way you have plenty of dimensions to analyse in multiple ways later on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;step-2-turn-on-the-api-for-the-view-to-make-data-available&#34;&gt;Step 2: turn on the API for the view to make data available&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/powerbi-ab.png&#34; alt=&#34;Power BI - aB view setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the view&amp;rsquo;s &lt;em&gt;manage&lt;/em&gt; tab, select the &lt;em&gt;send&lt;/em&gt; panel.&lt;/p&gt;
&lt;p&gt;Select &lt;em&gt;send data to a third party system using the API&lt;/em&gt; in the dropdown list and make sure you tick &lt;em&gt;allow access from third party software using an API key&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Refresh the view to show your API key needed for the next step.&lt;/p&gt;
&lt;h3 id=&#34;step-3-within-power-bi-press-_get-data_-and-select-_web_-as-the-data-source&#34;&gt;Step 3: within Power BI press &lt;em&gt;get data&lt;/em&gt; and select &lt;em&gt;Web&lt;/em&gt; as the data source.&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/powerbi-web.png&#34; alt=&#34;Power BI - web&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-4-enter-the-sync-details-provided-by-ab-into-power-bi&#34;&gt;Step 4: enter the sync details provided by AB into Power BI&lt;/h3&gt;
&lt;p&gt;Select the advanced option and fill in the following URL parts provided from the AB view setup in the first point. These are the parameters to add:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;?get_report_json=true
&amp;amp;c=[your ‘c’ value here from AB]
&amp;amp;t=[your ‘t’ value here from AB]
&amp;amp;r=[your ‘r’ value here from AB]
&amp;amp;json_format=json
&amp;amp;simple_format=true
&amp;amp;row_limit=100000 [or however many rows you need]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/powerbi-web-entry.png&#34; alt=&#34;Power BI - web setup&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-5-enter-the-authorisation-key-into-power-bi&#34;&gt;Step 5: enter the authorisation key into Power BI&lt;/h3&gt;
&lt;p&gt;Select &lt;em&gt;authorization&lt;/em&gt; from the dropdown options under ‘HTTP request hear parameters (optional)’ and press &lt;em&gt;OK&lt;/em&gt;. The authorisation key is provided in the agileBase view.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/powerbi-auth.png&#34; alt=&#34;Power BI - auth setup&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-6-make-data-visible-in-power-bi&#34;&gt;Step 6: make data visible in Power BI&lt;/h3&gt;
&lt;p&gt;Once the data has pulled through and the connection is set up you will need to convert the dataset into a table.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/powerbi-convert-to-table.png&#34; alt=&#34;Power BI - convert to table&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-7-expand-the-colums&#34;&gt;Step 7: expand the colums&lt;/h3&gt;
&lt;p&gt;Once converted to a table you will then need to expand the data into columns and your view will be presented to manipulate.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/powerbi-expand.png&#34; alt=&#34;Power BI - expand&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-8-create-your-visualisations&#34;&gt;Step 8: create your visualisations!&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/powerbi-visualisations.png&#34; alt=&#34;Power BI - visualisations&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Exporting to spreadsheet</title>
      <link>https://docs.agilebase.co.uk/docs/integrations/exporting-to-spreadsheet/</link>
      <pubDate>Tue, 02 Jun 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/integrations/exporting-to-spreadsheet/</guid>
      <description>
        
        
        &lt;p&gt;A spreadsheet export is the simplest way for everyday users to get data out of agileBase without requiring that an administrator sets up an integration.&lt;/p&gt;
&lt;p&gt;Details of how to allow this are in the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/exporting/&#34;&gt;security and compliance&lt;/a&gt; section.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Slack integration</title>
      <link>https://docs.agilebase.co.uk/docs/integrations/slack-integration/</link>
      <pubDate>Tue, 02 Jun 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/integrations/slack-integration/</guid>
      <description>
        
        
        &lt;p&gt;When a comment is added to a record in agileBase, a copy can be sent to your Slack workspace, to a specific channel appropriate to the tile. Instructions are in progress, in the meantime please &lt;a href=&#34;https://agilechilli.com/contact-us/&#34;&gt;contact us&lt;/a&gt; for help setting this up.&lt;/p&gt;
&lt;p&gt;Integration with Microsoft Teams or other similar services is also possible should a customer wish - please get in touch if so.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Importing from spreadsheet</title>
      <link>https://docs.agilebase.co.uk/docs/integrations/importing/</link>
      <pubDate>Wed, 03 Jun 2020 16:40:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/integrations/importing/</guid>
      <description>
        
        
        &lt;p&gt;agileBase allows data to be imported from CSV (Comma Separated Variable) files. All popular spreadsheet software can save data in this format.&lt;/p&gt;
&lt;p&gt;Anyone with &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/privileges/&#34;&gt;&lt;strong&gt;manage&lt;/strong&gt; privileges&lt;/a&gt; on a table can import data into it.&lt;/p&gt;
&lt;p&gt;In the tiles interface, load any view created from the table to import into. Scroll to the bottom of the rows and press the cloud import icon, then follow through the prompts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/import-link.png&#34; alt=&#34;import link&#34;&gt;&lt;/p&gt;
&lt;p&gt;Data can be imported in two ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;insert all new records&lt;/li&gt;
&lt;li&gt;update existing records&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inserting new records will create a new record in the database for every line in the CSV file. Updating existing records will attempt to match each line in the file with an existing record and update all field values from the CSV. This can be useful when merging in data from an external source, or exporting, altering with a third party system and re-importing. Another use can be updating one field based on another - you can &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/exporting/&#34;&gt;export&lt;/a&gt;, update the fields as necessary and re-import.&lt;/p&gt;
&lt;p&gt;In either case, the CSV file must contain fields in the same order as they are in the table being imported into. The column titles don’t need to be the same though, it’s the order which is important. The import screen will show you the column order which is necessary.&lt;/p&gt;
&lt;h2 id=&#34;updating-existing-records&#34;&gt;Updating existing records&lt;/h2&gt;
&lt;p&gt;When updating records, a key field must be selected to match records up. This can be any field that has the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/common-options/#unique&#34;&gt;unique&lt;/a&gt; property set. Alternatively the internal agileBase rowID can be used. This field is included as the first field in any data export.&lt;/p&gt;
&lt;p&gt;Sometimes, admins will want to do an export -&amp;gt; modify spreadsheet -&amp;gt; re-import workflow. This is straightforward:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Export from the admin interface by clicking the table containing the data you want to modify and clicking the &lt;em&gt;export&lt;/em&gt; button in the top toolbar.&lt;/li&gt;
&lt;li&gt;Open the spreadsheet, making any modifications you need. The first column will be the internal ID for each record, keep this, it will be needed when re-importing.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Note it will be hidden - you can un-hide it in the spreadsheet for clarity&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Blank out (remove content from) any columns which you haven’t updated. Otherwise if people have updated them since your export, you will overwrite their changes.&lt;/li&gt;
&lt;li&gt;Re-import using an ‘update’ type import as above. Select &lt;em&gt;use internal agileBase row IDs to identify records&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;notes-on-special-fields&#34;&gt;Notes on special fields&lt;/h2&gt;
&lt;p&gt;For a file field, please leave an empty column in the spreadsheet in that position. If you wish to do a bulk upload of many images or documents, please contact &lt;a href=&#34;https://agilechilli.com/contact-us/&#34;&gt;support&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Columns for &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-types/special-field-types/separators/&#34;&gt;separator&lt;/a&gt; and &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-types/special-field-types/referenced-data/&#34;&gt;referenced data&lt;/a&gt; fields should not be included in the import spreadsheet as these field types don&amp;rsquo;t store data.&lt;/p&gt;
&lt;p&gt;Data can be imported into &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-types/special-field-types/comment-feeds/&#34;&gt;comment fields&lt;/a&gt; as per any other field.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
