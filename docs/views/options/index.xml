<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agilebase docs – Options</title>
    <link>https://docs.agilebase.co.uk/docs/views/options/</link>
    <description>Recent content in Options on Agilebase docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 22 May 2022 16:00:00 +0100</lastBuildDate>
    
	  <atom:link href="https://docs.agilebase.co.uk/docs/views/options/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Display Options</title>
      <link>https://docs.agilebase.co.uk/docs/views/options/display-options/</link>
      <pubDate>Sun, 22 May 2022 16:00:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/views/options/display-options/</guid>
      <description>
        
        
        &lt;h2 id=&#34;show-charts-by-default&#34;&gt;Show charts by default&lt;/h2&gt;
&lt;p&gt;When a user opens this view, immediately show charts rather than data rows&lt;/p&gt;
&lt;h2 id=&#34;interface---inline-editing&#34;&gt;Interface -&amp;gt; inline editing&lt;/h2&gt;
&lt;p&gt;The goal of this feature is to allow rapid and efficient editing of data when in the list view so there’s no need to drill down into a record to edit and back to the list again after each.&lt;/p&gt;
&lt;p&gt;Some examples of where this might be useful would be when working through a list of milestones to update statuses, or when in a list of stock items to update quantities.&lt;/p&gt;
&lt;p&gt;In inline editing mode, the list view changes from something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/inline-editing-off-new.png&#34; alt=&#34;inline editing off&#34;&gt;&lt;/p&gt;
&lt;p&gt;into this editable version:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/inline-editing-on-new.png&#34; alt=&#34;inline editing on&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Certain fields will be editable&lt;/strong&gt;, but others will be read-only.&lt;/p&gt;
&lt;p&gt;Fields that can be editable are all those which are from the view’s parent table as well as the display fields of relations in that table.&lt;/p&gt;
&lt;p&gt;For example, if editing a list of contacts, then the contact name, email, phone number etc. would be editable as well as the organisation name, if the contacts table had a relation field linking to the organisations table, which had &lt;em&gt;organisation name&lt;/em&gt; as its display field.&lt;/p&gt;
&lt;p&gt;Fields that will not be editable are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;calculations&lt;/li&gt;
&lt;li&gt;fields from other tables joined to the view, except relation display fields as above&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The inline editing option has three states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disallow: the view can’t be inline edited&lt;/li&gt;
&lt;li&gt;Allow but turn off by default&lt;/li&gt;
&lt;li&gt;On by default&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;interface---cards-in-columns&#34;&gt;Interface -&amp;gt; cards in columns&lt;/h2&gt;
&lt;p&gt;When &lt;em&gt;cards in columns&lt;/em&gt; is selected, the display switches from showing each record as a row, to showing each as a card in a column.&lt;/p&gt;
&lt;p&gt;The column names are generated from the first dropdown field in the view (there must be at least one dropdown field in the view for this to work).&lt;/p&gt;
&lt;p&gt;Each available option in the dropdown becomes a column. Each record is placed, as a card, in the column which matches the dropdown value for that record.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/cards.png&#34; alt=&#34;the cards interface&#34;&gt;&lt;/p&gt;
&lt;p&gt;Dragging a card from one column to another updates that record, changing the value of the dropdown field to match the column.&lt;/p&gt;
&lt;h3 id=&#34;vertical-grouping-within-a-column&#34;&gt;Vertical grouping within a column&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s also possible to sub-divide each column into groups. To achieve that, simply set up the &lt;a href=&#34;https://docs.agilebase.co.uk/docs/fields/field-options/text-field-options/#specifying-dropdown-lists-and-tags-fields&#34;&gt;available options&lt;/a&gt; in the dropdown to have prefixes separated by a dot.&lt;/p&gt;
&lt;p&gt;E.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.1) column one, group 1&lt;/li&gt;
&lt;li&gt;1.2) column one, group 2&lt;/li&gt;
&lt;li&gt;2.1) column two, group 1&lt;/li&gt;
&lt;li&gt;2.2) column two, group 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, cards can be dragged to different groups, not just different columns.&lt;/p&gt;
&lt;h2 id=&#34;style-layout-options&#34;&gt;Style (layout options)&lt;/h2&gt;
&lt;p&gt;The visual style affects whether a list of rows is shown with headings or not. This is not used when the cards option above is active.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spreadsheet format - standard output in rows (no headings, the default option)&lt;/li&gt;
&lt;li&gt;headings and rows&lt;/li&gt;
&lt;li&gt;long headings and rows&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When &lt;strong&gt;headings and rows&lt;/strong&gt; is selected, the first field in the view will be used as a heading for the rows below. A new heading appears every time the field value changes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.agilebase.co.uk/headings-new.png&#34; alt=&#34;headings and rows&#34;&gt;&lt;/p&gt;
&lt;p&gt;When &lt;strong&gt;long headings and rows&lt;/strong&gt; is selected, an amalgamation of content from the first fields in the view that all belong to the view&amp;rsquo;s parent table will be used as a heading. As soon as a field is encountered that is from a different table, heading text generation stops. Calculations that are added to the view can also form part of a heading, as long as they are placed next to (before, after or within) that first set of fields from the view&amp;rsquo;s parent table.&lt;/p&gt;
&lt;p&gt;For example, if the fields in a view of organisations and contacts are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Organisation name (from the organisations table)&lt;/li&gt;
&lt;li&gt;Website address (from the organisations table)&lt;/li&gt;
&lt;li&gt;Contact Name (from the contacts table)&lt;/li&gt;
&lt;li&gt;Email address (from the contacts table)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;then a heading would be generated consisting of organisation and website address. Each time a row where one of these is different is encountered, a new heading row will be shown.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Behaviour Options</title>
      <link>https://docs.agilebase.co.uk/docs/views/options/behaviour-options/</link>
      <pubDate>Sun, 22 May 2022 16:00:00 +0100</pubDate>
      
      <guid>https://docs.agilebase.co.uk/docs/views/options/behaviour-options/</guid>
      <description>
        
        
        &lt;h2 id=&#34;group-by-all-non-aggregate-fields&#34;&gt;Group by all non-aggregate fields&lt;/h2&gt;
&lt;p&gt;Affects how some calculation aggregates worked - documented in &lt;a href=&#34;https://docs.agilebase.co.uk/docs/views/calculations/examples/#aggregates-of-child-rows&#34;&gt;calculations -&amp;gt; aggregates of child rows&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;allow-exports&#34;&gt;Allow exports&lt;/h2&gt;
&lt;p&gt;See &lt;a href=&#34;https://docs.agilebase.co.uk/docs/security-and-compliance/security-features/exporting/&#34;&gt;Security And Compliance -&amp;gt; Exporting&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;record-limit&#34;&gt;Record limit&lt;/h2&gt;
&lt;p&gt;Only return the top N rows of data from the view, even if there are more available. This is equivalent to adding a &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-select.html#SQL-LIMIT&#34;&gt;LIMIT clause&lt;/a&gt; in SQL.&lt;/p&gt;
&lt;h2 id=&#34;distinct-fields&#34;&gt;Distinct fields&lt;/h2&gt;
&lt;p&gt;If many rows in the view have the same values for a particular field, then reduce the number shown to only one row for every distinct (unique) value of that field. The top row is returned.&lt;/p&gt;
&lt;p&gt;Multiple distinct fields can be added, in which case the rows reduce based on their values unique in combination.&lt;/p&gt;
&lt;p&gt;For example, imagine you have a view showing countries, cities and populations, sorted by population descending, with data like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Japan, Tokyo, 13,515,271&lt;/li&gt;
&lt;li&gt;Japan, Nagoya, 2,283,289&lt;/li&gt;
&lt;li&gt;UK, London, 8,908,081&lt;/li&gt;
&lt;li&gt;UK, Bristol, 463,400&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adding a distinct field on the country would reduce this to the most populated city in each country, i.e.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Japan, Tokyo, 13,515,271&lt;/li&gt;
&lt;li&gt;UK, London, 8,908,081&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DISTINCT is an &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-select.html#SQL-DISTINCT&#34;&gt;SQL feature&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;amalgamate-with&#34;&gt;Amalgamate with&lt;/h2&gt;
&lt;p&gt;If you have two views with fields of the same type in the same order, then you can merge them together into one. The field names don&amp;rsquo;t necessarily need to be the same.&lt;/p&gt;
&lt;p&gt;This is done using an &lt;a href=&#34;https://www.sqltutorial.org/sql-union/&#34;&gt;SQL UNION&lt;/a&gt; clause.&lt;/p&gt;
&lt;h2 id=&#34;cache-view-rows&#34;&gt;Cache view rows&lt;/h2&gt;
&lt;p&gt;Caching can speed up views. It doesn&amp;rsquo;t need to be used often as the underlying database PostgreSQL is great at dealing with large data problems, but when it is necessary it can significantly speed up access, allowing faster loading and searching. Caching works well when&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a view is complex and slow to load&lt;/li&gt;
&lt;li&gt;it doesn&amp;rsquo;t contain a massive number of rows - in this case the issue is likely to be the raw volume of data, rather than the complexity of calculations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If both those criteria are met, then turning on caching can significantly speed a view up, allowing faster loading and searching. There are three options&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no caching (the default)&lt;/li&gt;
&lt;li&gt;cache view, update on record save
&lt;ul&gt;
&lt;li&gt;this means when a view is opened or searched, if there have been changes to data in any tables used by the view since it was last opened, then the cache will be updated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cache view, update once a day
&lt;ul&gt;
&lt;li&gt;useful for views that don&amp;rsquo;t need to be updated often, e.g. monthly reporting figures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If a view is cached and other views reference it, those other views will also speed up too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Caching is implemented using &lt;a href=&#34;https://en.wikipedia.org/wiki/Materialized_view&#34;&gt;materialized views&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you find a view is slow, feel free to &lt;a href=&#34;https://agilechilli.com/contact-us/&#34;&gt;contact us&lt;/a&gt; for support before trying options like caching, there are many other targeted options we can look at first, such as adding indexes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;query-plan&#34;&gt;Query Plan&lt;/h2&gt;
&lt;p&gt;The majority of the time you will not need to change this setting. However here&amp;rsquo;s what it does in case you do:&lt;/p&gt;
&lt;p&gt;When getting data from a view (the list of rows), the database internally uses a &lt;a href=&#34;https://www.postgresql.org/docs/current/planner-optimizer.html&#34;&gt;query planner&lt;/a&gt;. The planner works out the quickest way to return the results, as for complex queries there may be many possible ways.&lt;/p&gt;
&lt;p&gt;Most of the time that works very well, in fact increasingly well with each new release of the PostgreSQL database. However sometimes a sub-optimal plan can be used, resulting in a slow view. Agilebase then automatically tries out an alternative (specifically, disabling the use of &amp;lsquo;&lt;a href=&#34;https://www.postgresql.org/docs/14/runtime-config-query.html&#39;&#34;&gt;nested loops&lt;/a&gt; to see if that&amp;rsquo;s faster and sets this option if so.&lt;/p&gt;
&lt;p&gt;This option only needs to be changed if the Agilebase detection fails (which is possible, query timing can depend on many factors, such as how many other queries the database is running at the time), resulting in a slower view rather than a faster one.&lt;/p&gt;
&lt;p&gt;In that case, you can experiment by changing the setting from &amp;lsquo;default&amp;rsquo; to &amp;lsquo;alternative&amp;rsquo; or vice versa.&lt;/p&gt;
&lt;p&gt;As above, feel free to &lt;a href=&#34;https://agilechilli.com/contact-us/&#34;&gt;contact us&lt;/a&gt; if you have any questions about improving database performance.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
